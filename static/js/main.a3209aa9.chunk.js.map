{"version":3,"sources":["Header.js","Utils.js","Canvas.js","Accuracy.js","mnist_strategies.js","quickdraw_strategies.js","caltech_strategies.js","Footer.js","Projection.js","Layout.js","Selected.js","ProjectionSelected.js","BigButton.js","Timer.js","SelectedList.js","Modal.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","i","selectStrategy","setTransitionStatus","_this2","_this$props","datasets","selectDataset","strategies","strategy","dataset","strategy_colors","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","inner","active","onClick","key","color","reduce","p","c","handleStrategy","toggleModal","Component","comma","x","parts","toString","split","replace","join","toPercent2","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","decodeS","string","splits","label_dict","MNIST","Quickdraw","Caltech","Canvas","getCtx","refs","canvas","lineHeight","width","strategy_dict","num_labeled","random","accuracy","entropy","adversarial","ensemble","total_dict","Accuracy","toConsumableArray","Array","show_tip","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","setState","transition_status","strategy_accuracy","results","point_size","cell_width","x_padding","min","all_strat_results","_","rounded_min","floor","space","clearRect","y_padding","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","stroke","non_active_strats","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","strat","value","these_results","arc","PI","fill","err","return","_this$props2","adjusted_round","round_limit","label_round","toFixed","sign","src_Canvas","Fragment","race","j","diff","reverse","onMouseEnter","handleEnter","onMouseLeave","handleLeave","cursor","bottom","whiteSpace","fontSize","marginBottom","o","textTransform","marginRight","textAlign","flexGrow","defineProperty","border","borderLeft","justifyContent","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","key_height","src_Accuracy","getTextures","texturesSources","loader","THREE","textureSource","Promise","resolve","reject","load","texture","flipY","sprite_spec_mnist","sprite_side","sprite_size","sprite_number","sprite_image_size","sprite_spec_quickdraw","assign","sprite_spec_caltech","sprite_spec_dict","point_size_dict","mnist_tile_locations","process","quickdraw_tile_locations","tile_dict","getRanges","ranges","spec","start","end","push","getColorStuff","color_num","length","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","embedding","Float32Array","Projection","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","showHover","hover_ctx","resetCamera","prev_d3_x","prev_d3_y","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","getScaleFromZ","dx","dy","hover_transform","hover_mount","hover_x","parseInt","hover_y","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","_sprite_spec_dict$thi","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","texture_subsize","textures","repeat","addAttribute","uniforms","construct","size","fragment_shader","material","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","transition_colors","_this3","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","start_colors","end_colors","color_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","delay","position_tween","chain","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","size_delay","me","size_tween","onComplete","sel_position_tween","setTimeout","_this4","_sprite_spec_dict$thi2","_loop2","attribute_indexes","loc_index","_this5","end_size","groups","_loop3","g","points","_this6","_this$props3","_loop4","_this7","all","then","indexOf","loadImages","setKeyHeight","catch","console","log","message","prevd","d","_getColorStuff","remove","revealSelected","_this$props4","aspect","updateProjectionMatrix","renderer","setSize","current_scale","d3_x","d3_y","resize_transform","translate","view","mount","d3_zoom","mouse_coords","digit_index","full_index","images","image_dict","y_adjust","hover_pad","hover_size","childNodes","imageSmoothingEnabled","status","adjusted_status","text_color","_sprite_spec_dict$thi3","innerText","drawImage","mouse_position","_this$props5","_mouse_position","slicedToArray","mouseX","mouseY","mouse_vector","_ref","_ref2","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","_this8","domElement","on","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props6","_getColorStuff2","setClearColor","appendChild","point_group","selected_point_group","scaleExtent","far","zoomHandler","initial_scale","initial_transform","handleMouse","_this$props7","requestAnimationFrame","sortObjects","render","removeChild","_this9","_this$props8","overflow","marginLeft","hover_bord","imageRendering","paddingTop","textOverflow","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","footer_height","header_height","src_Projection","BigButton","button_text","next_state","loading_embedding","inactive","toggleList","className","borderRadius","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","SelectedList","wh","selected_indexes","_sprite_spec_dict$dat","target_width","columns","image_width","image_pickers","sprite_num","right","paddingBottom","gridTemplateColumns","gridRowGap","gridColumnGap","backgroundImage","backgroundSize","backgroundPosition","Modal","fontStyle","href","textIndent","marginTop","total","curr","Layout","show_list","show_modal","debounce","new_value","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","_React$createElement","_this$state","zIndex","src_ProjectionSelected","font_size","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","src_Timer","e","stopPropagation","src_SelectedList","maxWidth","src_Modal","_strategy_dict","es","caltech_tile_locations","tile_array","Data","loading","scaleEmbeddings","fetchData","checkOrFetchData","strat_limit","src","img","document","new_images","xs","abs","ys","max_x","max_y","domain","url","fetch","response","json","r","scaled","embedding_string","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3209aa9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  handleStrategy(i) {\n    this.props.selectStrategy(i)\n    this.props.setTransitionStatus(0)\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px 0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button onClick={this.handleStrategy.bind(this, i)}>\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 2}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <button\n            onClick={() => {\n              this.props.toggleModal(true)\n            }}\n          >\n            ? Info\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet quickdraw_labels = [\n  'dolphin',\n  'cat',\n  'face',\n  'angel',\n  'airplane',\n  'apple',\n  'broccoli',\n  'crayon',\n  'bicycle',\n  'elephant',\n]\nlet caltech_labels = [\n  'cake',\n  'dolphin',\n  'elephant',\n  'golden gate bridge',\n  'goldfish',\n  'rainbow',\n  'teapot',\n  'teddy bear',\n  'washing machine',\n  'waterfall',\n]\nexport let label_dict = {\n  MNIST: labels,\n  Quickdraw: quickdraw_labels,\n  Caltech: caltech_labels,\n}\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { mnist_strategies } from './mnist_strategies.js'\nimport { quickdraw_strategies } from './quickdraw_strategies.js'\nimport { caltech_strategies } from './caltech_strategies.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet strategy_dict = {\n  MNIST: mnist_strategies,\n  Quickdraw: quickdraw_strategies,\n  Caltech: caltech_strategies,\n}\n\nlet total_dict = {\n  MNIST: 60000,\n  Quickdraw: 65729,\n  Caltech: 822,\n}\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nlet point_size = 4\nlet y_padding = point_size * 2\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      show_tip: null,\n    }\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.strategy_explored !== prevProps.strategy_explored) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  handleEnter(i) {\n    this.setState({ show_tip: i })\n  }\n\n  handleLeave() {\n    this.setState({ show_tip: null })\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n      dataset,\n    } = this.props\n\n    let strategy_accuracy = strategy_dict[dataset]\n    let results = strategy_accuracy[strategy]\n\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 4\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    cell_width = Math.min(width / cell_num, cell_width)\n    let x_padding = cell_width / 2\n\n    let all_strat_results = strategies.map(s =>\n      _.min(strategy_accuracy[s].accuracy)\n    )\n\n    let rounded_min = Math.floor(_.min(all_strat_results) * 10) / 10\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    let non_active_strats = strategies.filter(s => s !== strategy)\n\n    for (let strat of non_active_strats) {\n      let these_results = strategy_accuracy[strat]\n\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#666'\n      ctx.fillStyle = '#666'\n      ctx.beginPath()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        drawLine(\n          ctx,\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          i === 0\n        )\n      }\n      ctx.stroke()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        ctx.beginPath()\n        ctx.arc(\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          point_size,\n          0,\n          2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n\n    point_size = 6\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n    let { show_tip } = this.state\n\n    let num_labeled = strategy_dict[dataset].num_labeled\n    let results = strategy_dict[dataset][strategy]\n\n    let label_round = round\n    let cell_width = 100\n    let cell_num = 8\n    cell_width = Math.min(width / cell_num, cell_width)\n    if (transition_status > 1) label_round = round + 1\n\n    label_round = round\n\n    let strategy_accuracy = strategy_dict[dataset]\n\n    return (\n      <div style={{ pointerEvents: 'none' }}>\n        <div style={{ display: 'inline-flex' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? (\n                <span>\n                  Round {round + 1} of {round_limit + 1}\n                </span>\n              ) : (\n                ' '\n              )}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {(results.accuracy[round] * 100).toFixed(2)}% (\n              {Math.sign(results.accuracy[round] - results.accuracy[0]) === 1\n                ? '+'\n                : ''}\n              {toPercent2(results.accuracy[round] - results.accuracy[0])})\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px`, display: 'none' }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {`Relative Error Reduction: ${(\n                (1 -\n                  (1 - results.accuracy[round]) / (1 - results.accuracy[0])) *\n                100\n              ).toFixed(2)}`}\n              %\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => {\n              let race = strategies.map((s, j) => {\n                return {\n                  string: `${s}: ${toPercent2(\n                    strategy_accuracy[s].accuracy[i]\n                  )}`,\n                  strategy: s,\n                  value: strategy_accuracy[s].accuracy[i],\n                  diff:\n                    strategy_accuracy[s].accuracy[i] -\n                    strategy_accuracy[s].accuracy[0],\n                }\n              })\n              race = _.sortBy(race, 'value').reverse()\n\n              return (\n                <div\n                  key={'explored' + i}\n                  onMouseEnter={this.handleEnter.bind(this, i)}\n                  onMouseLeave={this.handleLeave.bind(this)}\n                  onClick={() => {\n                    this.handleRound(i)\n                  }}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: cell_width * i,\n                    width: cell_width,\n                    height: height - grem * 2,\n                    cursor: i === round ? 'default' : 'pointer',\n                  }}\n                >\n                  {show_tip === i ? (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: 0,\n                        bottom: height - grem * 2,\n                        background: '#333',\n                        padding: `${grem / 2}px ${grem / 2}px`,\n                        whiteSpace: 'nowrap',\n                        pointerEvents: 'none',\n                        fontSize: (grem / 1.5) * 1,\n                      }}\n                    >\n                      <div style={{ color: '#fff', marginBottom: grem / 4 }}>\n                        Round {i + 1}\n                      </div>\n                      {race.map((o, i) => (\n                        <div\n                          key={o.strategy}\n                          style={{\n                            textTransform: 'capitalize',\n                            color: strategy === o.strategy ? '#fff' : '#aaa',\n                            display: 'flex',\n                            marginBottom: grem / 8,\n                          }}\n                        >\n                          <div style={{ marginRight: grem / 4 }}>\n                            {i + 1}. {o.strategy}:\n                          </div>\n                          <div style={{ textAlign: 'right', flexGrow: 1 }}>\n                            {(o.value * 100).toFixed(2)}% (\n                            {Math.sign(o.diff) === 1 ? '+' : ''}\n                            {(o.diff * 100).toFixed(2)}%)\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : null}\n                </div>\n              )\n            })}\n            <div\n              style={{\n                position: 'absolute',\n                top: y_padding,\n                left: cell_width * (strategy_explored + 1),\n                width: (round_limit - strategy_explored) * cell_width,\n                height: height - grem * 2 - y_padding * 2,\n                border: 'solid 2px rgba(100,100,100,0.2)',\n                pointerEvents: 'auto',\n                borderLeft: 'none',\n                pointerEvents: 'none',\n              }}\n            />\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            {comma(total_dict[this.props.dataset])} points,{' '}\n            {comma(num_labeled[label_round])} labelled (\n            {toPercent2(\n              num_labeled[label_round] / total_dict[this.props.dataset]\n            )}\n            )\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","export let mnist_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.923,\n      0.9468,\n      0.9379,\n      0.9551,\n      0.9558,\n      0.955,\n      0.958,\n      0.9664,\n      0.9635,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.923,\n      0.9485,\n      0.9589,\n      0.96,\n      0.9744,\n      0.9702,\n      0.9774,\n      0.9764,\n      0.9782,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.923,\n      0.9534,\n      0.9558,\n      0.9691,\n      0.9743,\n      0.9716,\n      0.9775,\n      0.9801,\n      0.9795,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.923,\n      0.9554,\n      0.967,\n      0.9731,\n      0.9748,\n      0.979,\n      0.9812,\n      0.9848,\n      0.9829,\n    ],\n  },\n}\n","export let quickdraw_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.7685568264784619,\n      0.8011681674373327,\n      0.7949622779265028,\n      0.8040885860306644,\n      0.8141275249452421,\n      0.823192990995376,\n      0.8260525675346799,\n      0.831284984181066,\n      0.8297639328303723,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7685568264784619,\n      0.805609637381358,\n      0.8077999513263567,\n      0.8172913117546848,\n      0.8289729861280117,\n      0.8298856169384279,\n      0.8343270868824532,\n      0.8541615964954977,\n      0.8440009734728644,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7685568264784619,\n      0.8283037235337065,\n      0.8426624482842541,\n      0.83603066439523,\n      0.8523971769286931,\n      0.8506935994159163,\n      0.8619493794110489,\n      0.8623752737892432,\n      0.8586639084935508,\n    ],\n  },\n}\n","export let caltech_strategies = {\n  num_labeled: [300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0],\n  random: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8490566037735849,\n      0.8726415094339622,\n      0.8915094339622641,\n      0.8584905660377359,\n      0.910377358490566,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7547169811320755,\n      0.8349056603773585,\n      0.8066037735849056,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8773584905660378,\n      0.8773584905660378,\n      0.9056603773584906,\n      0.8726415094339622,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8537735849056604,\n      0.8867924528301887,\n      0.8679245283018868,\n      0.8726415094339622,\n      0.8773584905660378,\n      0.8584905660377359,\n      0.9056603773584906,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7547169811320755,\n      0.9339622641509434,\n      0.9339622641509434,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9481132075471698,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9245283018867925,\n    ],\n  },\n}\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      // adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom:\n            this.props.key_height !== null\n              ? this.props.key_height + grem / 2\n              : grem * 2,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          dataset={dataset}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n          round_limit={round_limit}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS, label_dict } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\nlet color_duration = 500\nlet size_duration = 500\nlet position_duration = 1000\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\n// let sprite_side = 73\n// let sprite_size = sprite_side * sprite_side\n// let sprite_number = 12\n// let sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet point_size_dict = {\n  MNIST: 30,\n  Quickdraw: 30,\n  Caltech: 30,\n}\n\nlet hover_size = 28 * 3\nlet hover_pad = 4\nlet hover_bord = 0\n\nlet loader = new THREE.TextureLoader()\n// let circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\n// circle_texture.flipY = false\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let quickdraw_images = quickdraw_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let caltech_images = caltech_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let image_dict = {\n//   MNIST: mnist_images,\n//   Quickdraw: quickdraw_images,\n//   Caltech: caltech_images,\n// }\n\nfunction getRanges(dataset) {\n  let ranges = []\n  let spec = sprite_spec_dict[dataset]\n  let { sprite_number, sprite_size } = spec\n  for (let i = 0; i < sprite_number; i++) {\n    let start = i * sprite_size\n    let end = (i + 1) * sprite_size\n    if (i === sprite_number - 1) end = sprite_number * sprite_size\n    ranges.push([start, end])\n  }\n  return ranges\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\n\nfunction getColorStuff(dataset) {\n  let color_num = label_dict[dataset].length\n  let color_array = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .gl()\n  )\n  color_array.push(\n    chroma\n      .hsl(0, 0, 0.5)\n      .luminance(0.1)\n      .gl()\n  )\n\n  let color_array_hexes = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .hex()\n  )\n\n  let status_to_color = color_array.map(a => a.slice(0, 3))\n\n  return { color_array, color_array_hexes, status_to_color }\n}\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      color_array: null,\n      color_array_hexes: null,\n      status_to_color: null,\n    }\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n    this.showHover = this.showHover.bind(this)\n    this.hover_ctx = null\n    this.resetCamera = this.resetCamera.bind(this)\n    this.prev_d3_x = null\n    this.prev_d3_y = null\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    if (d3.event.transform.k === this.getScaleFromZ(this.camera.position.z)) {\n      if (this.prev_d3_x !== null) {\n        let dx = d3_transform.x - this.prev_d3_x\n        let dy = d3_transform.y - this.prev_d3_y\n        let hover_transform = this.hover_mount.style.transform.split(',')\n        let hover_x = parseInt(hover_transform[0].split('(')[1])\n        let hover_y = parseInt(hover_transform[1])\n        this.hover_mount.style.transform = `translate3d(${hover_x +\n          dx}px, ${hover_y + dy}px, 0)`\n      }\n    }\n\n    this.prev_d3_x = d3_transform.x\n    this.prev_d3_y = d3_transform.y\n\n    this.camera.position.set(x, y, z)\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return this.state.status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: point_size_dict[this.props.dataset] },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n\n      point_cloud.userData = { sprite_index: s }\n\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings, transition_colors) {\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      if (true || transition_colors) {\n        let start_colors = back_existing.geometry.attributes.color.array.slice()\n        let color_prep = slice.labels.map(label => {\n          let color = this.state.status_to_color[label]\n          return color\n        })\n        let color_flattened = _.flatten(color_prep)\n        let end_colors = new Float32Array(color_flattened)\n\n        let color_tween = new TWEEN.Tween(start_colors)\n          .to(end_colors, color_duration)\n          .easing(TWEEN.Easing.Linear.None)\n        color_tween.onUpdate(function() {\n          back_existing.geometry.attributes.color.array = start_colors\n          back_existing.geometry.attributes.color.needsUpdate = true\n        })\n        color_tween.delay(color_duration)\n\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, position_duration)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start().chain(color_tween)\n\n        // let combo_tween = new TWEEN.Tween(combo_start)\n        //   .to(combo_end, 800)\n        //   .easing(TWEEN.Easing.Linear.None)\n        // combo_tween.onUpdate(function() {\n        //   if (s === 0) {\n        //     console.log(combo_start.positions[0])\n        //   }\n        //   back_existing.geometry.attributes.color.array = combo_start.colors\n        //   back_existing.geometry.attributes.color.needsUpdate = true\n        //   back_existing.geometry.attributes.position.array =\n        //     combo_start.positions\n        //   back_existing.geometry.attributes.position.needsUpdate = true\n        // })\n        // combo_tween.start()\n      } else {\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start()\n      }\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size_delay = 1200\n      if (!transition_colors) size_delay = 400\n      let size = { value: point_size_dict[this.props.dataset] }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, size_duration)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(size_delay)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0.5)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, position_duration)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(2.6)\n              me.props.setTransitionStatus(0.5)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // me.addSelectedPoints()\n        // me.props.setTransitionStatus(0.5)\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [0.85, 0.85, 0.85]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n    // this.scene.children[1].visible = false\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: point_size_dict[this.props.dataset] }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, size_duration)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          setTimeout(() => {\n            me.props.setTransitionStatus(1)\n          }, 200)\n        }\n      })\n      size_tween.start()\n    }\n\n    // let opacity = { value: 0 }\n    // let end_opacity = { value: 1 }\n    // for (let g = 0; g < groups.length; g++) {\n    //   let points = groups[g]\n    //   points.material.uniforms.size = { value: 20 }\n    //   let opacity_tween = new TWEEN.Tween(opacity)\n    //     .to(end_opacity, 800)\n    //     .easing(TWEEN.Easing.Linear.None)\n    //   opacity_tween.onUpdate(function() {\n    //     console.log(opacity.value)\n    //     points.material.opacity = opacity.value\n    //   })\n    //   let me = this\n    //   opacity_tween.onComplete(function() {\n    //     if (g === 0) {\n    //       me.props.setTransitionStatus(1)\n    //     }\n    //   })\n    //   opacity_tween.start()\n    // }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = this.state.status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      let me = this\n      color_tween.onComplete(function() {\n        if (s === 0) {\n          setTimeout(function() {\n            me.props.setTransitionStatus(2.3)\n          }, 0)\n        }\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.loaded_embedding === null &&\n      this.props.loaded_embedding !== null\n    ) {\n      // first load\n      Promise.all(getTextures(tile_dict[this.props.dataset]))\n        .then(textures => {\n          this.textures = textures\n          this.addPoints()\n          this.addSelectedPoints()\n          this.props.setTransitionStatus(0.5)\n          let datasets = ['MNIST', 'Quickdraw', 'Caltech']\n          let index = datasets.indexOf(this.props.dataset)\n          let me = this\n          setTimeout(() => {\n            me.props.loadImages(index)\n          }, 0)\n          let height = this.divElement.clientHeight\n          this.props.setKeyHeight(height)\n        })\n        .catch(function(err) {\n          console.log(err.message) // some coding error in handling happened\n        })\n    } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      let prevd = decodeS(prevProps.loaded_embedding)\n      let d = decodeS(this.props.loaded_embedding)\n      if (prevd.dataset !== d.dataset) {\n        let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n          d.dataset\n        )\n        this.setState({\n          color_array,\n          color_array_hexes,\n          status_to_color,\n        })\n\n        // different dataset\n        while (this.scene.children.length > 0) {\n          this.scene.remove(this.scene.children[0])\n        }\n        this.resetCamera()\n        this.props.setTransitionStatus(0)\n        let height = this.divElement.clientHeight\n        this.props.setKeyHeight(height)\n        let me = this\n        setTimeout(() => {\n          Promise.all(getTextures(tile_dict[me.props.dataset])).then(\n            textures => {\n              me.textures = textures\n              me.addPoints()\n\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0.5)\n            }\n          )\n        }, 0)\n      } else if (prevd.strategy !== d.strategy) {\n        // new strategy, we should transition\n        // new strategy, who dis\n        // if (this.props.transition_status === 1) {\n        // this.labelSelected()\n        // }\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      } else if (\n        prevd.round !== d.round &&\n        this.props.transition_status !== 1.5\n      ) {\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      }\n    } else if (\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 0) ||\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 2.6)\n    ) {\n      if (this.props.round !== this.props.round_limit) {\n        this.revealSelected()\n      } else {\n        // last round\n        this.props.setTransitionStatus(1)\n      }\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.round !== prevProps.round) {\n    }\n\n    let { width, height } = this.props\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.camera.aspect = width / height\n      this.camera.updateProjectionMatrix()\n      this.renderer.setSize(width, height)\n      let height = this.divElement.clientHeight\n      this.props.setKeyHeight(height)\n\n      let current_scale = this.getScaleFromZ(this.camera.position.z)\n      let d3_x =\n        -(this.camera.position.x * current_scale) + this.props.width / 2\n      let d3_y = this.camera.position.y * current_scale + this.props.height / 2\n      var resize_transform = d3.zoomIdentity\n        .translate(d3_x, d3_y)\n        .scale(current_scale)\n      let view = d3.select(this.mount)\n      this.d3_zoom.transform(view, resize_transform)\n    }\n  }\n\n  showHover(mouse_coords, sprite_index, digit_index, full_index) {\n    let images = this.props.images\n    let image_dict = {\n      MNIST: images[0],\n      Quickdraw: images[1],\n      Caltech: images[2],\n    }\n    let loaded = this.props.embeddings[this.props.loaded_embedding]\n    this.hover_mount.style.display = 'block'\n    let y_adjust = `${mouse_coords[1] -\n      hover_size -\n      this.props.grem -\n      hover_pad * 4 -\n      14}px`\n    // y_adjust = `${mouse_coords[1] - hover_size / 2 - hover_pad}px`\n    this.hover_mount.style.transform = `translate3d(${mouse_coords[0] -\n      hover_size / 2 -\n      hover_pad}px, ${y_adjust},0)`\n    this.hover_ctx = this.hover_mount.childNodes[0].getContext('2d')\n    this.hover_ctx.imageSmoothingEnabled = false\n    let label = this.hover_mount.childNodes[1]\n    this.hover_ctx.fillRect(0, 0, hover_size, hover_size)\n\n    let status = loaded.statuses[full_index]\n\n    let adjusted_status = this.state.status_to_color.slice(\n      0,\n      this.state.status_to_color.length - 1\n    )\n    adjusted_status.push([0.5, 0.5, 0.5])\n\n    let color = null\n    let text_color = 'black'\n    if (status === 1 && this.props.round !== this.props.round_limit) {\n      color = '#eee'\n      text_color = 'black'\n    } else {\n      color =\n        'rgba(' +\n        adjusted_status[loaded.labels[full_index]]\n          .map(d => Math.round(d * 255))\n          .join(',') +\n        ',1)'\n    }\n    this.hover_mount.style.background = color\n    this.hover_mount.style.color = text_color\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    label.style.background = color\n    label.innerText =\n      status === 1 && this.props.round !== this.props.round_limit\n        ? 'selected'\n        : [...label_dict[this.props.dataset], 'unlabeled'][\n            loaded.labels[full_index]\n          ]\n    this.hover_ctx.drawImage(\n      image_dict[this.props.dataset][sprite_index],\n      // source rectangle\n      (digit_index % sprite_side) * sprite_image_size,\n      Math.floor(digit_index / sprite_side) * sprite_image_size,\n      sprite_image_size,\n      sprite_image_size,\n      // destination rectangle\n      0,\n      0,\n      hover_size,\n      hover_size\n    )\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height } = this.props\n    let [mouseX, mouseY] = mouse_position\n\n    let { sprite_size } = sprite_spec_dict[this.props.dataset]\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    if (this.props.dataset === 'Caletch')\n      this.raycaster.params.Points.threshold = 4.0\n    if (\n      this.scene.children[0] !== undefined &&\n      this.scene.children[0].children.length > 0\n    ) {\n      let intersects = this.raycaster.intersectObjects(\n        this.scene.children[0].children\n      )\n      if (intersects[0]) {\n        let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n        let intersect = sorted_intersects[0]\n        let sprite_index = intersect.object.userData.sprite_index\n        let digit_index = intersect.index\n        let full_index = sprite_index * sprite_size + digit_index\n        this.showHover([mouseX, mouseY], sprite_index, digit_index, full_index)\n        // this.props.setHoverIndex(full_index)\n        // this.highlightPoint(sprite_index, digit_index, full_index)\n      } else {\n        this.hover_mount.style.display = `none`\n      }\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node())\n      let mouse_position = [mouseX, mouseY]\n      this.checkIntersects(mouse_position)\n    })\n\n    view.on('mouseleave', () => {\n      this.hover_mount.style.display = `none`\n    })\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n      this.props.dataset\n    )\n    this.setState({\n      color_array,\n      color_array_hexes,\n      status_to_color,\n    })\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n\n    this.handleMouse()\n  }\n\n  resetCamera() {\n    let { width, height } = this.props\n\n    let view = d3.select(this.mount)\n\n    this.camera.position.x = 0\n    this.camera.position.y = 0\n    this.camera.position.z = 30\n\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem, dataset } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n          cursor: 'crosshair',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          ref={divElement => {\n            this.divElement = divElement\n          }}\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: 0,\n            pointerEvents: 'none',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              marginBottom: grem / 2,\n            }}\n          >\n            <div style={{ padding: `0 ${grem / 4}px` }}>Key:</div>\n            <div\n              style={{\n                background: '#888',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n              }}\n            >\n              unlabeled\n            </div>\n            <div\n              style={{\n                background: '#fff',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n                marginLeft: grem / 4,\n              }}\n            >\n              selected\n            </div>\n          </div>\n\n          <div\n            style={{\n              padding: `0 ${grem / 4}px 0 ${grem / 4}px`,\n              display: 'flex',\n              flexWrap: 'wrap',\n              marginBottom: grem / 2,\n            }}\n          >\n            <div style={{ padding: `0 0 0 0` }}>Labels:</div>\n            {this.state.color_array_hexes !== null\n              ? this.state.color_array_hexes.map((c, i) => (\n                  <div\n                    key={'color_' + i}\n                    style={{\n                      background: this.state.color_array_hexes[i],\n                      height: grem,\n                      textAlign: 'center',\n                      color: '#111',\n                      padding: `0 ${grem / 4}px`,\n                      marginRight: grem / 4,\n                    }}\n                  >\n                    {label_dict[dataset][i]}\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            width: hover_size + hover_pad * 2 + hover_bord * 2,\n            pointerEvents: 'none',\n            padding: hover_pad,\n            display: 'none',\n            color: 'white',\n            height: grem + hover_size + hover_pad * 3 + hover_bord * 2,\n            lineHeight: 0,\n            border: `solid ${hover_bord}px rgba(0,0,0,0.3)`,\n          }}\n          ref={mount => {\n            this.hover_mount = mount\n          }}\n        >\n          <canvas\n            width={hover_size}\n            height={hover_size}\n            style={{ imageRendering: 'pixelated' }}\n          />\n          <div\n            style={{\n              width: hover_size,\n              height: grem,\n              textAlign: 'center',\n              lineHeight: 1.5,\n              paddingTop: hover_pad,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\nimport { debounce } from 'lodash'\nimport SelectedList from './SelectedList'\nimport Modal from './Modal'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n      show_list: false,\n      show_modal: true,\n      key_height: null,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setSize = debounce(this.setSize, 200)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n    this.toggleList = this.toggleList.bind(this)\n    this.toggleModal = this.toggleModal.bind(this)\n    this.setKeyHeight = this.setKeyHeight.bind(this)\n  }\n\n  setKeyHeight(height) {\n    this.setState({ key_height: height })\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  toggleList(new_value) {\n    this.setState({ show_list: new_value })\n  }\n\n  toggleModal(new_value) {\n    this.setState({ show_modal: new_value })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n      show_list,\n      show_modal,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n      toggleList,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    let loading_embedding = requested_embedding !== loaded_embedding\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              padding: grem / 2,\n              zIndex: 999,\n              background: 'red',\n              display: 'none',\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                dataset={dataset}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                selectRound={this.props.selectRound}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n                round_limit={round_limit}\n                loadImages={this.props.loadImages}\n                images={this.props.images}\n                setKeyHeight={this.setKeyHeight}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n              dataset={dataset}\n              toggleList={this.toggleList}\n              selectRound={this.props.selectRound}\n              dataset={dataset}\n              strategy={strategy}\n              loading_embedding={loading_embedding}\n              key_height={this.state.key_height}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n            setTransitionStatus={this.setTransitionStatus}\n            toggleModal={this.toggleModal}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n              round_limit={round_limit}\n              dataset={dataset}\n              key_height={this.state.key_height}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: Math.min(500, ww),\n                  background: 'white',\n                  color: 'black',\n                  padding: grem,\n                  background: '#888',\n                }}\n              >\n                <div style={{ marginBottom: grem / 2 }}>Round {round + 1}</div>\n                <div style={{ position: 'relative', height: grem }}>\n                  <Timer\n                    grem={grem}\n                    gradient_string={gradient_string}\n                    ww={ww}\n                    labelsGotten={this.labelsGotten}\n                  />\n                </div>\n                <div\n                  style={{\n                    position: 'relative',\n                    paddingTop: grem / 2,\n                  }}\n                >\n                  Getting labels for selected points...\n                </div>\n              </div>\n            </div>\n          ) : null}\n          {show_list ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n                background: 'rgba(0, 0, 0, 0.4)',\n              }}\n              onClick={() => {\n                this.toggleList(false)\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: ww - grem * 3,\n                  color: 'black',\n                }}\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n              >\n                <SelectedList\n                  grem={grem}\n                  dataset={dataset}\n                  strategy={strategy}\n                  embeddings={embeddings}\n                  loaded_embedding={loaded_embedding}\n                  wh={wh}\n                  ww={ww - grem * 3}\n                  toggleList={this.toggleList}\n                />\n              </div>\n            </div>\n          ) : null}\n          {show_modal ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n                background: 'rgba(60, 60, 60, 0.4)',\n                overflow: 'auto',\n                paddingTop: wh < 800 ? wh / 4 : grem * 2.5,\n                paddingBottom: wh / 4,\n              }}\n              onClick={() => {\n                this.toggleModal(false)\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  maxWidth: 600,\n                  width: '100%',\n                  color: 'black',\n                }}\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n              >\n                <Modal\n                  grem={grem}\n                  toggleModal={this.toggleModal}\n                  gradient_string={gradient_string}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nimport { label_dict } from './Utils'\n\nlet image_num = 40\nlet images = [...Array(40)].map(n => null)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n}\n\nlet color_num = 10\nlet status_to_color = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\nlet total_dict = {\n  MNIST: 60000,\n  Quickdraw: 65729,\n  Caltech: 822,\n}\n\nclass Selected extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      labels: null,\n      prev_loaded: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { embeddings } = this.props\n\n    if (this.props.loaded_embedding !== prevProps.loaded_embedding) {\n      if (prevProps.loaded_embedding === null) {\n        // first real loaded set the state\n        this.setState({ prev_loaded: this.props.loaded_embedding })\n      } else {\n        // use the statuses from previous\n        let prev_embeddings = embeddings[prevProps.loaded_embedding]\n        let selected_indexes = []\n        for (let i = 0; i < prev_embeddings.statuses.length; i++) {\n          if (prev_embeddings.statuses[i] === 1) {\n            selected_indexes.push(i)\n          }\n        }\n        let loaded = embeddings[this.props.loaded_embedding]\n        let new_labels = selected_indexes.map((n, i) => loaded.labels[n])\n        this.setState({ labels: new_labels })\n      }\n    }\n    if (\n      this.props.transition_status === 0.5 &&\n      prevProps.transition_status !== 0\n    ) {\n      // need to make this run in between\n      let me = this\n      setTimeout(() => {\n        me.setState({\n          prev_loaded: this.props.loaded_embedding,\n          labels: null,\n        })\n      }, 0)\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      embeddings,\n      loaded_embedding,\n      transition_status,\n      header_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[this.state.prev_loaded]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let grid_columns = 3\n    let gutter = grem / 2\n    let side_padding = grem / 4\n    let image_width =\n      (width - side_padding * 2 * 2 - gutter * (grid_columns - 1)) /\n      grid_columns\n    let image_height = image_width\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    let selected_labels = null\n    if (loaded_embedding !== null) {\n      selected_labels = selected_indexes.map(\n        (n, i) => embeddings[loaded_embedding].labels[i]\n      )\n    }\n\n    let scale = image_width / sprite_image_size\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: header_height,\n          width: width,\n          height: height,\n          background: '#333',\n          overflow: 'hidden',\n        }}\n      >\n        {transition_status === 0 ? (\n          <div\n            style={{\n              padding: grem / 4,\n            }}\n          >\n            <div\n              style={{\n                padding: grem / 4,\n              }}\n            >\n              Use the select data button below to select data points based on\n              the strategy.\n            </div>\n          </div>\n        ) : null}\n        <div\n          style={{\n            opacity:\n              transition_status === 0 ||\n              transition_status === 2.6 ||\n              round_limit === adjusted_round\n                ? 0\n                : 1,\n            transition: 'opacity 0.4s linear',\n            transitionDelay: '0.1s',\n            padding: grem / 2,\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: width,\n              background: '#444',\n              padding: `${grem / 4}px ${grem / 2}px`,\n            }}\n          >\n            <div>{transition_status < 2 ? 'Selected' : 'Labeled'}:</div>\n            <div>1,000</div>\n          </div>\n          <div\n            style={{\n              right: 0,\n              top: header_height,\n              width: width,\n              height: height - grem / 2,\n              paddingTop: grem * 1,\n              background: '#333',\n              overflow: 'auto',\n            }}\n          >\n            <div\n              style={{\n                display: 'grid',\n                paddingTop: side_padding * 2,\n                paddingBottom: side_padding * 2,\n                gridTemplateColumns: `repeat(${grid_columns}, ${image_width}px)`,\n                gridColumnGap: gutter,\n                gridRowGap: gutter,\n              }}\n            >\n              {image_pickers.length > 0\n                ? image_pickers.map((p, i) => {\n                    let label =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? label_dict[dataset][this.state.labels[i]]\n                        : 'selected'\n                    let background =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? status_to_color[this.state.labels[i]]\n                        : '#ddd'\n                    return (\n                      <div\n                        key={p}\n                        style={{\n                          width: image_width,\n                          height: image_height + grem - 3,\n                          background: background,\n                          color: '#111',\n                          textAlign: 'center',\n                          transition: 'background 400ms linear',\n                          paddingLeft: 3,\n                          paddingTop: 3,\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                            backgroundSize: `${scale *\n                              sprite_actual_size}px ${scale *\n                              sprite_actual_size}px`,\n                            backgroundPosition: `-${p[1] *\n                              scale *\n                              sprite_image_size}px -${p[2] *\n                              scale *\n                              sprite_image_size}px`,\n                            width: image_width - 6,\n                            height: image_height - 6,\n                            imageRendering: 'pixelated',\n                          }}\n                        />\n                        <div\n                          style={{\n                            whiteSpace: 'nowrap',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                          }}\n                        >\n                          {label}\n                        </div>\n                      </div>\n                    )\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Selected\n","import React, { Component } from 'react'\nimport Projection from './Projection'\nimport Selected from './Selected'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection\n          width={width}\n          height={height}\n          grem={grem}\n          active_embedding={active_embedding}\n          strategies={strategies}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          embeddings={embeddings}\n          requested_embedding={requested_embedding}\n          loaded_embedding={loaded_embedding}\n          transition_status={transition_status}\n          setTransitionStatus={setTransitionStatus}\n          loading_round={loading_round}\n          footer_height={footer_height}\n          selectRound={this.props.selectRound}\n          round={round}\n          round_limit={round_limit}\n          dataset={dataset}\n          loadImages={this.props.loadImages}\n          images={this.props.images}\n          setKeyHeight={this.props.setKeyHeight}\n        />\n        {false ? (\n          <Selected\n            width={selected_width}\n            height={\n              height - this.props.footer_height - grem * 2 - header_height\n            }\n            grem={grem}\n            mnist_images={mnist_images}\n            embeddings={embeddings}\n            loaded_embedding={loaded_embedding}\n            ranges={ranges}\n            transition_status={transition_status}\n            header_height={header_height}\n            round={round}\n            round_limit={round_limit}\n            dataset={dataset}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nclass BigButton extends Component {\n  render() {\n    let {\n      transition_status,\n      grem,\n      round_limit,\n      round,\n      dataset,\n      strategy,\n    } = this.props\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Loading...'\n      next_state = null\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting points...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = `${\n        this.props.dataset === 'Caltech' ? '50' : '1,000'\n      } points selected from ${dataset} using ${strategy}`\n      if (adjusted_round === round_limit)\n        button_text = `Final round of ${dataset} using ${strategy}`\n      if (this.props.loading_embedding) button_text = 'Loading...'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling points...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Retraining model...'\n      next_state = null\n    } else if (transition_status === 2.3) {\n      button_text = 'Retraining model...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Selecting points...'\n      if (adjusted_round === round_limit)\n        button_text = `Final round of ${dataset} using ${strategy}`\n      next_state = null\n    }\n\n    let inactive = next_state === null || round_limit === adjusted_round\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          bottom:\n            this.props.key_height === null\n              ? grem + this.props.footer_height + grem * 1.5\n              : this.props.key_height + this.props.footer_height + grem * 1,\n          left: 0,\n          padding: `0 ${grem / 4}px`,\n          pointerEvents: 'none',\n        }}\n      >\n        <div style={{ display: 'flex', marginBottom: grem / 2 }}>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              position: 'relative',\n            }}\n          >\n            {button_text}\n          </div>\n        </div>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n            }}\n          >\n            <button\n              style={{\n                pointerEvents: 'auto',\n                color: inactive ? '#555' : 'white',\n                textDecoration: inactive ? 'none' : 'underline',\n                cursor: inactive ? 'default' : 'pointer',\n                pointerEvents: inactive ? 'none' : 'auto',\n              }}\n              onClick={() => {\n                if (next_state !== null && round_limit !== adjusted_round) {\n                  this.props.toggleList(true)\n                }\n              }}\n            >\n              View list\n            </button>\n          </div>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n            }}\n          >\n            <button\n              className={next_state === null ? 'gray-bg' : 'rainbow-animate'}\n              style={{\n                width: 120,\n                height: grem,\n                color: next_state === null ? '#222' : 'black',\n                textAlign: 'left',\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n                borderRadius: grem / 2,\n                textAlign: 'center',\n                pointerEvents: 'auto',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  if (round_limit === adjusted_round) {\n                    this.props.selectRound(0)\n                  } else {\n                    this.props.setTransitionStatus(next_state)\n                  }\n                }\n              }}\n            >\n              {round_limit !== adjusted_round ? 'Next round' : 'Restart'}\n            </button>\n          </div>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n            }}\n          >\n            <button\n              style={{\n                pointerEvents: 'auto',\n                color: inactive ? '#555' : 'white',\n                textDecoration: inactive ? 'none' : 'underline',\n                cursor: inactive ? 'default' : 'pointer',\n                pointerEvents: inactive ? 'none' : 'auto',\n              }}\n              onClick={() => {\n                if (next_state !== null && round_limit !== adjusted_round) {\n                  if (next_state !== null) {\n                    this.props.selectRound(round_limit)\n                  }\n                }\n              }}\n            >\n              Jump to end\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n            left: 0,\n            top: 0,\n            background: '#ddd',\n          }}\n        >\n          <div\n            style={{\n              height: '100%',\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '100%',\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\n\n// duplicate from projection\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nclass SelectedList extends Component {\n  render() {\n    let { grem, embeddings, loaded_embedding, dataset, ww, wh } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[loaded_embedding]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let { sprite_size, sprite_side, sprite_image_size } = sprite_spec_dict[\n      dataset\n    ]\n\n    let target_width = 80 + grem / 2\n    let columns = Math.floor((ww - grem) / target_width)\n    let image_width = (ww - grem - (columns - 1) * (grem / 2)) / columns\n    // let image_columns = Math.round(ww- grem/2) / (target_width + grem / 2))\n    // let image_width = Math.floor((ww - grem) / image_columns)\n    let scale = image_width / sprite_image_size\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    return (\n      <div style={{ background: '#888' }}>\n        <div\n          style={{\n            padding: grem / 2,\n            background: 'white',\n            color: 'black',\n            position: 'relative',\n          }}\n        >\n          Selected points\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleList(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ overflow: 'auto', height: wh - grem * 6 }}>\n          <div style={{ padding: grem / 2, paddingBottom: 0 }}>\n            {this.props.dataset === 'Caltech' ? '50' : '1,000'} points selected\n            for labeling from the {this.props.dataset} dataset using the{' '}\n            {this.props.strategy} strategy:\n          </div>\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateColumns: `repeat(auto-fill, ${image_width}px)`,\n              gridRowGap: grem / 2,\n              gridColumnGap: grem / 2,\n              padding: grem / 2,\n            }}\n          >\n            {image_pickers.length > 0\n              ? image_pickers.map((p, i) => {\n                  return (\n                    <div\n                      key={p}\n                      style={{ paddingBottom: '100%', position: 'relative' }}\n                    >\n                      <div\n                        style={{\n                          position: 'absolute',\n                          left: 0,\n                          top: 0,\n                          right: 0,\n                          bottom: 0,\n                          backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                          backgroundSize: `${scale *\n                            sprite_actual_size}px ${scale *\n                            sprite_actual_size}px`,\n                          backgroundPosition: `-${p[1] *\n                            scale *\n                            sprite_image_size}px -${p[2] *\n                            scale *\n                            sprite_image_size}px`,\n                          imageRendering: 'pixelated',\n                        }}\n                      />\n                    </div>\n                  )\n                })\n              : null}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectedList\n","import React, { Component } from 'react'\n\nclass Modal extends Component {\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{}}>\n        <div\n          style={{\n            padding: grem / 2,\n            color: 'black',\n            position: 'relative',\n            background: 'white',\n          }}\n        >\n          About Active Learner\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleModal(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ padding: grem / 2, background: '#ccc' }}>\n          <p style={{ fontStyle: 'italic' }}>\n            Active Learner is a research prototype by{' '}\n            <a href=\"http://fastforwardlabs.com\">Cloudera Fast Forward Labs</a>,{' '}\n            built to accompany our report on Learning with Limited Labeled Data.\n            For more about the report{' '}\n            <a href=\"https://blog.fastforwardlabs.com/2019/03/20/learning-with-limited-labeled-data.html\">\n              read our blog post\n            </a>\n            .\n          </p>\n          <p style={{ textIndent: grem }}>\n            Supervised machine learning, while powerful, needs labeled data to\n            be effective. Active learning{' '}\n            <span\n              style={{\n                color: 'black',\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            >\n              reduces the number of labeled examples needed to train a model\n            </span>\n            , saving time and money while obtaining comparable performance to\n            models trained with much more data.\n          </p>\n          <p style={{ textIndent: grem }}>\n            In Active Learner, we visualize the selections of{' '}\n            <span\n              style={{\n                background: '#111',\n                color: 'white',\n              }}\n            >\n              four different training strategies\n            </span>{' '}\n            on{' '}\n            <span\n              style={{\n                background: '#111',\n                color: 'white',\n              }}\n            >\n              three different datasets\n            </span>\n            . We use a dimensionality reduction technique called{' '}\n            <a href=\"https://umap-learn.readthedocs.io/en/latest/\">UMAP</a> to\n            visualize how the model is clustering the dataset.{' '}\n            <span\n              style={{\n                background: 'white',\n                color: 'black',\n              }}\n            >\n              We highlight the points that the strategy has selected to be\n              labeled in the next round.\n            </span>{' '}\n            Clicking on the{' '}\n            <span className=\"rainbow-animate\">Next&nbsp;round</span> button\n            retrieves the labels for those selections and retrains the model,\n            showing how the clusters shift.{' '}\n            <span style={{ background: '#666', color: '#fff' }}>\n              The graph at the bottom shows the changes in accuracy for\n              different rounds.\n            </span>{' '}\n            You can use the graph to compare the effectiveness of the different\n            strategies.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <button\n              style={{\n                color: 'black',\n              }}\n              onClick={() => {\n                this.props.toggleModal(false)\n              }}\n            >\n              Start exploring now\n            </button>{' '}\n            or learn more below.\n          </p>\n          <div\n            style={{\n              width: '100%',\n              height: 1,\n              background: `linear-gradient(to right, ${\n                this.props.gradient_string\n              })`,\n              marginTop: grem / 2 - 0.5,\n              marginBottom: grem / 2 - 0.5,\n              background: '#aaa',\n            }}\n          />\n          <p style={{ marginBottom: grem / 2, textIndent: grem }}>\n            Active learning strategies focus on points that the model is\n            especially uncertain about. You can see this focus in the\n            visualization when the{' '}\n            <span style={{ background: 'white' }}>\n              selected points are at the boundaries of clusters\n            </span>\n            . You can compare the different active learning strategies (\n            <span style={{ background: 'black', color: 'white' }}>Entropy</span>\n            ,{' '}\n            <span style={{ background: 'black', color: 'white' }}>\n              Adversarial\n            </span>\n            ,{' '}\n            <span style={{ background: 'black', color: 'white' }}>\n              Ensemble\n            </span>\n            ) with the{' '}\n            <span style={{ background: 'black', color: 'white' }}>Random</span>{' '}\n            strategy to get a feel for how active learning works.\n          </p>\n          <p>About the strategies</p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>Random</span>:{' '}\n            <span style={{ background: 'white' }}>\n              points are selected randomly\n            </span>\n            .\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>Entropy</span>\n            :{' '}\n            <span style={{ background: 'white' }}>\n              points with high entropy are selected\n            </span>\n            . The outcome of an uncertain event carries a higher entropy\n            compared to an event with no uncertainty.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>\n              Adversarial\n            </span>\n            :{' '}\n            <span style={{ background: 'white' }}>\n              points with small adversarial perturbation magnitudes are selected\n            </span>\n            . A perturbation causes a particular datapoint to be classified as a\n            different category.\n          </p>\n          <p style={{ textIndent: grem, marginBottom: grem / 2 }}>\n            <span style={{ background: 'black', color: 'white' }}>\n              Ensemble\n            </span>\n            :{' '}\n            <span style={{ background: 'white' }}>\n              points are selected using the averaged prediction probabilities\n              across an ensemble of models\n            </span>\n            .\n          </p>\n\n          <p>About the datasets</p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>MNIST</span>:\n            The <a href=\"http://yann.lecun.com/exdb/mnist/\">MNIST dataset</a>{' '}\n            consists of handwritten digits from 0 to 9. It has a training set of\n            60,000 examples, and a test set of 10,000 examples. We use 5,000\n            labels to start and add 1,000 more labels each round.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>\n              Quickdraw\n            </span>\n            : The{' '}\n            <a href=\"https://quickdraw.withgoogle.com/data\">\n              Quick Draw dataset\n            </a>{' '}\n            consists of 50 million hand-drawn figures across 345 categories. We\n            randomly selected 10 categories for which to build a classifier,\n            resulting in a training set of 65,729 examples and a test set of\n            16,436 examples. We use 5,000 labels to start and add 1,000 more\n            labels each round.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>Caltech</span>\n            : The{' '}\n            <a href=\"http://www.vision.caltech.edu/Image_Datasets/Caltech256/\">\n              Caltech 256 dataset\n            </a>{' '}\n            consists of 30,607 images from 256 categories. We randomly selected\n            10 categories for which to build a classifier, resulting in a\n            training set of 822 examples, and a test set of 212 examples. We use\n            300 labels to start and add 50 labels each round.\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Modal\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'adversarial', 'ensemble']\n\nlet mnist_strategy_url = [\n  'mnist_random_round',\n  'mnist_entropy_round',\n  'mnist_adv_round',\n  'mnist_ensemble_entropy_round',\n]\n\nlet quickdraw_strategy_url = [\n  'quickdraw_random_round',\n  'quickdraw_entropy_round',\n  'quickdraw_adv_round',\n  'quickdraw_ensemble_entropy_round',\n]\n\nlet caltech_strategy_url = [\n  'caltech_random_round',\n  'caltech_entropy_round',\n  'caltech_adv_round',\n  'caltech_ensemble_entropy_round',\n]\n\nlet strategy_dict = {\n  [datasets[0]]: mnist_strategy_url,\n  [datasets[1]]: quickdraw_strategy_url,\n  [datasets[2]]: caltech_strategy_url,\n}\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nlet tile_array = [\n  mnist_tile_locations,\n  quickdraw_tile_locations,\n  caltech_tile_locations,\n]\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[0],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: 0,\n      loading: false,\n      images: [null, null, null],\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n    this.loadImages = this.loadImages.bind(this)\n  }\n\n  selectRound(round) {\n    let strat_limit = Math.max(this.state.strategy_explored, round)\n    this.setState({ round: round, strategy_explored: strat_limit })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  loadImages(index) {\n    if (this.state.images[index] === null) {\n      let tile_locations = tile_array[index]\n      let images = tile_locations.map(src => {\n        let img = document.createElement('img')\n        img.src = src\n        return img\n      })\n      // make a copy\n      let new_images = this.state.images.slice()\n      new_images[index] = images\n      this.setState({ images: new_images })\n    }\n  }\n\n  selectDataset(index) {\n    this.setState({ dataset: datasets[index], strategy_explored: 0, round: 0 })\n    this.checkOrFetchData(datasets[index], this.state.strategy, 0)\n    this.loadImages(index)\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index] })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/${\n      strategy_dict[dataset][strategies.indexOf(strategy)]\n    }${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    return (\n      <Layout\n        {...this.state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n        loadImages={this.loadImages.bind(this)}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}