{"version":3,"sources":["Header.js","Utils.js","Canvas.js","Accuracy.js","mnist_strategies.js","quickdraw_strategies.js","Footer.js","Projection.js","Layout.js","Selected.js","ProjectionSelected.js","BigButton.js","Timer.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","_this2","_this$props","datasets","selectDataset","strategies","strategy","selectStrategy","strategy_colors","dataset","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","i","inner","active","onClick","key","color","reduce","p","c","Component","toPercent2","x","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","decodeS","string","splits","split","label_dict","MNIST","Quickdraw","Canvas","getCtx","refs","canvas","lineHeight","width","strategy_dict","num_labeled","random","accuracy","entropy","adversarial","ensemble","Accuracy","toConsumableArray","Array","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","transition_status","strategy_accuracy","results","point_size","all_strat_results","_","rounded_min","floor","space","clearRect","y_padding","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","stroke","non_active_strats","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","strat","value","these_results","cell_width","arc","PI","fill","err","return","_this$props2","adjusted_round","round_limit","label_round","src_Canvas","Fragment","cursor","border","borderLeft","justifyContent","parts","toString","replace","join","comma","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","bottom","src_Accuracy","getTextures","texturesSources","loader","THREE","textureSource","Promise","resolve","reject","load","texture","flipY","process","mnist_tile_locations","quickdraw_tile_locations","tile_dict","image_dict","src","img","document","ranges","start","sprite_side","end","sprite_number","push","color_num","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","length","embedding","Float32Array","Projection","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","showHover","hover_ctx","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","textures","repeat","addAttribute","uniforms","construct","size","material","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","transition_colors","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","start_colors","end_colors","color_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","delay","position_tween","chain","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","size_delay","me","size_tween","onComplete","setTransitionStatus","sel_position_tween","setTimeout","_this3","_loop2","attribute_indexes","loc_index","_this4","end_size","groups","_loop3","g","points","_this5","_this$props3","_loop4","_this6","all","then","prevd","d","remove","revealSelected","mouse_coords","digit_index","full_index","visible","hover_mount","hover_size","hover_pad","childNodes","status","adjusted_status","text_color","innerText","drawImage","mouse_position","_this$props4","_mouse_position","slicedToArray","mouseX","mouseY","mouse_vector","_ref","_ref2","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","_this7","view","renderer","domElement","on","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props5","aspect","setClearColor","setSize","mount","appendChild","point_group","selected_point_group","d3_zoom","scaleExtent","getScaleFromZ","far","zoomHandler","initial_scale","initial_transform","translate","handleMouse","requestAnimationFrame","sortObjects","render","removeChild","_this8","_this$props6","overflow","textAlign","marginLeft","hover_bord","imageRendering","paddingTop","whiteSpace","textOverflow","Selected","prev_loaded","setState","prev_embeddings","selected_indexes","new_labels","header_height","gutter","side_padding","image_width","image_height","image_pickers","right","opacity","transition","transitionDelay","paddingBottom","gridTemplateColumns","gridColumnGap","gridRowGap","paddingLeft","backgroundImage","backgroundSize","backgroundPosition","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","footer_height","src_Projection","src_Selected","BigButton","button_text","next_state","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","marginTop","min","total","curr","Layout","wh","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","_this$state","zIndex","src_ProjectionSelected","font_size","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","src_Timer","_strategy_dict","defineProperty","es","Data","scaleEmbeddings","fetchData","checkOrFetchData","strat_limit","xs","e","abs","ys","max_x","max_y","domain","url","indexOf","fetch","response","json","r","scaled","embedding_string","assign","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caa311e6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectStrategy(i)\n                      }}\n                    >\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet quickdraw_labels = [\n  'dolphin',\n  'cat',\n  'face',\n  'angel',\n  'airplane',\n  'apple',\n  'broccoli',\n  'crayon',\n  'bicycle',\n  'elephant',\n]\nexport let label_dict = { MNIST: labels, Quickdraw: quickdraw_labels }\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { mnist_strategies } from './mnist_strategies.js'\nimport { quickdraw_strategies } from './quickdraw_strategies.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet strategy_dict = { MNIST: mnist_strategies, Quickdraw: quickdraw_strategies }\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nlet point_size = 4\nlet y_padding = point_size * 2\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.strategy_explored !== prevProps.strategy_explored) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n      dataset,\n    } = this.props\n\n    let strategy_accuracy = strategy_dict[dataset]\n    let results = strategy_accuracy[strategy]\n\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 4\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    let x_padding = cell_width / 2\n\n    let all_strat_results = strategies.map(s =>\n      _.min(strategy_accuracy[s].accuracy)\n    )\n\n    let rounded_min = Math.floor(_.min(all_strat_results) * 10) / 10\n\n    let rounds_limit = strategy_explored\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    let non_active_strats = strategies.filter(s => s !== strategy)\n\n    for (let strat of non_active_strats) {\n      let these_results = strategy_accuracy[strat]\n\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#666'\n      ctx.fillStyle = '#666'\n      ctx.beginPath()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        drawLine(\n          ctx,\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          i === 0\n        )\n      }\n      ctx.stroke()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        ctx.beginPath()\n        ctx.arc(\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          point_size,\n          0,\n          2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n\n    point_size = 6\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let num_labeled = strategy_dict[dataset].num_labeled\n    let results = strategy_dict[dataset][strategy]\n\n    let label_round = round\n    let cell_width = 100\n    if (transition_status > 1) label_round = round + 1\n    return (\n      <div style={{}}>\n        <div style={{ display: 'inline-flex', pointerEvents: 'auto' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? (\n                <span>\n                  Round {round + 1} of {round_limit + 1}\n                </span>\n              ) : (\n                ' '\n              )}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {toPercent2(results.accuracy[round])}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => (\n              <div\n                key={'explored' + i}\n                onClick={() => {\n                  this.handleRound(i)\n                }}\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: cell_width * i,\n                  width: cell_width,\n                  height: height - grem * 2,\n                  cursor: i === round ? 'default' : 'pointer',\n                }}\n              />\n            ))}\n            <div\n              style={{\n                position: 'absolute',\n                top: y_padding,\n                left: cell_width * (strategy_explored + 1),\n                width: (round_limit - strategy_explored) * cell_width,\n                height: height - grem * 2 - y_padding * 2,\n                border: 'solid 2px rgba(100,100,100,0.2)',\n                borderLeft: 'none',\n                pointerEvents: 'none',\n              }}\n            />\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            pointerEvents: 'auto',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            100,000 points, {comma(num_labeled[label_round])} labelled (\n            {toPercent2(num_labeled[label_round] / 1000000)})\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","export let mnist_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.7685568264784619,\n      0.805609637381358,\n      0.8077999513263567,\n      0.8172913117546848,\n      0.8289729861280117,\n      0.8298856169384279,\n      0.8343270868824532,\n      0.8541615964954977,\n      0.8440009734728644,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7685568264784619,\n      0.805609637381358,\n      0.8077999513263567,\n      0.8172913117546848,\n      0.8289729861280117,\n      0.8298856169384279,\n      0.8343270868824532,\n      0.8541615964954977,\n      0.8440009734728644,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7685568264784619,\n      0.805609637381358,\n      0.8077999513263567,\n      0.8172913117546848,\n      0.8289729861280117,\n      0.8298856169384279,\n      0.8343270868824532,\n      0.8541615964954977,\n      0.8440009734728644,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7685568264784619,\n      0.805609637381358,\n      0.8077999513263567,\n      0.8172913117546848,\n      0.8289729861280117,\n      0.8298856169384279,\n      0.8343270868824532,\n      0.8541615964954977,\n      0.8440009734728644,\n    ],\n  },\n}\n","export let quickdraw_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.7685568264784619,\n      0.8011681674373327,\n      0.7949622779265028,\n      0.8040885860306644,\n      0.8141275249452421,\n      0.823192990995376,\n      0.8260525675346799,\n      0.831284984181066,\n      0.8297639328303723,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7685568264784619,\n      0.8283037235337065,\n      0.8426624482842541,\n      0.83603066439523,\n      0.8523971769286931,\n      0.8506935994159163,\n      0.8619493794110489,\n      0.8623752737892432,\n      0.8586639084935508,\n    ],\n  },\n}\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom: grem * 2,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          dataset={dataset}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n          round_limit={round_limit}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS, label_dict } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet hover_size = 28 * 3\nlet hover_pad = 4\nlet hover_bord = 0\n\nlet loader = new THREE.TextureLoader()\nlet circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\ncircle_texture.flipY = false\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n}\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet quickdraw_images = quickdraw_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet image_dict = {\n  MNIST: mnist_images,\n  Quickdraw: quickdraw_images,\n}\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\nlet color_num = 10\nlet color_array = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .gl()\n)\ncolor_array.push(\n  chroma\n    .hsl(0, 0, 0.5)\n    .luminance(0.1)\n    .gl()\n)\n// console.log(color_array)\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// let status_to_color = color_array.map(a => a.map(c => c / 255))\nlet status_to_color = color_array.map(a => a.slice(0, 3))\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n    this.showHover = this.showHover.bind(this)\n    this.hover_ctx = null\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    // let new_size = zoomScaler(z)\n    // let point_group = this.scene.children[0].children\n    // for (let c = 0; c < point_group.length; c++) {\n    //   point_group[c].material.uniforms.size.value = new_size\n    // }\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 30 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n\n      point_cloud.userData = { sprite_index: s }\n\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings, transition_colors) {\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      if (true || transition_colors) {\n        let start_colors = back_existing.geometry.attributes.color.array.slice()\n        let color_prep = slice.labels.map(label => {\n          let color = status_to_color[label]\n          return color\n        })\n        let color_flattened = _.flatten(color_prep)\n        let end_colors = new Float32Array(color_flattened)\n\n        let color_tween = new TWEEN.Tween(start_colors)\n          .to(end_colors, 400)\n          .easing(TWEEN.Easing.Linear.None)\n        color_tween.onUpdate(function() {\n          back_existing.geometry.attributes.color.array = start_colors\n          back_existing.geometry.attributes.color.needsUpdate = true\n        })\n        color_tween.delay(400)\n\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start().chain(color_tween)\n\n        // let combo_tween = new TWEEN.Tween(combo_start)\n        //   .to(combo_end, 800)\n        //   .easing(TWEEN.Easing.Linear.None)\n        // combo_tween.onUpdate(function() {\n        //   if (s === 0) {\n        //     console.log(combo_start.positions[0])\n        //   }\n        //   back_existing.geometry.attributes.color.array = combo_start.colors\n        //   back_existing.geometry.attributes.color.needsUpdate = true\n        //   back_existing.geometry.attributes.position.array =\n        //     combo_start.positions\n        //   back_existing.geometry.attributes.position.needsUpdate = true\n        // })\n        // combo_tween.start()\n      } else {\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start()\n      }\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size_delay = 1200\n      if (!transition_colors) size_delay = 400\n      let size = { value: 30 }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(size_delay)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0.5)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [0.85, 0.85, 0.85]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n    // this.scene.children[1].visible = false\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: 30 }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          me.props.setTransitionStatus(1)\n        }\n      })\n      size_tween.start()\n    }\n\n    // let opacity = { value: 0 }\n    // let end_opacity = { value: 1 }\n    // for (let g = 0; g < groups.length; g++) {\n    //   let points = groups[g]\n    //   points.material.uniforms.size = { value: 20 }\n    //   let opacity_tween = new TWEEN.Tween(opacity)\n    //     .to(end_opacity, 800)\n    //     .easing(TWEEN.Easing.Linear.None)\n    //   opacity_tween.onUpdate(function() {\n    //     console.log(opacity.value)\n    //     points.material.opacity = opacity.value\n    //   })\n    //   let me = this\n    //   opacity_tween.onComplete(function() {\n    //     if (g === 0) {\n    //       me.props.setTransitionStatus(1)\n    //     }\n    //   })\n    //   opacity_tween.start()\n    // }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    let loaded = embeddings[loaded_embedding]\n\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      let me = this\n      color_tween.onComplete(function() {\n        if (s === 0) {\n          setTimeout(function() {\n            me.props.setTransitionStatus(2.3)\n          }, 0)\n        }\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.loaded_embedding === null &&\n      this.props.loaded_embedding !== null\n    ) {\n      // first load\n      Promise.all(getTextures(tile_dict[this.props.dataset])).then(textures => {\n        this.textures = textures\n        this.addPoints()\n        this.addSelectedPoints()\n        this.props.setTransitionStatus(0.5)\n      })\n    } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      let prevd = decodeS(prevProps.loaded_embedding)\n      let d = decodeS(this.props.loaded_embedding)\n      if (prevd.dataset !== d.dataset) {\n        // different dataset\n        while (this.scene.children.length > 0) {\n          this.scene.remove(this.scene.children[0])\n        }\n        this.props.setTransitionStatus(0)\n        let me = this\n        setTimeout(() => {\n          Promise.all(getTextures(tile_dict[me.props.dataset])).then(\n            textures => {\n              me.textures = textures\n              me.addPoints()\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0.5)\n            }\n          )\n        }, 0)\n      } else if (prevd.strategy !== d.strategy) {\n        // new strategy, we should transition\n        // new strategy, who dis\n        // if (this.props.transition_status === 1) {\n        // this.labelSelected()\n        // }\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      } else if (\n        prevd.round !== d.round &&\n        this.props.transition_status !== 1.5\n      ) {\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      }\n    } else if (\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 0) ||\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 2.6)\n    ) {\n      this.revealSelected()\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.round !== prevProps.round) {\n    }\n  }\n\n  showHover(mouse_coords, sprite_index, digit_index, full_index) {\n    let loaded = this.props.embeddings[this.props.loaded_embedding]\n    this.scene.children[1].visible = true\n    this.hover_mount.style.display = 'block'\n    this.hover_mount.style.transform = `translate3d(${mouse_coords[0] -\n      hover_size / 2 -\n      hover_pad}px, ${mouse_coords[1] -\n      hover_size -\n      this.props.grem -\n      hover_pad * 4 -\n      14}px,0)`\n    this.hover_ctx = this.hover_mount.childNodes[0].getContext('2d')\n    let label = this.hover_mount.childNodes[1]\n    this.hover_ctx.fillRect(0, 0, hover_size, hover_size)\n\n    let status = loaded.statuses[full_index]\n\n    let adjusted_status = status_to_color.slice(0, status_to_color.length - 1)\n    adjusted_status.push([0.5, 0.5, 0.5])\n\n    let color = null\n    let text_color = 'black'\n    if (status === 1) {\n      color = '#eee'\n      text_color = 'black'\n    } else {\n      color =\n        'rgba(' +\n        adjusted_status[loaded.labels[full_index]]\n          .map(d => Math.round(d * 255))\n          .join(',') +\n        ',1)'\n    }\n    this.hover_mount.style.background = color\n    this.hover_mount.style.color = text_color\n\n    label.style.background = color\n    label.innerText =\n      status === 1\n        ? 'selected'\n        : [...label_dict[this.props.dataset], 'unlabeled'][\n            loaded.labels[full_index]\n          ]\n    this.hover_ctx.drawImage(\n      image_dict[this.props.dataset][sprite_index],\n      // source rectangle\n      (digit_index % sprite_side) * sprite_image_size,\n      Math.floor(digit_index / sprite_side) * sprite_image_size,\n      sprite_image_size,\n      sprite_image_size,\n      // destination rectangle\n      0,\n      0,\n      hover_size,\n      hover_size\n    )\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height } = this.props\n    let [mouseX, mouseY] = mouse_position\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    if (\n      this.scene.children[0] !== undefined &&\n      this.scene.children[0].children.length > 0\n    ) {\n      let intersects = this.raycaster.intersectObjects(\n        this.scene.children[0].children\n      )\n      if (intersects[0]) {\n        let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n        let intersect = sorted_intersects[0]\n        let sprite_index = intersect.object.userData.sprite_index\n        let digit_index = intersect.index\n        let full_index = sprite_index * sprite_size + digit_index\n        this.showHover([mouseX, mouseY], sprite_index, digit_index, full_index)\n        // this.props.setHoverIndex(full_index)\n        // this.highlightPoint(sprite_index, digit_index, full_index)\n      } else {\n        this.hover_mount.style.display = `none`\n      }\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node())\n      let mouse_position = [mouseX, mouseY]\n      this.checkIntersects(mouse_position)\n    })\n\n    view.on('mousedown', () => {\n      this.hover_mount.style.display = `none`\n    })\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n\n    this.handleMouse()\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem, dataset } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n          cursor: 'crosshair',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'auto',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: grem / 2,\n            pointerEvents: 'none',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'auto',\n            }}\n          >\n            <div style={{ padding: `0 ${grem / 4}px` }}>Key:</div>\n            <div\n              style={{\n                background: '#888',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n              }}\n            >\n              unlabeled\n            </div>\n            <div\n              style={{\n                background: '#fff',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n                marginLeft: grem / 4,\n              }}\n            >\n              selected\n            </div>\n          </div>\n\n          <div\n            style={{\n              padding: `0 ${grem / 4}px 0 ${grem * 0.75}px`,\n              display: 'flex',\n              flexWrap: 'auto',\n            }}\n          >\n            <div style={{ padding: `0 0 0 ${grem / 4}px` }}>Labels:</div>\n            {color_array_hexes.map((c, i) => (\n              <div\n                key={'color_' + i}\n                style={{\n                  background: color_array_hexes[i],\n                  height: grem,\n                  textAlign: 'center',\n                  color: '#111',\n                  padding: `0 ${grem / 4}px`,\n                  marginLeft: grem / 4,\n                }}\n              >\n                {label_dict[dataset][i]}\n              </div>\n            ))}\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            width: hover_size + hover_pad * 2 + hover_bord * 2,\n            pointerEvents: 'none',\n            padding: hover_pad,\n            display: 'none',\n            color: 'white',\n            height: grem + hover_size + hover_pad * 3 + hover_bord * 2,\n            lineHeight: 0,\n            border: `solid ${hover_bord}px rgba(0,0,0,0.3)`,\n          }}\n          ref={mount => {\n            this.hover_mount = mount\n          }}\n        >\n          <canvas\n            width={hover_size}\n            height={hover_size}\n            style={{ imageRendering: 'pixelated' }}\n          />\n          <div\n            style={{\n              width: hover_size,\n              height: grem,\n              textAlign: 'center',\n              lineHeight: 1.5,\n              paddingTop: hover_pad,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              padding: grem / 2,\n              zIndex: 999,\n              background: 'red',\n              display: 'none',\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                dataset={dataset}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                selectRound={this.props.selectRound}\n                mnist_images={mnist_images}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n                round_limit={round_limit}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n              round_limit={round_limit}\n              dataset={dataset}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <div\n                style={{\n                  width: Math.min(500, ww),\n                  background: '#666',\n                  padding: grem,\n                }}\n              >\n                <div>Getting labels for 1,000 selected points...</div>\n                <Timer\n                  grem={grem}\n                  gradient_string={gradient_string}\n                  ww={ww}\n                  labelsGotten={this.labelsGotten}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nimport { label_dict } from './Utils'\n\nlet image_num = 40\nlet images = [...Array(40)].map(n => null)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n}\n\nlet color_num = 10\nlet status_to_color = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\nclass Selected extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      labels: null,\n      prev_loaded: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { embeddings } = this.props\n\n    if (this.props.loaded_embedding !== prevProps.loaded_embedding) {\n      if (prevProps.loaded_embedding === null) {\n        // first real loaded set the state\n        this.setState({ prev_loaded: this.props.loaded_embedding })\n      } else {\n        // use the statuses from previous\n        let prev_embeddings = embeddings[prevProps.loaded_embedding]\n        let selected_indexes = []\n        for (let i = 0; i < prev_embeddings.statuses.length; i++) {\n          if (prev_embeddings.statuses[i] === 1) {\n            selected_indexes.push(i)\n          }\n        }\n        let loaded = embeddings[this.props.loaded_embedding]\n        let new_labels = selected_indexes.map((n, i) => loaded.labels[n])\n        this.setState({ labels: new_labels })\n      }\n    }\n    if (\n      this.props.transition_status === 0.5 &&\n      prevProps.transition_status !== 0\n    ) {\n      // need to make this run in between\n      let me = this\n      setTimeout(() => {\n        me.setState({\n          prev_loaded: this.props.loaded_embedding,\n          labels: null,\n        })\n      }, 0)\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      embeddings,\n      loaded_embedding,\n      transition_status,\n      header_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[this.state.prev_loaded]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let grid_columns = 3\n    let gutter = grem / 2\n    let side_padding = grem / 4\n    let image_width =\n      (width - side_padding * 2 * 2 - gutter * (grid_columns - 1)) /\n      grid_columns\n    let image_height = image_width\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    let selected_labels = null\n    if (loaded_embedding !== null) {\n      selected_labels = selected_indexes.map(\n        (n, i) => embeddings[loaded_embedding].labels[i]\n      )\n    }\n\n    let scale = image_width / sprite_image_size\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: header_height,\n          width: width,\n          height: height,\n          background: '#333',\n          overflow: 'hidden',\n        }}\n      >\n        {transition_status === 0 ? (\n          <div\n            style={{\n              padding: grem / 4,\n            }}\n          >\n            <div\n              style={{\n                padding: grem / 4,\n              }}\n            >\n              Use the select data button below to select data points based on\n              the strategy.\n            </div>\n          </div>\n        ) : null}\n        <div\n          style={{\n            opacity:\n              transition_status === 0 ||\n              transition_status === 2.6 ||\n              round_limit === adjusted_round\n                ? 0\n                : 1,\n            transition: 'opacity 0.4s linear',\n            transitionDelay: '0.1s',\n            padding: grem / 2,\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: width,\n              background: '#444',\n              padding: `${grem / 4}px ${grem / 2}px`,\n            }}\n          >\n            <div>{transition_status < 2 ? 'Selected' : 'Labeled'}:</div>\n            <div>1,000</div>\n          </div>\n          <div\n            style={{\n              right: 0,\n              top: header_height,\n              width: width,\n              height: height - grem / 2,\n              paddingTop: grem * 1,\n              background: '#333',\n              overflow: 'auto',\n            }}\n          >\n            <div\n              style={{\n                display: 'grid',\n                paddingTop: side_padding * 2,\n                paddingBottom: side_padding * 2,\n                gridTemplateColumns: `repeat(${grid_columns}, ${image_width}px)`,\n                gridColumnGap: gutter,\n                gridRowGap: gutter,\n              }}\n            >\n              {image_pickers.length > 0\n                ? image_pickers.map((p, i) => {\n                    let label =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? label_dict[dataset][this.state.labels[i]]\n                        : 'selected'\n                    let background =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? status_to_color[this.state.labels[i]]\n                        : '#ddd'\n                    return (\n                      <div\n                        key={p}\n                        style={{\n                          width: image_width,\n                          height: image_height + grem - 3,\n                          background: background,\n                          color: '#111',\n                          textAlign: 'center',\n                          transition: 'background 400ms linear',\n                          paddingLeft: 3,\n                          paddingTop: 3,\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                            backgroundSize: `${scale *\n                              sprite_actual_size}px ${scale *\n                              sprite_actual_size}px`,\n                            backgroundPosition: `-${p[1] *\n                              scale *\n                              sprite_image_size}px -${p[2] *\n                              scale *\n                              sprite_image_size}px`,\n                            width: image_width - 6,\n                            height: image_height - 6,\n                            imageRendering: 'pixelated',\n                          }}\n                        />\n                        <div\n                          style={{\n                            whiteSpace: 'nowrap',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                          }}\n                        >\n                          {label}\n                        </div>\n                      </div>\n                    )\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Selected\n","import React, { Component } from 'react'\nimport Projection from './Projection'\nimport Selected from './Selected'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection\n          width={width}\n          height={height}\n          grem={grem}\n          active_embedding={active_embedding}\n          strategies={strategies}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          embeddings={embeddings}\n          requested_embedding={requested_embedding}\n          loaded_embedding={loaded_embedding}\n          transition_status={transition_status}\n          setTransitionStatus={setTransitionStatus}\n          loading_round={loading_round}\n          footer_height={footer_height}\n          selectRound={this.props.selectRound}\n          round={round}\n          dataset={dataset}\n        />\n        {true ? (\n          <Selected\n            width={selected_width}\n            height={\n              height - this.props.footer_height - grem * 2 - header_height\n            }\n            grem={grem}\n            mnist_images={mnist_images}\n            embeddings={embeddings}\n            loaded_embedding={loaded_embedding}\n            ranges={ranges}\n            transition_status={transition_status}\n            header_height={header_height}\n            round={round}\n            round_limit={round_limit}\n            dataset={dataset}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nclass BigButton extends Component {\n  render() {\n    let { transition_status, grem, round_limit, round } = this.props\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Loading...'\n      next_state = null\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = 'Label & train'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.3) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Deselecting...'\n      next_state = null\n    }\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          background: '#111',\n          position: 'absolute',\n          bottom: this.props.footer_height,\n          right: 0,\n        }}\n      >\n        <div>\n          {round_limit !== adjusted_round ? (\n            <button\n              style={{\n                width: 200,\n                height: 2 * grem,\n                background: next_state === null ? '#eee' : 'white',\n                color: 'black',\n                textAlign: 'left',\n                paddingLeft: grem / 2,\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  this.props.setTransitionStatus(next_state)\n                }\n              }}\n            >\n              {button_text}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            height: grem,\n            width: `${100}%`,\n            marginTop: grem / 2,\n            background: '#222',\n          }}\n        >\n          <div\n            style={{\n              height: grem,\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: grem,\n                width: Math.min(500, ww) - grem * 2,\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'adversarial', 'ensemble']\n\nlet mnist_strategy_url = [\n  'mnist_random_round',\n  'mnist_entropy_round',\n  'mnist_adv_round',\n  'mnist_ensemble_entropy_round',\n]\n\nlet quickdraw_strategy_url = [\n  'quickdraw_random_round',\n  'quickdraw_entropy_round',\n  'quickdraw_adv_round',\n  'quickdraw_ensemble_entropy_round',\n]\n\nlet strategy_dict = {\n  [datasets[0]]: mnist_strategy_url,\n  [datasets[1]]: quickdraw_strategy_url,\n}\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[1],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: 0,\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n  }\n\n  selectRound(round) {\n    let strat_limit = Math.max(this.state.strategy_explored, round)\n    this.setState({ round: round, strategy_explored: strat_limit })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  selectDataset(index) {\n    this.setState({ dataset: datasets[index], strategy_explored: 0, round: 0 })\n    this.checkOrFetchData(\n      datasets[index],\n      this.state.strategy,\n      this.state.round\n    )\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index] })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/${\n      strategy_dict[dataset][strategies.indexOf(strategy)]\n    }${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    return (\n      <Layout\n        {...this.state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}