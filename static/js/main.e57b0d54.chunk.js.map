{"version":3,"sources":["Header.js","Utils.js","mnist_strategies.js","quickdraw_strategies.js","caltech_strategies.js","Canvas.js","Accuracy.js","Footer.js","Projection.js","Layout.js","ProjectionSelected.js","BigButton.js","Timer.js","SelectedList.js","Modal.js","End.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","i","selectStrategy","setTransitionStatus","_this2","_this$props","datasets","selectDataset","strategies","strategy","dataset","strategy_colors","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","inner","active","onClick","key","color","reduce","p","c","handleStrategy","toggleModal","Component","comma","x","parts","toString","split","replace","join","toPercent2","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","decodeS","string","splits","label_dict","MNIST","Quickdraw","Caltech","mnist_strategies","num_labeled","random","accuracy","entropy","adversarial","ensemble","quickdraw_strategies","caltech_strategies","Canvas","getCtx","refs","canvas","lineHeight","width","strategy_dict","total_dict","Accuracy","toConsumableArray","Array","show_tip","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","setState","transition_status","strategy_accuracy","results","point_size","cell_width","x_padding","min","all_strat_results","_","rounded_min","floor","space","clearRect","y_padding","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","stroke","non_active_strats","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","strat","value","these_results","arc","PI","fill","err","return","_this$props2","adjusted_round","round_limit","label_round","toFixed","sign","src_Canvas","Fragment","race","j","diff","reverse","centerer","offset","right","onMouseEnter","handleEnter","onMouseLeave","handleLeave","cursor","bottom","whiteSpace","fontSize","marginBottom","o","textTransform","marginRight","textAlign","flexGrow","defineProperty","border","borderLeft","justifyContent","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","key_height","src_Accuracy","getTextures","texturesSources","loader","THREE","textureSource","Promise","resolve","reject","load","texture","flipY","sprite_spec_mnist","sprite_side","sprite_size","sprite_number","sprite_image_size","sprite_spec_quickdraw","assign","sprite_spec_caltech","sprite_spec_dict","point_size_dict","mnist_tile_locations","process","quickdraw_tile_locations","tile_dict","getRanges","ranges","spec","start","end","push","getColorStuff","color_num","length","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","embedding","Float32Array","Projection","initialized","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","showHover","hover_ctx","resetCamera","prev_d3_x","prev_d3_y","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","getScaleFromZ","dx","dy","hover_transform","hover_mount","hover_x","parseInt","hover_y","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","_sprite_spec_dict$thi","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","texture_subsize","textures","repeat","addAttribute","uniforms","construct","size","fragment_shader","material","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","transition_colors","_this3","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","start_colors","end_colors","color_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","delay","position_tween","chain","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","size_delay","me","size_tween","onComplete","sel_position_tween","setTimeout","_this4","_sprite_spec_dict$thi2","_loop2","attribute_indexes","loc_index","_this5","end_size","groups","_loop3","g","points","_this6","_this$props3","_loop4","_this7","all","then","indexOf","loadImages","setKeyHeight","catch","console","log","message","prevd","d","_getColorStuff","remove","revealSelected","toggleEnd","_this$props4","aspect","updateProjectionMatrix","renderer","setSize","current_scale","d3_x","d3_y","resize_transform","translate","view","mount","d3_zoom","mouse_coords","digit_index","full_index","images","image_dict","y_adjust","hover_pad","hover_size","childNodes","imageSmoothingEnabled","status","adjusted_status","text_color","_sprite_spec_dict$thi3","innerText","drawImage","mouse_position","_this$props5","_mouse_position","slicedToArray","mouseX","mouseY","mouse_vector","_ref","_ref2","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","_this8","domElement","on","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props6","_getColorStuff2","setClearColor","appendChild","point_group","selected_point_group","scaleExtent","far","zoomHandler","initial_scale","initial_transform","handleMouse","_this$props7","requestAnimationFrame","sortObjects","render","removeChild","_this9","_this$props8","overflow","hover_bord","imageRendering","paddingTop","textOverflow","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","header_height","footer_height","src_Projection","BigButton","button_text","next_state","loading_embedding","inactive","toggleList","className","borderRadius","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","SelectedList","wh","selected_indexes","_sprite_spec_dict$dat","target_width","columns","image_width","image_pickers","sprite_num","paddingBottom","gridTemplateColumns","gridRowGap","gridColumnGap","backgroundImage","backgroundSize","backgroundPosition","Modal","fontStyle","href","textIndent","marginTop","End","sortBy","total","curr","Layout","show_list","show_modal","show_end","debounce","new_value","checkStandings","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","_React$createElement","_this$state","zIndex","src_ProjectionSelected","font_size","standings_seen","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","src_Timer","e","stopPropagation","src_SelectedList","maxWidth","src_Modal","src_End","_strategy_dict","es","caltech_tile_locations","tile_array","Data","loading","scaleEmbeddings","fetchData","checkOrFetchData","dataset_index","new_exploreds","strat_limit","src","img","document","new_images","xs","abs","ys","max_x","max_y","domain","url","fetch","response","json","r","scaled","embedding_string","altered_state","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAEMA,EAAa,SAAAC,GACjB,MAAiB,kBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,IAyK9BC,cArKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GACbP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAHAA,2EAOjB,IAAIW,EAASR,KAAKS,WAAWC,aAC7BV,KAAKJ,MAAMe,gBAAgBH,+CAI3BR,KAAKK,mDAGQO,GACbZ,KAAKJ,MAAMiB,eAAeD,GAC1BZ,KAAKJ,MAAMkB,oBAAoB,oCAGxB,IAAAC,EAAAf,KAAAgB,EAWHhB,KAAKJ,MATPqB,EAFKD,EAELC,SACAC,EAHKF,EAGLE,cACAC,EAJKH,EAILG,WACAC,EALKJ,EAKLI,SAGAC,GARKL,EAMLM,gBANKN,EAOLH,eAPKG,EAQLK,SAEAE,GAVKP,EASLQ,YATKR,EAULO,MAMF,OACEE,EAAAC,EAAAC,cAAA,OACEC,IAAK,SAAAnB,GACHM,EAAKN,WAAaA,GAEpBoB,MAAO,CACLC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,QAAS,OACTC,SAAU,SAGZT,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAlBS,cAmBTF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,SAAAc,OAAuBd,EAAO,EAA9B,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLO,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPgB,WAAY,SAHhB,mBASFd,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WApCS,cAqCTF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,YACCN,EACEuB,IAAI,SAACC,EAAG7B,GACP,IACI8B,EADAC,EAASF,IAAMpB,EAanB,OAVKqB,EADLC,EACalB,EAAAC,EAAAC,cAAA,YAAOc,GAEdhB,EAAAC,EAAAC,cAAA,UACEiB,QAAS,WACP1B,EAAcN,KAGf6B,GAIPhB,EAAAC,EAAAC,cAAA,QACEkB,IAAKJ,EACLZ,MAAO,CACLO,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPY,WAAYQ,EAAS,QAAU,cAC/BG,MAAOH,EAAS,QAAU,UAG3BD,KAINK,OAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAG,IAAKC,MAE/BxB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WA5ES,cA6ETF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,aACCJ,EACEqB,IAAI,SAACC,EAAG7B,GACP,IACI8B,EADAC,EAASF,IAAMrB,EASnB,OANKsB,EADLC,EACalB,EAAAC,EAAAC,cAAA,YAAOrC,EAAWmD,IAEzBhB,EAAAC,EAAAC,cAAA,UAAQiB,QAAS7B,EAAKmC,eAAe5C,KAAKS,EAAMH,IAC7CtB,EAAWmD,IAIlBhB,EAAAC,EAAAC,cAAA,QACEkB,IAAKJ,EACLZ,MAAO,CACLO,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPY,WAAYQ,EAAS,QAAU,cAC/BG,MAAOH,EAAS,QAAU,UAG3BD,KAINK,OAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAG,IAAKC,MAE/BxB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAhHS,cAiHTF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,UACEiB,QAAS,WACP7B,EAAKnB,MAAMuD,aAAY,KAF3B,mBAzJWC,aCPd,SAASC,EAAMC,GAEpB,IAAIC,EAAQD,EAAEE,WAAWC,MAAM,KAE/B,OADAF,EAAM,GAAKA,EAAM,GAAGG,QAAQ,wBAAyB,KAC9CH,EAAMI,KAAK,KAMb,SAASC,EAAWN,GACzB,OAAOO,KAAKC,MAAU,IAAJR,GAAa,IAAM,IAGhC,SAASS,EAASC,EAAKV,EAAGW,EAAGC,GAC9BA,EACFF,EAAIG,OAAOb,EAAGW,GAEdD,EAAII,OAAOd,EAAGW,GAQX,SAASzC,EAAYsB,GAM1B,MALY,CACVX,WAAYW,EACZuB,UAAS,eAAAhC,OAAiBS,EAAjB,iBAAAT,OAAsCS,GAC/CwB,eAAgB,QAKb,SAASC,EAAQC,GACtB,IAAIC,EAASD,EAAOf,MAAM,KAC1B,MAAO,CACLpC,QAASoD,EAAO,GAChBrD,SAAUqD,EAAO,GACjBX,MAAOW,EAAO,IAIlB,IAyBWC,EAAa,CACtBC,MA1BW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA2BvCC,UA1BqB,CACrB,UACA,MACA,OACA,QACA,WACA,QACA,WACA,SACA,UACA,YAiBAC,QAfmB,CACnB,OACA,UACA,WACA,qBACA,WACA,UACA,SACA,aACA,kBACA,cCnESC,EAAmB,CAC5BC,YAAa,CACX,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEFC,OAAQ,CACNC,SAAU,CACR,KACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,QAGJC,QAAS,CACPD,SAAU,CACR,KACA,MACA,MACA,IACA,MACA,MACA,MACA,MACA,QAGJE,YAAa,CACXF,SAAU,CACR,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QAGJG,SAAU,CACRH,SAAU,CACR,KACA,MACA,KACA,MACA,MACA,KACA,MACA,MACA,SC7DKI,EAAuB,CAChCN,YAAa,CACX,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MAEFC,OAAQ,CACNC,SAAU,CACR,kBACA,kBACA,kBACA,kBACA,kBACA,iBACA,kBACA,iBACA,oBAGJC,QAAS,CACPD,SAAU,CACR,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,oBAGJE,YAAa,CACXF,SAAU,CACR,kBACA,iBACA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","file":"static/js/main.e57b0d54.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  handleStrategy(i) {\n    this.props.selectStrategy(i)\n    this.props.setTransitionStatus(0)\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px 0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button onClick={this.handleStrategy.bind(this, i)}>\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 2}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <button\n            onClick={() => {\n              this.props.toggleModal(true)\n            }}\n          >\n            ? Info\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet quickdraw_labels = [\n  'dolphin',\n  'cat',\n  'face',\n  'angel',\n  'airplane',\n  'apple',\n  'broccoli',\n  'crayon',\n  'bicycle',\n  'elephant',\n]\nlet caltech_labels = [\n  'cake',\n  'dolphin',\n  'elephant',\n  'golden gate bridge',\n  'goldfish',\n  'rainbow',\n  'teapot',\n  'teddy bear',\n  'washing machine',\n  'waterfall',\n]\nexport let label_dict = {\n  MNIST: labels,\n  Quickdraw: quickdraw_labels,\n  Caltech: caltech_labels,\n}\n","export let mnist_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.923,\n      0.9468,\n      0.9379,\n      0.9551,\n      0.9558,\n      0.955,\n      0.958,\n      0.9664,\n      0.9635,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.923,\n      0.9485,\n      0.9589,\n      0.96,\n      0.9744,\n      0.9702,\n      0.9774,\n      0.9764,\n      0.9782,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.923,\n      0.9534,\n      0.9558,\n      0.9691,\n      0.9743,\n      0.9716,\n      0.9775,\n      0.9801,\n      0.9795,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.923,\n      0.9554,\n      0.967,\n      0.9731,\n      0.9748,\n      0.979,\n      0.9812,\n      0.9848,\n      0.9829,\n    ],\n  },\n}\n","export let quickdraw_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.7685568264784619,\n      0.8011681674373327,\n      0.7949622779265028,\n      0.8040885860306644,\n      0.8141275249452421,\n      0.823192990995376,\n      0.8260525675346799,\n      0.831284984181066,\n      0.8297639328303723,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7685568264784619,\n      0.805609637381358,\n      0.8077999513263567,\n      0.8172913117546848,\n      0.8289729861280117,\n      0.8298856169384279,\n      0.8343270868824532,\n      0.8541615964954977,\n      0.8440009734728644,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7685568264784619,\n      0.8283037235337065,\n      0.8426624482842541,\n      0.83603066439523,\n      0.8523971769286931,\n      0.8506935994159163,\n      0.8619493794110489,\n      0.8623752737892432,\n      0.8586639084935508,\n    ],\n  },\n}\n","export let caltech_strategies = {\n  num_labeled: [300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0],\n  random: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8490566037735849,\n      0.8726415094339622,\n      0.8915094339622641,\n      0.8584905660377359,\n      0.910377358490566,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7547169811320755,\n      0.8349056603773585,\n      0.8066037735849056,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8773584905660378,\n      0.8773584905660378,\n      0.9056603773584906,\n      0.8726415094339622,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8537735849056604,\n      0.8867924528301887,\n      0.8679245283018868,\n      0.8726415094339622,\n      0.8773584905660378,\n      0.8584905660377359,\n      0.9056603773584906,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7547169811320755,\n      0.9339622641509434,\n      0.9339622641509434,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9481132075471698,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9245283018867925,\n    ],\n  },\n}\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { mnist_strategies } from './mnist_strategies.js'\nimport { quickdraw_strategies } from './quickdraw_strategies.js'\nimport { caltech_strategies } from './caltech_strategies.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet strategy_dict = {\n  MNIST: mnist_strategies,\n  Quickdraw: quickdraw_strategies,\n  Caltech: caltech_strategies,\n}\n\nlet total_dict = {\n  MNIST: 60000,\n  Quickdraw: 65729,\n  Caltech: 822,\n}\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nlet point_size = 4\nlet y_padding = point_size * 2\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      show_tip: null,\n    }\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.strategy_explored !== prevProps.strategy_explored ||\n      (this.props.width < 800 && this.props.width !== prevProps.width) ||\n      (this.props.width > 800 && prevProps.width < 800)\n    ) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  handleEnter(i) {\n    this.setState({ show_tip: i })\n  }\n\n  handleLeave() {\n    this.setState({ show_tip: null })\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n      dataset,\n    } = this.props\n\n    let strategy_accuracy = strategy_dict[dataset]\n    let results = strategy_accuracy[strategy]\n\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 4\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    cell_width = Math.min(width / cell_num, cell_width)\n    let x_padding = cell_width / 2\n\n    let all_strat_results = strategies.map(s =>\n      _.min(strategy_accuracy[s].accuracy)\n    )\n\n    let rounded_min = Math.floor(_.min(all_strat_results) * 10) / 10\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    let non_active_strats = strategies.filter(s => s !== strategy)\n\n    for (let strat of non_active_strats) {\n      let these_results = strategy_accuracy[strat]\n\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#666'\n      ctx.fillStyle = '#666'\n      ctx.beginPath()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        drawLine(\n          ctx,\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          i === 0\n        )\n      }\n      ctx.stroke()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        ctx.beginPath()\n        ctx.arc(\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          point_size,\n          0,\n          2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n\n    point_size = 6\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n    let { show_tip } = this.state\n\n    let num_labeled = strategy_dict[dataset].num_labeled\n    let results = strategy_dict[dataset][strategy]\n\n    let label_round = round\n    let cell_width = 100\n    let cell_num = 8\n    cell_width = Math.min(width / cell_num, cell_width)\n    if (transition_status > 1) label_round = round + 1\n\n    label_round = round\n\n    let strategy_accuracy = strategy_dict[dataset]\n\n    return (\n      <div style={{ pointerEvents: 'none' }}>\n        <div style={{ display: 'inline-flex' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? (\n                <span>\n                  Round {round + 1} of {round_limit + 1}\n                </span>\n              ) : (\n                ' '\n              )}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {(results.accuracy[round] * 100).toFixed(2)}% (\n              {Math.sign(results.accuracy[round] - results.accuracy[0]) === 1\n                ? '+'\n                : ''}\n              {toPercent2(results.accuracy[round] - results.accuracy[0])})\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px`, display: 'none' }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {`Relative Error Reduction: ${(\n                (1 -\n                  (1 - results.accuracy[round]) / (1 - results.accuracy[0])) *\n                100\n              ).toFixed(2)}`}\n              %\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => {\n              let race = strategies.map((s, j) => {\n                return {\n                  string: `${s}: ${toPercent2(\n                    strategy_accuracy[s].accuracy[i]\n                  )}`,\n                  strategy: s,\n                  value: strategy_accuracy[s].accuracy[i],\n                  diff:\n                    strategy_accuracy[s].accuracy[i] -\n                    strategy_accuracy[s].accuracy[0],\n                }\n              })\n              race = _.sortBy(race, 'value').reverse()\n\n              let centerer = (cell_width - 274) / 2\n              let offset = cell_width * i\n              let left = centerer\n              let right = 'auto'\n              if (offset + centerer < 0) left = -offset\n              if (offset + centerer + 274 > width) {\n                left = 'auto'\n                right = -(7 - i) * cell_width\n              }\n\n              return (\n                <div\n                  key={'explored' + i}\n                  onMouseEnter={this.handleEnter.bind(this, i)}\n                  onMouseLeave={this.handleLeave.bind(this)}\n                  onClick={() => {\n                    this.handleRound(i)\n                  }}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: cell_width * i,\n                    width: cell_width,\n                    height: height - grem * 2,\n                    cursor: i === round ? 'default' : 'pointer',\n                  }}\n                >\n                  {show_tip === i ? (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: left,\n                        right: right,\n                        width: 274,\n                        bottom: height - grem * 2,\n                        background: '#333',\n                        padding: `${grem / 2}px ${grem / 2}px`,\n                        whiteSpace: 'nowrap',\n                        pointerEvents: 'none',\n                        fontSize: (grem / 1.5) * 1,\n                      }}\n                    >\n                      <div style={{ color: '#fff', marginBottom: grem / 4 }}>\n                        Round {i + 1}\n                      </div>\n                      {race.map((o, i) => (\n                        <div\n                          key={o.strategy}\n                          style={{\n                            textTransform: 'capitalize',\n                            color: strategy === o.strategy ? '#fff' : '#aaa',\n                            display: 'flex',\n                            marginBottom: grem / 8,\n                          }}\n                        >\n                          <div style={{ marginRight: grem / 4 }}>\n                            {i + 1}. {o.strategy}:\n                          </div>\n                          <div style={{ textAlign: 'right', flexGrow: 1 }}>\n                            {(o.value * 100).toFixed(2)}% (\n                            {Math.sign(o.diff) === 1 ? '+' : ''}\n                            {(o.diff * 100).toFixed(2)}%)\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : null}\n                </div>\n              )\n            })}\n            <div\n              style={{\n                position: 'absolute',\n                top: y_padding,\n                left: cell_width * (strategy_explored + 1),\n                width: (round_limit - strategy_explored) * cell_width,\n                height: height - grem * 2 - y_padding * 2,\n                border: 'solid 2px rgba(100,100,100,0.2)',\n                pointerEvents: 'auto',\n                borderLeft: 'none',\n                pointerEvents: 'none',\n              }}\n            />\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            {comma(total_dict[this.props.dataset])} points,{' '}\n            {comma(num_labeled[label_round])} labeled (\n            {toPercent2(\n              num_labeled[label_round] / total_dict[this.props.dataset]\n            )}\n            )\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      // adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom:\n            this.props.key_height !== null\n              ? this.props.key_height + grem / 2\n              : grem * 2,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          dataset={dataset}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n          round_limit={round_limit}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS, label_dict } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\nlet color_duration = 500\nlet size_duration = 500\nlet position_duration = 1000\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\n// let sprite_side = 73\n// let sprite_size = sprite_side * sprite_side\n// let sprite_number = 12\n// let sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet point_size_dict = {\n  MNIST: 30,\n  Quickdraw: 30,\n  Caltech: 30,\n}\n\nlet hover_size = 28 * 3\nlet hover_pad = 4\nlet hover_bord = 0\n\nlet loader = new THREE.TextureLoader()\n// let circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\n// circle_texture.flipY = false\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let quickdraw_images = quickdraw_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let caltech_images = caltech_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let image_dict = {\n//   MNIST: mnist_images,\n//   Quickdraw: quickdraw_images,\n//   Caltech: caltech_images,\n// }\n\nfunction getRanges(dataset) {\n  let ranges = []\n  let spec = sprite_spec_dict[dataset]\n  let { sprite_number, sprite_size } = spec\n  for (let i = 0; i < sprite_number; i++) {\n    let start = i * sprite_size\n    let end = (i + 1) * sprite_size\n    if (i === sprite_number - 1) end = sprite_number * sprite_size\n    ranges.push([start, end])\n  }\n  return ranges\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\n\nfunction getColorStuff(dataset) {\n  let color_num = label_dict[dataset].length\n  let color_array = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .gl()\n  )\n  color_array.push(\n    chroma\n      .hsl(0, 0, 0.5)\n      .luminance(0.1)\n      .gl()\n  )\n\n  let color_array_hexes = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .hex()\n  )\n\n  let status_to_color = color_array.map(a => a.slice(0, 3))\n\n  return { color_array, color_array_hexes, status_to_color }\n}\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      color_array: null,\n      color_array_hexes: null,\n      status_to_color: null,\n      initialized: false,\n    }\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n    this.showHover = this.showHover.bind(this)\n    this.hover_ctx = null\n    this.resetCamera = this.resetCamera.bind(this)\n    this.prev_d3_x = null\n    this.prev_d3_y = null\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    if (d3.event.transform.k === this.getScaleFromZ(this.camera.position.z)) {\n      if (this.prev_d3_x !== null) {\n        let dx = d3_transform.x - this.prev_d3_x\n        let dy = d3_transform.y - this.prev_d3_y\n        let hover_transform = this.hover_mount.style.transform.split(',')\n        let hover_x = parseInt(hover_transform[0].split('(')[1])\n        let hover_y = parseInt(hover_transform[1])\n        this.hover_mount.style.transform = `translate3d(${hover_x +\n          dx}px, ${hover_y + dy}px, 0)`\n      }\n    }\n\n    this.prev_d3_x = d3_transform.x\n    this.prev_d3_y = d3_transform.y\n\n    this.camera.position.set(x, y, z)\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return this.state.status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: point_size_dict[this.props.dataset] },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n\n      point_cloud.userData = { sprite_index: s }\n\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings, transition_colors) {\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      if (true || transition_colors) {\n        let start_colors = back_existing.geometry.attributes.color.array.slice()\n        let color_prep = slice.labels.map(label => {\n          let color = this.state.status_to_color[label]\n          return color\n        })\n        let color_flattened = _.flatten(color_prep)\n        let end_colors = new Float32Array(color_flattened)\n\n        let color_tween = new TWEEN.Tween(start_colors)\n          .to(end_colors, color_duration)\n          .easing(TWEEN.Easing.Linear.None)\n        color_tween.onUpdate(function() {\n          back_existing.geometry.attributes.color.array = start_colors\n          back_existing.geometry.attributes.color.needsUpdate = true\n        })\n        color_tween.delay(color_duration)\n\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, position_duration)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start().chain(color_tween)\n\n        // let combo_tween = new TWEEN.Tween(combo_start)\n        //   .to(combo_end, 800)\n        //   .easing(TWEEN.Easing.Linear.None)\n        // combo_tween.onUpdate(function() {\n        //   if (s === 0) {\n        //     console.log(combo_start.positions[0])\n        //   }\n        //   back_existing.geometry.attributes.color.array = combo_start.colors\n        //   back_existing.geometry.attributes.color.needsUpdate = true\n        //   back_existing.geometry.attributes.position.array =\n        //     combo_start.positions\n        //   back_existing.geometry.attributes.position.needsUpdate = true\n        // })\n        // combo_tween.start()\n      } else {\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start()\n      }\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size_delay = 1200\n      if (!transition_colors) size_delay = 400\n      let size = { value: point_size_dict[this.props.dataset] }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, size_duration)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(size_delay)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0.5)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, position_duration)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(2.6)\n              me.props.setTransitionStatus(0.5)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // me.addSelectedPoints()\n        // me.props.setTransitionStatus(0.5)\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [0.85, 0.85, 0.85]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n    // this.scene.children[1].visible = false\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: point_size_dict[this.props.dataset] }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, size_duration)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          setTimeout(() => {\n            me.props.setTransitionStatus(1)\n          }, 200)\n        }\n      })\n      size_tween.start()\n    }\n\n    // let opacity = { value: 0 }\n    // let end_opacity = { value: 1 }\n    // for (let g = 0; g < groups.length; g++) {\n    //   let points = groups[g]\n    //   points.material.uniforms.size = { value: 20 }\n    //   let opacity_tween = new TWEEN.Tween(opacity)\n    //     .to(end_opacity, 800)\n    //     .easing(TWEEN.Easing.Linear.None)\n    //   opacity_tween.onUpdate(function() {\n    //     console.log(opacity.value)\n    //     points.material.opacity = opacity.value\n    //   })\n    //   let me = this\n    //   opacity_tween.onComplete(function() {\n    //     if (g === 0) {\n    //       me.props.setTransitionStatus(1)\n    //     }\n    //   })\n    //   opacity_tween.start()\n    // }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = this.state.status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      let me = this\n      color_tween.onComplete(function() {\n        if (s === 0) {\n          setTimeout(function() {\n            me.props.setTransitionStatus(2.3)\n          }, 0)\n        }\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.loaded_embedding !== null &&\n      this.state.initialized === false\n    ) {\n      this.setState({ initialized: true })\n      // first load\n      Promise.all(getTextures(tile_dict[this.props.dataset]))\n        .then(textures => {\n          this.textures = textures\n          this.addPoints()\n          this.addSelectedPoints()\n          this.props.setTransitionStatus(0.5)\n          let datasets = ['MNIST', 'Quickdraw', 'Caltech']\n          let index = datasets.indexOf(this.props.dataset)\n          let me = this\n          setTimeout(() => {\n            me.props.loadImages(index)\n            let height = this.divElement.clientHeight\n            me.props.setKeyHeight(height)\n          }, 0)\n        })\n        .catch(function(err) {\n          console.log(err.message) // some coding error in handling happened\n        })\n    } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      let prevd = decodeS(prevProps.loaded_embedding)\n      let d = decodeS(this.props.loaded_embedding)\n      if (prevd.dataset !== d.dataset) {\n        let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n          d.dataset\n        )\n        this.setState({\n          color_array,\n          color_array_hexes,\n          status_to_color,\n        })\n\n        // different dataset\n        while (this.scene.children.length > 0) {\n          this.scene.remove(this.scene.children[0])\n        }\n        this.resetCamera()\n        this.props.setTransitionStatus(0)\n        let height = this.divElement.clientHeight\n        this.props.setKeyHeight(height)\n        let me = this\n        setTimeout(() => {\n          Promise.all(getTextures(tile_dict[me.props.dataset])).then(\n            textures => {\n              me.textures = textures\n              me.addPoints()\n\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0.5)\n            }\n          )\n        }, 0)\n      } else if (prevd.strategy !== d.strategy) {\n        // new strategy, we should transition\n        // new strategy, who dis\n        // if (this.props.transition_status === 1) {\n        // this.labelSelected()\n        // }\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      } else if (\n        prevd.round !== d.round &&\n        this.props.transition_status !== 1.5\n      ) {\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      }\n    } else if (\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 0) ||\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 2.6)\n    ) {\n      if (this.props.round !== this.props.round_limit) {\n        this.revealSelected()\n      } else {\n        // last round\n        this.props.setTransitionStatus(1)\n        // if (!this.props.standings_seen) {\n        let me = this\n        setTimeout(() => {\n          me.props.toggleEnd(true)\n        }, 200)\n        // }\n      }\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.round !== prevProps.round) {\n    }\n\n    let { width, height } = this.props\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.camera.aspect = width / height\n      this.camera.updateProjectionMatrix()\n      this.renderer.setSize(width, height)\n\n      let current_scale = this.getScaleFromZ(this.camera.position.z)\n      let d3_x =\n        -(this.camera.position.x * current_scale) + this.props.width / 2\n      let d3_y = this.camera.position.y * current_scale + this.props.height / 2\n      var resize_transform = d3.zoomIdentity\n        .translate(d3_x, d3_y)\n        .scale(current_scale)\n      let view = d3.select(this.mount)\n      this.d3_zoom.transform(view, resize_transform)\n\n      let me = this\n      setTimeout(() => {\n        let height = me.divElement.clientHeight\n        me.props.setKeyHeight(height)\n      }, 0)\n    }\n  }\n\n  showHover(mouse_coords, sprite_index, digit_index, full_index) {\n    let images = this.props.images\n    let image_dict = {\n      MNIST: images[0],\n      Quickdraw: images[1],\n      Caltech: images[2],\n    }\n\n    if (\n      this.hover_ctx !== undefined &&\n      image_dict[this.props.dataset] !== undefined &&\n      image_dict[this.props.dataset] !== null\n    ) {\n      let loaded = this.props.embeddings[this.props.loaded_embedding]\n      this.hover_mount.style.display = 'block'\n      let y_adjust = `${mouse_coords[1] -\n        hover_size -\n        this.props.grem -\n        hover_pad * 4 -\n        14}px`\n      // y_adjust = `${mouse_coords[1] - hover_size / 2 - hover_pad}px`\n      this.hover_mount.style.transform = `translate3d(${mouse_coords[0] -\n        hover_size / 2 -\n        hover_pad}px, ${y_adjust},0)`\n      this.hover_ctx = this.hover_mount.childNodes[0].getContext('2d')\n      this.hover_ctx.imageSmoothingEnabled = false\n      let label = this.hover_mount.childNodes[1]\n      this.hover_ctx.fillRect(0, 0, hover_size, hover_size)\n\n      let status = loaded.statuses[full_index]\n\n      let adjusted_status = this.state.status_to_color.slice(\n        0,\n        this.state.status_to_color.length - 1\n      )\n      adjusted_status.push([0.5, 0.5, 0.5])\n\n      let color = null\n      let text_color = 'black'\n      if (status === 1 && this.props.round !== this.props.round_limit) {\n        color = '#eee'\n        text_color = 'black'\n      } else {\n        color =\n          'rgba(' +\n          adjusted_status[loaded.labels[full_index]]\n            .map(d => Math.round(d * 255))\n            .join(',') +\n          ',1)'\n      }\n      this.hover_mount.style.background = color\n      this.hover_mount.style.color = text_color\n\n      let { sprite_side, sprite_image_size } = sprite_spec_dict[\n        this.props.dataset\n      ]\n\n      label.style.background = color\n      label.innerText =\n        status === 1 && this.props.round !== this.props.round_limit\n          ? 'selected'\n          : [...label_dict[this.props.dataset], 'unlabeled'][\n              loaded.labels[full_index]\n            ]\n      this.hover_ctx.drawImage(\n        image_dict[this.props.dataset][sprite_index],\n        // source rectangle\n        (digit_index % sprite_side) * sprite_image_size,\n        Math.floor(digit_index / sprite_side) * sprite_image_size,\n        sprite_image_size,\n        sprite_image_size,\n        // destination rectangle\n        0,\n        0,\n        hover_size,\n        hover_size\n      )\n    }\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height } = this.props\n    let [mouseX, mouseY] = mouse_position\n\n    let { sprite_size } = sprite_spec_dict[this.props.dataset]\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    if (this.props.dataset === 'Caletch')\n      this.raycaster.params.Points.threshold = 4.0\n    if (\n      this.scene.children[0] !== undefined &&\n      this.scene.children[0].children.length > 0\n    ) {\n      let intersects = this.raycaster.intersectObjects(\n        this.scene.children[0].children\n      )\n      if (intersects[0]) {\n        let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n        let intersect = sorted_intersects[0]\n        let sprite_index = intersect.object.userData.sprite_index\n        let digit_index = intersect.index\n        let full_index = sprite_index * sprite_size + digit_index\n        this.showHover([mouseX, mouseY], sprite_index, digit_index, full_index)\n        // this.props.setHoverIndex(full_index)\n        // this.highlightPoint(sprite_index, digit_index, full_index)\n      } else {\n        this.hover_mount.style.display = `none`\n      }\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node())\n      let mouse_position = [mouseX, mouseY]\n      this.checkIntersects(mouse_position)\n    })\n\n    view.on('mouseleave', () => {\n      this.hover_mount.style.display = `none`\n    })\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n      this.props.dataset\n    )\n    this.setState({\n      color_array,\n      color_array_hexes,\n      status_to_color,\n    })\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n\n    this.handleMouse()\n  }\n\n  resetCamera() {\n    let { width, height } = this.props\n\n    let view = d3.select(this.mount)\n\n    this.camera.position.x = 0\n    this.camera.position.y = 0\n    this.camera.position.z = 30\n\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem, dataset } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n          cursor: 'crosshair',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          ref={divElement => {\n            this.divElement = divElement\n          }}\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: 0,\n            pointerEvents: 'none',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              marginBottom: grem / 2,\n              marginRight: grem / 4,\n            }}\n          >\n            <div style={{ padding: `0 ${grem / 4}px` }}>Key:</div>\n            <div\n              style={{\n                background: '#888',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n                marginRight: grem / 4,\n              }}\n            >\n              unlabeled\n            </div>\n            <div\n              style={{\n                background: '#fff',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n              }}\n            >\n              selected\n            </div>\n          </div>\n\n          <div\n            style={{\n              padding: `0 ${grem / 4}px 0 ${grem / 4}px`,\n              display: 'flex',\n              flexWrap: 'wrap',\n              marginBottom: grem / 2,\n            }}\n          >\n            <div style={{ padding: `0 ${grem / 4}px 0 0` }}>Labels:</div>\n            {this.state.color_array_hexes !== null\n              ? this.state.color_array_hexes.map((c, i) => (\n                  <div\n                    key={'color_' + i}\n                    style={{\n                      background: this.state.color_array_hexes[i],\n                      height: grem,\n                      textAlign: 'center',\n                      color: '#111',\n                      padding: `0 ${grem / 4}px`,\n                      marginRight: grem / 4,\n                    }}\n                  >\n                    {label_dict[dataset][i]}\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            width: hover_size + hover_pad * 2 + hover_bord * 2,\n            pointerEvents: 'none',\n            padding: hover_pad,\n            display: 'none',\n            color: 'white',\n            height: grem + hover_size + hover_pad * 3 + hover_bord * 2,\n            lineHeight: 0,\n            border: `solid ${hover_bord}px rgba(0,0,0,0.3)`,\n          }}\n          ref={mount => {\n            this.hover_mount = mount\n          }}\n        >\n          <canvas\n            width={hover_size}\n            height={hover_size}\n            style={{ imageRendering: 'pixelated' }}\n          />\n          <div\n            style={{\n              width: hover_size,\n              height: grem,\n              textAlign: 'center',\n              lineHeight: 1.5,\n              paddingTop: hover_pad,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\nimport { debounce } from 'lodash'\nimport SelectedList from './SelectedList'\nimport Modal from './Modal'\nimport End from './End'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n      show_list: false,\n      show_modal: true,\n      key_height: null,\n      show_end: false,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setSize = debounce(this.setSize, 200)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n    this.toggleList = this.toggleList.bind(this)\n    this.toggleModal = this.toggleModal.bind(this)\n    this.toggleEnd = this.toggleEnd.bind(this)\n    this.setKeyHeight = this.setKeyHeight.bind(this)\n  }\n\n  setKeyHeight(height) {\n    this.setState({ key_height: height })\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  toggleList(new_value) {\n    this.setState({ show_list: new_value })\n  }\n\n  toggleModal(new_value) {\n    this.setState({ show_modal: new_value })\n  }\n\n  toggleEnd(new_value) {\n    this.setState({ show_end: new_value })\n    this.props.checkStandings()\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n      show_list,\n      show_modal,\n      show_end,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n      toggleList,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    let loading_embedding = requested_embedding !== loaded_embedding\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              padding: grem / 2,\n              zIndex: 999,\n              background: 'red',\n              display: 'none',\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                dataset={dataset}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                selectRound={this.props.selectRound}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n                round_limit={round_limit}\n                loadImages={this.props.loadImages}\n                images={this.props.images}\n                setKeyHeight={this.setKeyHeight}\n                toggleEnd={this.toggleEnd}\n                checkStandings={this.props.checkStandings}\n                standings_seen={this.props.standings_seen}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n              dataset={dataset}\n              toggleList={this.toggleList}\n              selectRound={this.props.selectRound}\n              dataset={dataset}\n              strategy={strategy}\n              loading_embedding={loading_embedding}\n              key_height={this.state.key_height}\n              toggleEnd={this.toggleEnd}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n            setTransitionStatus={this.setTransitionStatus}\n            toggleModal={this.toggleModal}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n              round_limit={round_limit}\n              dataset={dataset}\n              key_height={this.state.key_height}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: Math.min(500, ww),\n                  background: 'white',\n                  color: 'black',\n                  padding: grem,\n                  background: '#888',\n                }}\n              >\n                <div style={{ marginBottom: grem / 2 }}>Round {round + 1}</div>\n                <div style={{ position: 'relative', height: grem }}>\n                  <Timer\n                    grem={grem}\n                    gradient_string={gradient_string}\n                    ww={ww}\n                    labelsGotten={this.labelsGotten}\n                  />\n                </div>\n                <div\n                  style={{\n                    position: 'relative',\n                    paddingTop: grem / 2,\n                  }}\n                >\n                  Getting labels for selected points...\n                </div>\n              </div>\n            </div>\n          ) : null}\n          {show_list ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n                background: 'rgba(0, 0, 0, 0.4)',\n              }}\n              onClick={() => {\n                this.toggleList(false)\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: ww - grem * 3,\n                  color: 'black',\n                }}\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n              >\n                <SelectedList\n                  grem={grem}\n                  dataset={dataset}\n                  strategy={strategy}\n                  embeddings={embeddings}\n                  loaded_embedding={loaded_embedding}\n                  wh={wh}\n                  ww={ww - grem * 3}\n                  toggleList={this.toggleList}\n                />\n              </div>\n            </div>\n          ) : null}\n          {show_modal ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n                background: 'rgba(60, 60, 60, 0.4)',\n                overflow: 'auto',\n                paddingTop: wh < 800 ? wh / 4 : grem * 2.5,\n                paddingBottom: wh / 4,\n              }}\n              onClick={() => {\n                this.toggleModal(false)\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  maxWidth: 600,\n                  width: '100%',\n                  color: 'black',\n                }}\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n              >\n                <Modal\n                  grem={grem}\n                  toggleModal={this.toggleModal}\n                  gradient_string={gradient_string}\n                />\n              </div>\n            </div>\n          ) : null}\n          {show_end ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n                background: 'rgba(60, 60, 60, 0.4)',\n                overflow: 'auto',\n                paddingTop: wh < 800 ? wh / 4 : grem * 2.5,\n                paddingBottom: wh / 4,\n              }}\n              onClick={() => {\n                this.toggleEnd(false)\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  maxWidth: 600,\n                  width: '100%',\n                  color: 'black',\n                }}\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n              >\n                <End\n                  grem={grem}\n                  strategy={strategy}\n                  dataset={dataset}\n                  strategies={strategies}\n                  toggleEnd={this.toggleEnd}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport Projection from './Projection'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass BigButton extends Component {\n  render() {\n    let {\n      transition_status,\n      grem,\n      round_limit,\n      round,\n      dataset,\n      strategy,\n    } = this.props\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Loading...'\n      next_state = null\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting points...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = `${\n        this.props.dataset === 'Caltech' ? '50' : '1,000'\n      } points selected from ${dataset} using ${capitalize(strategy)}`\n      if (adjusted_round === round_limit)\n        button_text = `Final round of ${dataset} using ${strategy}`\n      if (this.props.loading_embedding) button_text = 'Loading...'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling points...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Retraining model...'\n      next_state = null\n    } else if (transition_status === 2.3) {\n      button_text = 'Retraining model...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Selecting points...'\n      if (adjusted_round === round_limit)\n        button_text = `Final round of ${dataset} using ${strategy}`\n      next_state = null\n    }\n\n    let inactive = next_state === null || round_limit === adjusted_round\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          bottom:\n            this.props.key_height === null\n              ? grem + this.props.footer_height + grem * 1.5\n              : this.props.key_height + this.props.footer_height + grem * 1,\n          left: 0,\n          padding: `0 ${grem / 4}px`,\n          pointerEvents: 'none',\n        }}\n      >\n        <div style={{ display: 'flex', marginBottom: grem / 2 }}>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              position: 'relative',\n            }}\n          >\n            {button_text}\n          </div>\n        </div>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n            }}\n          >\n            <button\n              style={{\n                pointerEvents: 'auto',\n                color: inactive ? '#555' : 'white',\n                textDecoration: inactive ? 'none' : 'underline',\n                cursor: inactive ? 'default' : 'pointer',\n                pointerEvents: inactive ? 'none' : 'auto',\n              }}\n              onClick={() => {\n                if (next_state !== null && round_limit !== adjusted_round) {\n                  this.props.toggleList(true)\n                }\n              }}\n            >\n              View list\n            </button>\n          </div>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n            }}\n          >\n            <button\n              className={next_state === null ? 'gray-bg' : 'rainbow-animate'}\n              style={{\n                width: 120,\n                height: grem,\n                color: next_state === null ? '#222' : 'black',\n                textAlign: 'left',\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n                borderRadius: grem / 2,\n                textAlign: 'center',\n                pointerEvents: 'auto',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  if (round_limit === adjusted_round) {\n                    this.props.selectRound(0)\n                  } else {\n                    this.props.setTransitionStatus(next_state)\n                  }\n                }\n              }}\n            >\n              {round_limit !== adjusted_round ? 'Next round' : 'Restart'}\n            </button>\n          </div>\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n            }}\n          >\n            {round_limit === adjusted_round ? (\n              <button\n                style={{\n                  pointerEvents: 'auto',\n                  color: next_state === null ? '#555' : 'white',\n                  textDecoration: next_state === null ? 'none' : 'underline',\n                  cursor: next_state === null ? 'default' : 'pointer',\n                  pointerEvents: next_state === null ? 'none' : 'auto',\n                }}\n                onClick={() => {\n                  if (next_state !== null) {\n                    this.props.toggleEnd(true)\n                  }\n                }}\n              >\n                View results\n              </button>\n            ) : (\n              <button\n                style={{\n                  pointerEvents: 'auto',\n                  color: inactive ? '#555' : 'white',\n                  textDecoration: inactive ? 'none' : 'underline',\n                  cursor: inactive ? 'default' : 'pointer',\n                  pointerEvents: inactive ? 'none' : 'auto',\n                }}\n                onClick={() => {\n                  if (next_state !== null && round_limit !== adjusted_round) {\n                    if (next_state !== null) {\n                      this.props.selectRound(round_limit)\n                    }\n                  }\n                }}\n              >\n                Jump to end\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n            left: 0,\n            top: 0,\n            background: '#ddd',\n          }}\n        >\n          <div\n            style={{\n              height: '100%',\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: Math.min(500 - grem * 2, ww - grem * 2),\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\n\n// duplicate from projection\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nclass SelectedList extends Component {\n  render() {\n    let { grem, embeddings, loaded_embedding, dataset, ww, wh } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[loaded_embedding]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let { sprite_size, sprite_side, sprite_image_size } = sprite_spec_dict[\n      dataset\n    ]\n\n    let target_width = 80 + grem / 2\n    let columns = Math.floor((ww - grem) / target_width)\n    let image_width = (ww - grem - (columns - 1) * (grem / 2)) / columns\n    // let image_columns = Math.round(ww- grem/2) / (target_width + grem / 2))\n    // let image_width = Math.floor((ww - grem) / image_columns)\n    let scale = image_width / sprite_image_size\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    return (\n      <div style={{ background: '#888' }}>\n        <div\n          style={{\n            padding: grem / 2,\n            background: 'white',\n            color: 'black',\n            position: 'relative',\n          }}\n        >\n          Selected points\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleList(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ overflow: 'auto', height: wh - grem * 6 }}>\n          <div style={{ padding: grem / 2, paddingBottom: 0 }}>\n            {this.props.dataset === 'Caltech' ? '50' : '1,000'} points selected\n            for labeling from the {this.props.dataset} dataset using the{' '}\n            {this.props.strategy} strategy:\n          </div>\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateColumns: `repeat(auto-fill, ${image_width}px)`,\n              gridRowGap: grem / 2,\n              gridColumnGap: grem / 2,\n              padding: grem / 2,\n            }}\n          >\n            {image_pickers.length > 0\n              ? image_pickers.map((p, i) => {\n                  return (\n                    <div\n                      key={p}\n                      style={{ paddingBottom: '100%', position: 'relative' }}\n                    >\n                      <div\n                        style={{\n                          position: 'absolute',\n                          left: 0,\n                          top: 0,\n                          right: 0,\n                          bottom: 0,\n                          backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                          backgroundSize: `${scale *\n                            sprite_actual_size}px ${scale *\n                            sprite_actual_size}px`,\n                          backgroundPosition: `-${p[1] *\n                            scale *\n                            sprite_image_size}px -${p[2] *\n                            scale *\n                            sprite_image_size}px`,\n                          imageRendering: 'pixelated',\n                        }}\n                      />\n                    </div>\n                  )\n                })\n              : null}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectedList\n","import React, { Component } from 'react'\n\nclass Modal extends Component {\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{}}>\n        <div\n          style={{\n            padding: grem / 2,\n            color: 'black',\n            position: 'relative',\n            background: 'white',\n          }}\n        >\n          About Active Learner\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleModal(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ padding: grem / 2, background: '#ccc' }}>\n          <p style={{ fontStyle: 'italic' }}>\n            Active Learner is a research prototype by{' '}\n            <a href=\"http://fastforwardlabs.com\">Cloudera Fast Forward Labs</a>,{' '}\n            built to accompany our report on Learning with Limited Labeled Data.\n            For more about the report{' '}\n            <a href=\"https://blog.fastforwardlabs.com/2019/04/02/a-guide-to-learning-with-limited-labeled-data.html\">\n              read our blog post\n            </a>\n            .\n          </p>\n          <p style={{ textIndent: grem }}>\n            Supervised machine learning, while powerful, needs labeled data to\n            be effective. Active learning{' '}\n            <span\n              style={{\n                color: 'black',\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            >\n              reduces the number of labeled examples needed to train a model\n            </span>\n            , saving time and money while obtaining comparable performance to\n            models trained with much more data.\n          </p>\n          <p style={{ textIndent: grem }}>\n            In Active Learner, we visualize the selections of{' '}\n            <span\n              style={{\n                background: '#111',\n                color: 'white',\n              }}\n            >\n              four different training strategies\n            </span>{' '}\n            on{' '}\n            <span\n              style={{\n                background: '#111',\n                color: 'white',\n              }}\n            >\n              three different datasets\n            </span>\n            . We use a dimensionality reduction technique called{' '}\n            <a href=\"https://umap-learn.readthedocs.io/en/latest/\">UMAP</a> to\n            visualize how the model is clustering the dataset.{' '}\n            <span\n              style={{\n                background: 'white',\n                color: 'black',\n              }}\n            >\n              We highlight the points that the strategy has selected to be\n              labeled in the next round.\n            </span>{' '}\n            Clicking on the{' '}\n            <span className=\"rainbow-animate\">Next&nbsp;round</span> button\n            retrieves the labels for those selections and retrains the model,\n            showing how the clusters shift.{' '}\n            <span style={{ background: '#666', color: '#fff' }}>\n              The graph at the bottom shows the changes in accuracy for\n              different rounds.\n            </span>{' '}\n            You can use the graph to compare the effectiveness of the different\n            strategies.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <button\n              style={{\n                color: 'black',\n              }}\n              onClick={() => {\n                this.props.toggleModal(false)\n              }}\n            >\n              Start exploring now\n            </button>{' '}\n            or learn more about strategies and datasets below.\n          </p>\n          <div\n            style={{\n              width: '100%',\n              height: 1,\n              background: `linear-gradient(to right, ${\n                this.props.gradient_string\n              })`,\n              marginTop: grem / 2 - 0.5,\n              marginBottom: grem / 2 - 0.5,\n              background: '#aaa',\n            }}\n          />\n          <p style={{}}>Strategy and dataset info</p>\n          <p style={{ marginBottom: grem / 2, textIndent: grem }}>\n            Active learning strategies focus on points that the model is\n            especially uncertain about. You can see this focus in the\n            visualization when the{' '}\n            <span style={{ background: 'white' }}>\n              selected points are at the boundaries of clusters\n            </span>\n            . You can compare the different active learning strategies (\n            <span style={{ background: 'black', color: 'white' }}>Entropy</span>\n            ,{' '}\n            <span style={{ background: 'black', color: 'white' }}>\n              Adversarial\n            </span>\n            ,{' '}\n            <span style={{ background: 'black', color: 'white' }}>\n              Ensemble\n            </span>\n            ) with the{' '}\n            <span style={{ background: 'black', color: 'white' }}>Random</span>{' '}\n            strategy to get a feel for how active learning works.\n          </p>\n          <p>About the strategies</p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>Random</span>:{' '}\n            <span style={{ background: 'white' }}>\n              points are selected randomly\n            </span>\n            .\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>Entropy</span>\n            :{' '}\n            <span style={{ background: 'white' }}>\n              points with high entropy are selected\n            </span>\n            . The outcome of an uncertain event carries a higher entropy\n            compared to an event with no uncertainty.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>\n              Adversarial\n            </span>\n            :{' '}\n            <span style={{ background: 'white' }}>\n              points with small adversarial perturbation magnitudes are selected\n            </span>\n            . A perturbation causes a particular datapoint to be classified as a\n            different category.\n          </p>\n          <p style={{ textIndent: grem, marginBottom: grem / 2 }}>\n            <span style={{ background: 'black', color: 'white' }}>\n              Ensemble\n            </span>\n            :{' '}\n            <span style={{ background: 'white' }}>\n              points are selected using the averaged prediction probabilities\n              across an ensemble of models\n            </span>\n            .\n          </p>\n\n          <p>About the datasets</p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>MNIST</span>:\n            The <a href=\"http://yann.lecun.com/exdb/mnist/\">MNIST dataset</a>{' '}\n            consists of handwritten digits from 0 to 9. It has a training set of\n            60,000 examples, and a test set of 10,000 examples. We use 5,000\n            labels to start and add 1,000 more labels each round.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>\n              Quickdraw\n            </span>\n            : The{' '}\n            <a href=\"https://quickdraw.withgoogle.com/data\">\n              Quick Draw dataset\n            </a>{' '}\n            consists of 50 million hand-drawn figures across 345 categories. We\n            randomly selected 10 categories for which to build a classifier,\n            resulting in a training set of 65,729 examples and a test set of\n            16,436 examples. We use 5,000 labels to start and add 1,000 more\n            labels each round.\n          </p>\n          <p style={{ textIndent: grem }}>\n            <span style={{ background: 'black', color: 'white' }}>Caltech</span>\n            : The{' '}\n            <a href=\"http://www.vision.caltech.edu/Image_Datasets/Caltech256/\">\n              Caltech 256 dataset\n            </a>{' '}\n            consists of 30,607 images from 256 categories. We randomly selected\n            10 categories for which to build a classifier, resulting in a\n            training set of 822 examples, and a test set of 212 examples. We use\n            300 labels to start and add 50 labels each round.\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Modal\n","import React, { Component } from 'react'\nimport { mnist_strategies } from './mnist_strategies.js'\nimport { quickdraw_strategies } from './quickdraw_strategies.js'\nimport { caltech_strategies } from './caltech_strategies.js'\nimport { toPercent2, comma } from './Utils.js'\nimport { sortBy } from 'lodash'\n\nlet strategy_dict = {\n  MNIST: mnist_strategies,\n  Quickdraw: quickdraw_strategies,\n  Caltech: caltech_strategies,\n}\n\nlet total_dict = {\n  MNIST: 60000,\n  Quickdraw: 65729,\n  Caltech: 822,\n}\n\nclass End extends Component {\n  render() {\n    let { grem, strategy, strategies, dataset } = this.props\n\n    let num_labeled = strategy_dict[dataset].num_labeled\n    let strategy_accuracy = strategy_dict[dataset]\n    let results = strategy_accuracy[strategy]\n    let end = 7\n\n    let race = strategies.map((s, j) => {\n      return {\n        string: `${s}: ${toPercent2(strategy_accuracy[s].accuracy[end])}`,\n        strategy: s,\n        value: strategy_accuracy[s].accuracy[end],\n        diff:\n          strategy_accuracy[s].accuracy[end] - strategy_accuracy[s].accuracy[0],\n      }\n    })\n    race = sortBy(race, 'value').reverse()\n\n    return (\n      <div style={{}}>\n        <div\n          style={{\n            padding: grem / 2,\n            color: 'black',\n            position: 'relative',\n            background: 'white',\n          }}\n        >\n          Final round\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleEnd(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ padding: grem / 2, background: '#ccc' }}>\n          <p style={{ marginBottom: grem / 2 }}>\n            After eight rounds of labeling using points selected by the{' '}\n            {strategy} strategy ({comma(num_labeled[end] - num_labeled[0])}{' '}\n            additional points), the {dataset} classifier's accuracy is{' '}\n            {toPercent2(results.accuracy[end])}, an improvement of{' '}\n            {toPercent2(results.accuracy[end] - results.accuracy[0])} over the\n            first round.\n          </p>\n          <p>Strategies ranked by accuracy improvement:</p>\n          <div style={{ marginBottom: grem / 2 }}>\n            {race.map((o, i) => (\n              <div\n                key={o.strategy}\n                style={{\n                  textTransform: 'capitalize',\n                  background: strategy === o.strategy ? 'black' : 'transparent',\n                  color: strategy === o.strategy ? '#fff' : 'black',\n                  display: 'flex',\n                  marginBottom: grem / 8,\n                }}\n              >\n                <div style={{ marginRight: grem / 4 }}>\n                  {i + 1}. {o.strategy}:\n                </div>\n                <div style={{ textAlign: 'right', flexGrow: 1 }}>\n                  {(o.value * 100).toFixed(2)}% (\n                  {Math.sign(o.diff) === 1 ? '+' : ''}\n                  {(o.diff * 100).toFixed(2)}%)\n                </div>\n              </div>\n            ))}\n          </div>\n          <p style={{ marginBottom: grem / 2 }}>\n            The classifier is trained on {comma(num_labeled[end])} labeled\n            points;{' '}\n            {toPercent2(num_labeled[end] / total_dict[this.props.dataset])} of\n            the {comma(total_dict[this.props.dataset])} image dataset.\n          </p>\n          <p>\n            <button\n              style={{ color: 'inherit' }}\n              onClick={() => {\n                this.props.toggleEnd(false)\n              }}\n            >\n              Continue exploring\n            </button>\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default End\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'adversarial', 'ensemble']\n\nlet mnist_strategy_url = [\n  'mnist_random_round',\n  'mnist_entropy_round',\n  'mnist_adv_round',\n  'mnist_ensemble_entropy_round',\n]\n\nlet quickdraw_strategy_url = [\n  'quickdraw_random_round',\n  'quickdraw_entropy_round',\n  'quickdraw_adv_round',\n  'quickdraw_ensemble_entropy_round',\n]\n\nlet caltech_strategy_url = [\n  'caltech_random_round',\n  'caltech_entropy_round',\n  'caltech_adv_round',\n  'caltech_ensemble_entropy_round',\n]\n\nlet strategy_dict = {\n  [datasets[0]]: mnist_strategy_url,\n  [datasets[1]]: quickdraw_strategy_url,\n  [datasets[2]]: caltech_strategy_url,\n}\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nlet tile_array = [\n  mnist_tile_locations,\n  quickdraw_tile_locations,\n  caltech_tile_locations,\n]\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[0],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: [0, 0, 0],\n      standings_seen: false,\n      loading: false,\n      images: [null, null, null],\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n    this.loadImages = this.loadImages.bind(this)\n    this.checkStandings = this.checkStandings.bind(this)\n  }\n\n  selectRound(round) {\n    let dataset_index = datasets.indexOf(this.state.dataset)\n    let new_exploreds = this.state.strategy_explored.slice()\n    let strat_limit = Math.max(\n      this.state.strategy_explored[dataset_index],\n      round\n    )\n    new_exploreds[dataset_index] = strat_limit\n    this.setState({ round: round, strategy_explored: new_exploreds })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  loadImages(index) {\n    if (this.state.images[index] === null) {\n      let tile_locations = tile_array[index]\n      let images = tile_locations.map(src => {\n        let img = document.createElement('img')\n        img.src = src\n        return img\n      })\n      // make a copy\n      let new_images = this.state.images.slice()\n      new_images[index] = images\n      this.setState({ images: new_images })\n    }\n  }\n\n  selectDataset(index) {\n    this.setState({\n      dataset: datasets[index],\n      round: 0,\n      standings_seen: false,\n    })\n    this.checkOrFetchData(datasets[index], this.state.strategy, 0)\n    this.loadImages(index)\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index] })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  checkStandings() {\n    this.setState({ standings_seen: true })\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/${\n      strategy_dict[dataset][strategies.indexOf(strategy)]\n    }${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    let dataset_index = datasets.indexOf(this.state.dataset)\n    let altered_state = Object.assign({}, this.state, {\n      strategy_explored: this.state.strategy_explored[dataset_index],\n    })\n    return (\n      <Layout\n        {...altered_state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n        loadImages={this.loadImages.bind(this)}\n        checkStandings={this.checkStandings}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}