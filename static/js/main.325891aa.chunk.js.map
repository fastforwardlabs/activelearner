{"version":3,"sources":["Header.js","Utils.js","mnist_entropy_accuracy.js","Canvas.js","Accuracy.js","Footer.js","Projection.js","Layout.js","Selected.js","ProjectionSelected.js","BigButton.js","Timer.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","_this2","_this$props","datasets","selectDataset","strategies","strategy","selectStrategy","strategy_colors","dataset","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","i","inner","active","onClick","color","reduce","p","c","Component","toPercent2","x","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","results","accuracy","num_labeled","Canvas","getCtx","refs","canvas","lineHeight","width","Accuracy","toConsumableArray","Array","random","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","transition_status","rounded_min","floor","_","space","clearRect","y_padding","fillStyle","fillRect","point_size","lineWidth","strokeStyle","beginPath","stroke","cell_width","arc","PI","fill","_this$props2","adjusted_round","label_round","src_Canvas","Fragment","cursor","justifyContent","parts","toString","split","replace","join","comma","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","bottom","src_Accuracy","mnist_tile_locations","process","THREE","load","flipY","ranges","start","sprite_side","end","sprite_number","push","color_num","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","length","embedding","Float32Array","Projection","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","texture","textures","repeat","addAttribute","uniforms","value","construct","size","material","vertexShader","fragmentShader","point_cloud","add","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","position_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","me","size_tween","delay","onComplete","setTransitionStatus","sel_position_tween","setTimeout","chain","_this3","_loop2","attribute_indexes","loc_index","_this4","end_size","groups","_loop3","g","points","_this$props3","console","log","_loop4","start_colors","end_colors","color_tween","_this5","Promise","all","texturesSources","loader","textureSource","resolve","reject","undefined","err","getTextures","then","revealSelected","_this$props4","aspect","renderer","setClearColor","setSize","mount","appendChild","domElement","point_group","selected_point_group","d3_zoom","scaleExtent","getScaleFromZ","far","on","zoomHandler","view","initial_scale","initial_transform","translate","requestAnimationFrame","sortObjects","render","removeChild","_this6","_this$props5","overflow","footer_height","textAlign","Selected","prev_loaded","setState","prev_embeddings","selected_indexes","new_labels","header_height","gutter","side_padding","image_width","image_height","image_pickers","sprite_index","right","opacity","transition","paddingTop","paddingBottom","gridTemplateColumns","gridColumnGap","gridRowGap","backgroundImage","backgroundSize","backgroundPosition","imageRendering","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","src_Projection","src_Selected","BigButton","button_text","next_state","round_limit","paddingLeft","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","marginTop","min","src","img","document","total","curr","Layout","wh","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","status","_this$state","zIndex","src_ProjectionSelected","font_size","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","src_Timer","es","Data","scaleEmbeddings","fetchData","checkOrFetchData","strat_limit","string","xs","e","abs","ys","max_x","max_y","domain","url","fetch","response","json","r","scaled","embedding_string","assign","defineProperty","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.325891aa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectStrategy(i)\n                      }}\n                    >\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n","export let results = {\n  accuracy: [\n    0.953,\n    0.9664,\n    0.971,\n    0.9746,\n    0.9791,\n    0.9776,\n    0.979,\n    0.9805,\n    0.9795,\n  ],\n  num_labeled: [\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n    14000.0,\n    15000.0,\n    16000.0,\n    17000.0,\n    18000.0,\n  ],\n}\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { results } from './mnist_entropy_accuracy.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.strategy_explored !== prevProps.strategy_explored) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n    } = this.props\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 6\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    let x_padding = cell_width / 2\n    let rounded_min = Math.floor(_.min(results.accuracy) * 10) / 10\n\n    let rounds_limit = strategy_explored\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n    } = this.props\n    let label_round = round\n    let cell_width = 100\n    if (transition_status > 1) label_round = round + 1\n    return (\n      <div style={{}}>\n        <div style={{ display: 'inline-flex', pointerEvents: 'auto' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? <span>Round {round + 1}</span> : ' '}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {toPercent2(results.accuracy[round])}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => (\n              <div\n                onClick={() => {\n                  this.handleRound(i)\n                }}\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: cell_width * i,\n                  width: cell_width,\n                  height: height - grem * 2,\n                  cursor: i === round ? 'default' : 'pointer',\n                }}\n              />\n            ))}\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            pointerEvents: 'auto',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            100,000 points, {comma(results.num_labeled[label_round])} labelled (\n            {toPercent2(results.num_labeled[label_round] / 1000000)})\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom: 0,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet loader = new THREE.TextureLoader()\nlet circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\ncircle_texture.flipY = false\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\nlet color_num = 10\nlet color_array = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .gl()\n)\ncolor_array.push(\n  chroma\n    .hsl(0, 0, 0.5)\n    .luminance(0.1)\n    .gl()\n)\n// console.log(color_array)\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// let status_to_color = color_array.map(a => a.map(c => c / 255))\nlet status_to_color = color_array.map(a => a.slice(0, 3))\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    // let new_size = zoomScaler(z)\n    // let point_group = this.scene.children[0].children\n    // for (let c = 0; c < point_group.length; c++) {\n    //   point_group[c].material.uniforms.size.value = new_size\n    // }\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 20 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings) {\n    let me = this\n\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      let position_tween = new TWEEN.Tween(start_position)\n        .to(end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      position_tween.onUpdate(function() {\n        back_existing.geometry.attributes.position.array = start_position\n        back_existing.geometry.attributes.position.needsUpdate = true\n      })\n      position_tween.start()\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size = { value: 30 }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(400)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            me.addPoints()\n\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [1, 1, 1]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: 30 }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          me.props.setTransitionStatus(1)\n        }\n      })\n      size_tween.start()\n    }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    console.log(loaded_embedding)\n\n    let loaded = embeddings[loaded_embedding]\n\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.loaded_embedding === null &&\n      this.props.loaded_embedding !== null\n    ) {\n      // first load\n      Promise.all(getTextures(mnist_tile_locations)).then(textures => {\n        this.textures = textures\n        this.addPoints()\n        this.addSelectedPoints()\n      })\n      // } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      //   let prevd = decodeS(prevProps.loaded_embedding)\n      //   let d = decodeS(this.props.loaded_embedding)\n      //   if (prevd.dataset !== d.dataset) {\n      //     // different dataset\n      //     console.log('different dataset')\n      //     this.addPoints()\n      //   } else if (prevd.strategy !== d.strategy) {\n      //     // new strategy, we should transition\n      //     if (this.props.transition_status === 1) {\n      //       // this.labelSelected()\n      //     }\n      //     console.log('different strategy')\n      //     this.transitionPoints(prevProps.loaded_embedding)\n      //   } else if (prevd.round !== d.round) {\n      //     console.log('different round')\n      //     // this.transitionPoints(prevProps.loaded_embedding)\n      //   }\n    } else if (\n      this.props.transition_status === 0.5 &&\n      prevProps.transition_status === 0\n    ) {\n      this.revealSelected()\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.round !== prevProps.round &&\n      this.props.transition_status !== 1.5\n    ) {\n      console.log('new round')\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.strategy !== prevProps.strategy) {\n    }\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'auto',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: this.props.footer_height + grem,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Labels:</div>\n          <div\n            style={{\n              background: '#888',\n              color: '#111',\n              width: grem,\n              height: grem,\n              textAlign: 'center',\n            }}\n          >\n            ?\n          </div>\n          {color_array_hexes.map((c, i) => (\n            <div\n              style={{\n                background: color_array_hexes[i],\n                height: grem,\n                textAlign: 'center',\n                color: '#111',\n                width: grem,\n              }}\n            >\n              {i}\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              background: 'red',\n              padding: grem / 2,\n              zIndex: 999,\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                mnist_images={mnist_images}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <div\n                style={{\n                  width: Math.min(500, ww),\n                  background: '#666',\n                  padding: grem,\n                }}\n              >\n                <div>Getting labels for 1,000 selected points...</div>\n                <Timer\n                  grem={grem}\n                  gradient_string={gradient_string}\n                  ww={ww}\n                  labelsGotten={this.labelsGotten}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\n\nlet image_num = 40\nlet images = [...Array(40)].map(n => null)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet color_num = 10\nlet status_to_color = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\nclass Selected extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      labels: null,\n      prev_loaded: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { embeddings } = this.props\n\n    if (this.props.loaded_embedding !== prevProps.loaded_embedding) {\n      if (prevProps.loaded_embedding === null) {\n        // first real loaded set the state\n        this.setState({ prev_loaded: this.props.loaded_embedding })\n      } else {\n        // use the statuses from previous\n        let prev_embeddings = embeddings[prevProps.loaded_embedding]\n        let selected_indexes = []\n        for (let i = 0; i < prev_embeddings.statuses.length; i++) {\n          if (prev_embeddings.statuses[i] === 1) {\n            selected_indexes.push(i)\n          }\n        }\n        let loaded = embeddings[this.props.loaded_embedding]\n        let new_labels = selected_indexes.map((n, i) => loaded.labels[n])\n        this.setState({ labels: new_labels })\n      }\n    }\n    if (\n      this.props.transition_status === 0 &&\n      prevProps.transition_status !== 0\n    ) {\n      let me = this\n      setTimeout(() => {\n        me.setState({\n          prev_loaded: this.props.loaded_embedding,\n          labels: null,\n        })\n      }, 800)\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      embeddings,\n      loaded_embedding,\n      transition_status,\n      header_height,\n    } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[this.state.prev_loaded]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let grid_columns = 4\n    let gutter = grem / 4\n    let side_padding = grem / 4\n    let image_width =\n      (width - side_padding * 2 * 2 - gutter * (grid_columns - 1)) /\n      grid_columns\n    let image_height = image_width\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    let selected_labels = null\n    if (loaded_embedding !== null) {\n      selected_labels = selected_indexes.map(\n        (n, i) => embeddings[loaded_embedding].labels[i]\n      )\n    }\n\n    let scale = image_width / sprite_image_size\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: header_height,\n          width: width,\n          height: height,\n          background: '#333',\n          overflow: 'hidden',\n        }}\n      >\n        {transition_status === 0 ? (\n          <div\n            style={{\n              padding: grem / 4,\n            }}\n          >\n            <div\n              style={{\n                padding: grem / 4,\n              }}\n            >\n              Use the select data button below to select data points based on\n              the strategy.\n            </div>\n          </div>\n        ) : null}\n        <div\n          style={{\n            opacity:\n              transition_status === 0 || transition_status === 2.6 ? 0 : 1,\n            transition: 'opacity 0.4s linear',\n            padding: grem / 2,\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: width,\n              background: '#444',\n              padding: `${grem / 4}px ${grem / 2}px`,\n            }}\n          >\n            <div>Selected:</div>\n            <div>1,000</div>\n          </div>\n          <div\n            style={{\n              right: 0,\n              top: header_height,\n              width: width,\n              height: height - grem / 2,\n              paddingTop: grem * 1,\n              background: '#333',\n              overflow: 'auto',\n            }}\n          >\n            <div\n              style={{\n                display: 'grid',\n                paddingTop: side_padding * 2,\n                paddingBottom: side_padding * 2,\n                gridTemplateColumns: `repeat(${grid_columns}, ${image_width}px)`,\n                gridColumnGap: gutter,\n                gridRowGap: gutter * 2,\n              }}\n            >\n              {image_pickers.length > 0\n                ? image_pickers.map((p, i) => {\n                    let label =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? this.state.labels[i]\n                        : '?'\n                    let background =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? status_to_color[this.state.labels[i]]\n                        : '#bbb'\n                    return (\n                      <div\n                        style={{\n                          width: image_width,\n                          height: image_height + grem,\n                          background: background,\n                          color: '#111',\n                          textAlign: 'center',\n                          transition: 'background 400ms linear',\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundImage: `url(${\n                              mnist_tile_locations[p[0]]\n                            })`,\n                            backgroundSize: `${scale *\n                              sprite_actual_size}px ${scale *\n                              sprite_actual_size}px`,\n                            backgroundPosition: `-${p[1] *\n                              scale *\n                              sprite_image_size}px -${p[2] *\n                              scale *\n                              sprite_image_size}px`,\n                            width: image_width,\n                            height: image_height,\n                            imageRendering: 'pixelated',\n                          }}\n                        />\n                        <div>{label}</div>\n                      </div>\n                    )\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Selected\n","import React, { Component } from 'react'\nimport Projection from './Projection'\nimport Selected from './Selected'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection\n          width={width}\n          height={height}\n          grem={grem}\n          active_embedding={active_embedding}\n          strategies={strategies}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          embeddings={embeddings}\n          requested_embedding={requested_embedding}\n          loaded_embedding={loaded_embedding}\n          transition_status={transition_status}\n          setTransitionStatus={setTransitionStatus}\n          loading_round={loading_round}\n          footer_height={footer_height}\n          round={round}\n        />\n        {true ? (\n          <Selected\n            width={selected_width}\n            height={\n              height - this.props.footer_height - grem * 2 - header_height\n            }\n            grem={grem}\n            mnist_images={mnist_images}\n            embeddings={embeddings}\n            loaded_embedding={loaded_embedding}\n            ranges={ranges}\n            transition_status={transition_status}\n            header_height={header_height}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nclass BigButton extends Component {\n  render() {\n    let { transition_status, grem, round_limit, round } = this.props\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Select data'\n      next_state = 0.5\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = 'Get labels'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Retrain model'\n      next_state = 2.3\n    } else if (transition_status === 2.3) {\n      button_text = 'Retraining...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Deselecting...'\n      next_state = null\n    }\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          background: '#111',\n          position: 'absolute',\n          bottom: this.props.footer_height,\n          right: 0,\n        }}\n      >\n        <div>\n          {round_limit !== adjusted_round ? (\n            <button\n              style={{\n                width: 200,\n                height: 2 * grem,\n                background: next_state === null ? '#eee' : 'white',\n                color: 'black',\n                textAlign: 'left',\n                paddingLeft: grem / 2,\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  this.props.setTransitionStatus(next_state)\n                }\n              }}\n            >\n              {button_text}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            height: grem,\n            width: `${100}%`,\n            marginTop: grem / 2,\n            background: '#222',\n          }}\n        >\n          <div\n            style={{\n              height: grem,\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: grem,\n                width: Math.min(500, ww) - grem * 2,\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'dropout', 'ensemble']\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[0],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: 0,\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n  }\n\n  selectRound(round) {\n    let strat_limit = Math.max(this.state.strategy_explored, round)\n    this.setState({ round: round, strategy_explored: strat_limit })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  selectDataset(index) {\n    this.setState({ dataset: datasets[index] })\n    this.checkOrFetchData(\n      datasets[index],\n      this.state.strategy,\n      this.state.round\n    )\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index], strategy_explored: 0 })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/mnist_entropy_round${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    return (\n      <Layout\n        {...this.state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}