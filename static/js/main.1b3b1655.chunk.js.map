{"version":3,"sources":["Header.js","Utils.js","mnist_strategies.js","Canvas.js","Accuracy.js","Footer.js","Projection.js","Layout.js","Selected.js","ProjectionSelected.js","BigButton.js","Timer.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","_this2","_this$props","datasets","selectDataset","strategies","strategy","selectStrategy","strategy_colors","dataset","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","i","inner","active","onClick","color","reduce","p","c","Component","toPercent2","x","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","decodeS","string","splits","split","mnist","random","accuracy","num_labeled","entropy","deepfool","ensemble","Canvas","getCtx","refs","canvas","lineHeight","width","Accuracy","toConsumableArray","Array","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","transition_status","results","point_size","all_strat_results","_","rounded_min","floor","space","clearRect","y_padding","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","stroke","non_active_strats","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","strat","value","these_results","cell_width","arc","PI","fill","err","return","_this$props2","adjusted_round","label_round","src_Canvas","Fragment","cursor","justifyContent","parts","toString","replace","join","comma","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","bottom","src_Accuracy","mnist_tile_locations","process","THREE","load","flipY","ranges","start","sprite_side","end","sprite_number","push","color_num","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","length","embedding","Float32Array","Projection","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","texture","textures","repeat","addAttribute","uniforms","construct","size","material","vertexShader","fragmentShader","point_cloud","add","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","position_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","me","size_tween","delay","onComplete","setTransitionStatus","sel_position_tween","setTimeout","chain","_this3","_loop2","attribute_indexes","loc_index","_this4","end_size","groups","_loop3","g","points","_this5","_this$props3","_loop4","start_colors","end_colors","color_tween","_this6","Promise","all","texturesSources","loader","textureSource","resolve","reject","getTextures","then","prevd","d","console","log","revealSelected","_this$props4","aspect","renderer","setClearColor","setSize","mount","appendChild","domElement","point_group","selected_point_group","d3_zoom","scaleExtent","getScaleFromZ","far","on","zoomHandler","view","initial_scale","initial_transform","translate","requestAnimationFrame","sortObjects","render","removeChild","_this7","_this$props5","overflow","footer_height","textAlign","Selected","prev_loaded","setState","prev_embeddings","selected_indexes","new_labels","header_height","round_limit","gutter","side_padding","image_width","image_height","image_pickers","sprite_index","right","opacity","transition","paddingTop","paddingBottom","gridTemplateColumns","gridColumnGap","gridRowGap","backgroundImage","backgroundSize","backgroundPosition","imageRendering","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","src_Projection","src_Selected","BigButton","button_text","next_state","paddingLeft","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","marginTop","min","src","img","document","total","curr","Layout","wh","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","status","_this$state","zIndex","src_ProjectionSelected","font_size","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","src_Timer","mnist_strategy_url","es","Data","scaleEmbeddings","fetchData","checkOrFetchData","strat_limit","xs","e","abs","ys","max_x","max_y","domain","url","indexOf","fetch","response","json","r","scaled","embedding_string","assign","defineProperty","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAEMA,EAAa,SAAAC,GACjB,MAAiB,kBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,IAqJ9BC,cAjJb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GACbP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAHAA,2EAOjB,IAAIW,EAASR,KAAKS,WAAWC,aAC7BV,KAAKJ,MAAMe,gBAAgBH,+CAI3BR,KAAKK,6CAGE,IAAAO,EAAAZ,KAAAa,EAWHb,KAAKJ,MATPkB,EAFKD,EAELC,SACAC,EAHKF,EAGLE,cACAC,EAJKH,EAILG,WACAC,EALKJ,EAKLI,SAEAC,GAPKL,EAMLM,gBANKN,EAOLK,gBACAE,EARKP,EAQLO,QAEAC,GAVKR,EASLS,YATKT,EAULQ,MAMF,OACEE,EAAAC,EAAAC,cAAA,OACEC,IAAK,SAAAjB,GACHG,EAAKH,WAAaA,GAEpBkB,MAAO,CACLC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,QAAS,OACTC,SAAU,SAGZT,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAlBS,cAmBTF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLO,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPgB,WAAY,SAHhB,mBASFd,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WApCS,cAqCTF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,YACCP,EACEwB,IAAI,SAACC,EAAGC,GACP,IACIC,EADAC,EAASH,IAAMnB,EAanB,OAVKqB,EADLC,EACanB,EAAAC,EAAAC,cAAA,YAAOc,GAEdhB,EAAAC,EAAAC,cAAA,UACEkB,QAAS,WACP5B,EAAcyB,KAGfD,GAIPhB,EAAAC,EAAAC,cAAA,QACEE,MAAO,CACLO,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPY,WAAYS,EAAS,QAAU,cAC/BE,MAAOF,EAAS,QAAU,UAG3BD,KAINI,OAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAG,IAAKC,MAE/BxB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WA3ES,cA4ETF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPe,cAAe,QAGjBb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,aACCL,EACEsB,IAAI,SAACC,EAAGC,GACP,IACIC,EADAC,EAASH,IAAMtB,EAanB,OAVKwB,EADLC,EACanB,EAAAC,EAAAC,cAAA,YAAOnC,EAAWiD,IAEzBhB,EAAAC,EAAAC,cAAA,UACEkB,QAAS,WACPzB,EAAesB,KAGhBlD,EAAWiD,IAIlBhB,EAAAC,EAAAC,cAAA,QACEE,MAAO,CACLO,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPY,WAAYS,EAAS,QAAU,cAC/BE,MAAOF,EAAS,QAAU,UAG3BD,KAINI,OAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAG,IAAKC,cA3IlBC,aCGd,SAASC,EAAWC,GACzB,OAAOC,KAAKC,MAAU,IAAJF,GAAa,IAAM,IAGhC,SAASG,EAASC,EAAKJ,EAAGK,EAAGC,GAC9BA,EACFF,EAAIG,OAAOP,EAAGK,GAEdD,EAAII,OAAOR,EAAGK,GAQX,SAASjC,EAAYsB,GAM1B,MALY,CACVX,WAAYW,EACZe,UAAS,eAAAxB,OAAiBS,EAAjB,iBAAAT,OAAsCS,GAC/CgB,eAAgB,QAKb,SAASC,EAAQC,GACtB,IAAIC,EAASD,EAAOE,MAAM,KAC1B,MAAO,CACL5C,QAAS2C,EAAO,GAChB9C,SAAU8C,EAAO,GACjBX,MAAOW,EAAO,ICxCX,IAAIE,EAAQ,CACjBC,OAAQ,CACNC,SAAU,CACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEFC,YAAa,CACX,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGJC,QAAS,CACPF,SAAU,CACR,KACA,MACA,KACA,MACA,MACA,MACA,KACA,MACA,OAEFC,YAAa,CACX,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGJE,SAAU,CACRH,SAAU,CACR,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEFC,YAAa,CACX,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OAGJG,SAAU,CACRJ,SAAU,CACR,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,OAEFC,YAAa,CACX,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QCpESI,8LAtBXxE,KAAKJ,MAAM6E,OAAOzE,KAAK0E,KAAKC,yCAIb3E,KAAKJ,MAAdyB,KACN,OACEE,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEiD,WAAY,EAAGC,MAAO7E,KAAKJ,MAAMiF,QAC7CtD,EAAAC,EAAAC,cAAA,UACEC,IAAI,SACJmD,MAA0B,EAAnB7E,KAAKJ,MAAMiF,MAClBrE,OAA4B,EAApBR,KAAKJ,MAAMY,OACnBmB,MAAO,CACLkD,MAAO7E,KAAKJ,MAAMiF,MAClBrE,OAAQR,KAAKJ,MAAMY,OACnB4B,cAAe,kBAhBNY,oBC8ON8B,GAzOUhF,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM,IAAI1C,IAAI,SAAAC,GAAC,OAC1CzC,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM,IAAI1C,IAAI,SAAAC,GAAC,OAAIY,KAAKe,yBAI5B,SAAAY,EAAYlF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8E,IACjBjF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgF,GAAA3E,KAAAH,KAAMJ,KACD0D,IAAM,KACXzD,EAAK4E,OAAS5E,EAAK4E,OAAOnE,KAAZR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACdA,EAAKoF,KAAOpF,EAAKoF,KAAK3E,KAAVR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACZA,EAAKqF,YAAcrF,EAAKqF,YAAY5E,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALFA,sEAQZ8E,GACL3E,KAAKsD,IAAMqB,EAAOQ,WAAW,kDAI7BnF,KAAKsD,IAAI8B,MAAM,EAAG,GAClBpF,KAAKiF,kDAGYI,GACbrF,KAAKJ,MAAM0F,oBAAsBD,EAAUC,mBAC7CtF,KAAKsD,IAAI8B,MAAM,EAAG,GAEpBpF,KAAKiF,2CAGKM,GACNA,IAAcvF,KAAKJ,MAAMwD,OAC3BpD,KAAKJ,MAAM4F,YAAYD,kCAIpB,IAAA1E,EAWDb,KAAKJ,MARPY,GAHGK,EAEHgE,MAFGhE,EAGHL,QACAQ,EAJGH,EAIHG,WAEAoC,GANGvC,EAKHM,gBALGN,EAMHuC,OACAnC,EAPGJ,EAOHI,SACAI,EARGR,EAQHQ,KACAoE,EATG5E,EASH4E,kBACAH,EAVGzE,EAUHyE,kBAGEI,EAAUzB,EAAMhD,GAEpBT,GAAyB,EAAPa,EACQ,IAAtBoE,IAAyBrC,GAAgB,GAC7C,IAAIE,EAAMtD,KAAKsD,IACXqC,EAAa,EAMbC,EAAoB5E,EAAWsB,IAAI,SAAA/C,GAAC,OAAIsG,MAAM5B,EAAM1E,GAAG4E,YAEvD2B,EAAc3C,KAAK4C,MAAiC,GAA3BF,MAAMD,IAA2B,GAI1DI,EAAQ,EAAIF,EAGhBxC,EAAI2C,UAAU,EAAG,EAZA,KAYiBX,EAAoB,GAAI9E,GAE1D,IAAI0F,EAAyB,EAAbP,EAChBnF,GAA8B,EAAZ0F,EAElB5C,EAAI6C,UAAY,wBAChB7C,EAAI8C,SAlBa,IAkBJhD,EAAoB8C,EAlBhB,IAkBuC1F,GAExD8C,EAAI+C,UAAY,EAChB/C,EAAIgD,YAAc,wBAClB,IAAK,IAAI9D,EAAI,EAAGA,EAAIwD,EAZL,IAYuBxD,GAZvB,IAYyC,CACtDc,EAAIiD,YACJ,IAAIhD,EAAKf,EAAIwD,EAASxF,EACtB6C,EAASC,EAAK,EAAGC,EAAI2C,GAAW,GAChC7C,EAASC,EA1BM,KA0BagC,EAAoB,GAAI/B,EAAI2C,GAAW,GACnE5C,EAAIkD,SAGN,IAAIC,EAAoBzF,EAAW0F,OAAO,SAAAnH,GAAC,OAAIA,IAAM0B,IAnDhD0F,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAqDL,QAAAC,EAAAC,EAAkBP,EAAlBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAA5BU,EAA4BN,EAAAO,MAC/BC,EAAgBtD,EAAMoD,GAE1B/D,EAAI+C,UAAY,EAChB/C,EAAIgD,YAAc,OAClBhD,EAAI6C,UAAY,OAChB7C,EAAIiD,YACJ,IAAK,IAAI/D,EAAI,EAAGA,EAAI8C,EAAoB,EAAG9C,IAAK,CAG9Ca,EACEC,EA3CW,IA4CXd,EA3CUgF,GA4CVhH,GAJC+G,EAAcpD,SAAS3B,GAAKsD,IAAgB,EAAIA,GAI7BtF,EAAS0F,EACvB,IAAN1D,GAGJc,EAAIkD,SACJ,IAAK,IAAIhE,EAAI,EAAGA,EAAI8C,EAAoB,EAAG9C,IAAK,CAC9C,IAAI2B,GACDoD,EAAcpD,SAAS3B,GAAKsD,IAAgB,EAAIA,GACnDxC,EAAIiD,YACJjD,EAAImE,IAtDS,IAuDXjF,EAtDUgF,GAuDVhH,EAAS2D,EAAW3D,EAAS0F,EAC7BP,EACA,EACA,EAAIxC,KAAKuE,IAEXpE,EAAIqE,SAlFH,MAAAC,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAK,EAAAa,QAAAb,EAAAa,SAAA,WAAAjB,EAAA,MAAAC,GAsFLlB,EAAa,EAEbrC,EAAI+C,UAAY,EAChB/C,EAAIgD,YAAc,UAClBhD,EAAI6C,UAAY,UAChB7C,EAAIiD,YACJ,IAAK,IAAI/D,EAAI,EAAGA,EAAI8C,EAAoB,EAAG9C,IAAK,CAE9Ca,EACEC,EA1Ea,IA2Ebd,EA1EYgF,GA2EZhH,GAJckF,EAAQvB,SAAS3B,GAAKsD,IAAgB,EAAIA,GAIpCtF,EAAS0F,EACvB,IAAN1D,GAGJc,EAAIkD,SACJ,IAAK,IAAIhE,EAAI,EAAGA,EAAI8C,EAAoB,EAAG9C,IAAK,CAC9C,IAAI2B,GAAYuB,EAAQvB,SAAS3B,GAAKsD,IAAgB,EAAIA,GAC1DxC,EAAIiD,YACJjD,EAAImE,IApFW,IAqFbjF,EApFYgF,GAqFZhH,EAAS2D,EAAW3D,EAAS0F,EAC7BP,EACA,EACA,EAAIxC,KAAKuE,IAEXpE,EAAIqE,yCAIC,IAAA/G,EAAAZ,KAAA8H,EAWH9H,KAAKJ,MARPY,GAHKsH,EAELjD,MAFKiD,EAGLtH,QACAa,EAJKyG,EAILzG,KAEAJ,GANK6G,EAKL9G,WALK8G,EAML7G,UACAmC,EAPK0E,EAOL1E,MACAqC,EARKqC,EAQLrC,kBAEAH,GAVKwC,EASLC,eATKD,EAULxC,mBAGEI,EAAUzB,EAAMhD,GAEhB+G,EAAc5E,EAGlB,OADIqC,EAAoB,IAAGuC,EAAc5E,EAAQ,GAE/C7B,EAAAC,EAAAC,cAAA,OAAKE,MAAO,IACVJ,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEI,QAAS,cAAeK,cAAe,SACnDb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QACnBE,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QACXE,EAAAC,EAAAC,cAAA,qBAAa2B,EAAQ,GAAiB,MAGlD7B,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QACnBE,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,aACa4B,EAAWyC,EAAQvB,SAASf,OAI7C7B,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,WACViD,MAnBS,KAmBYS,EAAoB,GACzC9E,OAAQA,EAAgB,EAAPa,EACjBe,cAAe,SAGjBb,EAAAC,EAAAC,cAACwG,EAAD,CACEpD,MAzBS,KAyBYS,EAAoB,GACzC9E,OAAQA,EAAgB,EAAPa,EACjBoD,OAAQzE,KAAKyE,OACbpD,KAAMA,IAERE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0G,SAAA,KACGpI,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAMM,EAAoB,IAAIhD,IAAI,SAACC,EAAGC,GAAJ,OACrCjB,EAAAC,EAAAC,cAAA,OACEkB,QAAS,WACP/B,EAAKsE,YAAY1C,IAEnBb,MAAO,CACLC,SAAU,WACVE,IAAK,EACLD,KAvCG,IAuCgBW,EACnBqC,MAxCG,IAyCHrE,OAAQA,EAAgB,EAAPa,EACjB8G,OAAQ3F,IAAMY,EAAQ,UAAY,iBAM5C7B,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLI,QAAS,OACTK,cAAe,OACfgG,eAAgB,gBAChBlG,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAGTE,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,mBHtOH,SAAe6B,GAEpB,IAAImF,EAAQnF,EAAEoF,WAAWtE,MAAM,KAE/B,OADAqE,EAAM,GAAKA,EAAM,GAAGE,QAAQ,wBAAyB,KAC9CF,EAAMG,KAAK,KGmOSC,CAAM/C,EAAQtB,YAAY4D,IAD7C,cAEG/E,EAAWyC,EAAQtB,YAAY4D,GAAe,KAFjD,cA3NahF,cC+DR0F,GAvEEvF,KAAK4C,MAAsB,GAAhB5C,KAAKe,sBAG/B,SAAAwE,EAAY9I,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0I,IACjB7I,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4I,GAAAvI,KAAAH,KAAMJ,KACDQ,MAAQ,GACbP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAHAA,2EAOjB,IAAIW,EAASR,KAAKS,WAAWC,aAC7BV,KAAKJ,MAAM+I,gBAAgBnI,+CAI3BR,KAAKK,6CAGE,IAAAO,EAAAZ,KAAAa,EAcHb,KAAKJ,MAZPwD,EAFKvC,EAELuC,MACAwF,EAHK/H,EAGL+H,GACAvH,EAJKR,EAILQ,KACAL,EALKH,EAKLG,WACAG,EANKN,EAMLM,gBACAF,EAPKJ,EAOLI,SAGAwE,GAVK5E,EAQL2E,YARK3E,EASLgI,kBATKhI,EAUL4E,mBAMEsC,GAhBGlH,EAWLiI,oBAXKjI,EAYLkI,gBAImB3F,GACjB4F,EAjBGnI,EAaLyE,kBAUF,OALIG,EAAoB,GAAKA,EAAoB,MAC/CsC,EAAiB5E,KAAK8F,IAAI,EAAGlB,EAAiB,GAC9CiB,EAAoB7F,KAAK8F,IAAI,EAAGD,EAAoB,IAIpDzH,EAAAC,EAAAC,cAAA,OACEC,IAAK,SAAAjB,GACHG,EAAKH,WAAaA,GAEpBkB,MAAO,CACLC,SAAU,WACVsH,OAAQ,EACRrH,KAAM,EACNrB,OAAQ,EAAIa,EACZe,cAAe,SAGjBb,EAAAC,EAAAC,cAAC0H,EAAD,CACEtE,MAAO+D,EACPnD,kBAAmBA,EACnBjF,OAAQ,EAAIa,EACZA,KAAMA,EACNL,WAAYA,EACZwE,YAAaxF,KAAKJ,MAAM4F,YACxBrE,gBAAiBA,EACjBF,SAAUA,EACVmC,MAAO2E,EACPzC,kBAAmB0D,YA9DRhG,6CC0BrB,IAQIoG,EAAuBtJ,OAAAiF,EAAA,EAAAjF,CAAIkF,MANX,KAMiC1C,IACnD,SAACC,EAAGC,GAAJ,SAAAL,OAAakH,iBAAb,KAAAlH,OAFsB,UAEtBA,OAA2DK,EAA3D,WAEW,IAAI8G,KACWC,KAAP,GAAApH,OAAekH,iBAAf,gBACNG,OAAQ,EAGvB,IADA,IAAIC,EAAS,GACJjH,EAAI,EAAGA,EAdI,GAceA,IAAK,CACtC,IAAIkH,EAhBYC,KAgBJnH,EACRoH,EAjBYD,MAiBLnH,EAAI,GACLqH,KAANrH,IAAyBoH,EAAMC,OACnCJ,EAAOK,KAAK,CAACJ,EAAOE,IAGtB,IAqBIG,EAAY,GACZC,EAAclK,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM+E,IAAYzH,IAAI,SAACC,EAAGC,GAAJ,OAC1CyH,MACO,EAAK,IAAMF,EAAavH,EAAG,EAAG,IAClC0H,UAAU,IACVC,OAELH,EAAYF,KACVG,MACO,EAAG,EAAG,IACVC,UAAU,IACVC,MAGLJ,EAAY,GACZ,IAAIlB,EAAoB/I,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM+E,IAAYzH,IAAI,SAACC,EAAGC,GAAJ,OAChDyH,MACO,EAAK,IAAMF,EAAavH,EAAG,EAAG,IAClC0H,UAAU,IACVE,QAIDC,EAAkBL,EAAY1H,IAAI,SAAAd,GAAC,OAAIA,EAAE9B,MAAM,EAAG,KAEtD,SAAS4K,EAAWC,EAAQC,GAC1B,MAAO,CACLC,YAAaF,EAAOE,YAAY/K,MAAM8K,EAAM,GAAIA,EAAM,IACtDE,OAAQH,EAAOG,OAAOhL,MAAM8K,EAAM,GAAIA,EAAM,IAC5CG,SAAUJ,EAAOI,SAASjL,MAAM8K,EAAM,GAAIA,EAAM,KAIpD,SAASI,EAAcH,GAErB,IADA,IAAII,EAAgB,GACXrI,EAAI,EAAGA,EAAIiI,EAAYK,OAAQtI,IAAK,CAC3C,IAAIuI,EAAYN,EAAYjI,GAC5BqI,EAAcf,KAAKiB,EAAU,GAAIA,EAAU,GAAI,GAGjD,OADgB,IAAIC,aAAaH,GCtFnC,QDysBeI,cA9mBb,SAAAA,EAAYrL,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiL,IACjBpL,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmL,GAAA9K,KAAAH,KAAMJ,KACDQ,MAAQ,GACbP,EAAKqL,KAAOrL,EAAKqL,KAAK5K,KAAVR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACZA,EAAKsL,QAAUtL,EAAKsL,QAAQ7K,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACfA,EAAKuL,UAAYvL,EAAKuL,UAAU9K,KAAfR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACjBA,EAAKwL,iBAAmBxL,EAAKwL,iBAAiB/K,KAAtBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACxBA,EAAKyL,kBAAoBzL,EAAKyL,kBAAkBhL,KAAvBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACzBA,EAAK0L,cAAgB1L,EAAK0L,cAAcjL,KAAnBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KARJA,6EAWLuF,GACZ,IAAIoG,EAAQlC,IAAWmC,SAASzL,KAAK0L,OAAOC,KAG5C,OAFmB3L,KAAKJ,MAAMY,OAAS4E,GACC,EAAIjC,KAAKyI,IAAIJ,EAAQ,0CAIjDK,GACZ,IAAIL,EAAQlC,IAAWmC,SAASzL,KAAK0L,OAAOC,KAExCG,EAA+B,GADb3I,KAAKyI,IAAIJ,EAAQ,GAAKK,GAG5C,OADY7L,KAAKJ,MAAMY,OAASsL,wCAKhC,IAAIC,EAAeC,IAASC,UAExB7G,EAAQ2G,EAAaG,EACrBhJ,IAAM6I,EAAa7I,EAAIlD,KAAKJ,MAAMiF,MAAQ,GAAKO,EAC/C7B,GAAKwI,EAAaxI,EAAIvD,KAAKJ,MAAMY,OAAS,GAAK4E,EAC/C+G,EAAInM,KAAKoM,cAAchH,GAE3BpF,KAAK0L,OAAO9J,SAASyK,IAAInJ,EAAGK,EAAG4I,uCAUrB,IAAAtL,EAC6Bb,KAAKJ,MAAtC0M,EADIzL,EACJyL,iBAAkBC,EADd1L,EACc0L,WAExBvM,KAAKwM,MAAMC,SAAS,GAAK,IAAInD,IAiB7B,IALA,IAAIoD,EAASH,EAAWD,GACpBK,EAAgBlD,EAAOnH,IAAI,SAAAkI,GAAK,OAAIF,EAAWoC,EAAQlC,KACvDoC,EAAe,IAAItD,IAEnBuD,EAAeF,EAAc7B,OACxBvL,EAAI,EAAGA,EAAIsN,EAActN,IAAK,CAWrC,IAVA,IAAIG,EAAQiN,EAAcpN,GACtBuN,EAAepN,EAAM+K,YAAYK,OAEjCiC,EAAW,IAAIzD,IAGf0D,EAAYpC,EAAclL,EAAM+K,aAGhCwC,EAAU,IAAIjC,aAA4B,EAAf8B,GACtBtK,EAAI,EAAG0K,EAAQ,EAAGC,EAAIL,EAActK,EAAI2K,EAAG3K,IAAK0K,GAAS,EAAG,CACnE,IAAIhK,EAAMV,EApKA,GAGM,GAEC,KAgKbe,EAlKY,GAmKbJ,KAAK4C,MAAMvD,EAtKJ,IAKO,KAkKjByK,EAAQC,GAAShK,EACjB+J,EAAQC,EAAQ,GAAK3J,EAGvB,IAAI6J,EAAa1N,EAAMgL,OAAOpI,IAAI,SAAA+K,GAChC,OAAOhD,EAAgBgD,KAErBC,EAAkBzH,UAAUuH,GAC5BG,EAAS,IAAIvC,aAAasC,GAI1BE,EAAUxN,KAAKyN,SAASlO,GACxBmO,EAAS,CAHS,EAjLV,GAiLU,EAjLV,IAsLZX,EAASY,aAAa,WAAY,IAAIrE,IAAsB0D,EAAW,IACvED,EAASY,aAAa,SAAU,IAAIrE,IAAsB2D,EAAS,IACnEF,EAASY,aAAa,QAAS,IAAIrE,IAAsBiE,EAAQ,IAKjE,IAAIK,EAAW,CACbJ,QAAS,CAAElG,MAAOkG,GAClBE,OAAQ,CAAEpG,MAAMxH,OAAA+N,EAAA,EAAA/N,CAAKwJ,IAAiBoE,IACtCI,KAAM,CAAExG,MAAO,KAiCbyG,EAAW,IAAIzE,IAAqB,CACtCsE,SAAUA,EACVI,aAhCe,2WAiCfC,eApBiB,sgBAuBfC,EAAc,IAAI5E,IAAayD,EAAUgB,GAC7CnB,EAAauB,IAAID,GAGnBlO,KAAKwM,MAAMC,SAAS,GAAKG,2CAGVN,EAAkBC,GASjC,IAT6C,IAAA3L,EAAAZ,KAGzCoO,EAAcpO,KAAKwM,MAAMC,SAAS,GAClC4B,EAAkBrO,KAAKwM,MAAMC,SAAS,GAAGA,SACzCC,EAASH,EAAWD,GACpBK,EAAgBlD,EAAOnH,IAAI,SAAAkI,GAAK,OAAIF,EAAWoC,EAAQlC,KAEvDqC,EAAeF,EAAc7B,OARYwD,EAAA,SASpC/O,GACP,IAAIgP,EAAgBH,EAAY3B,SAASlN,GACrCG,EAAQiN,EAAcpN,GAEtBiP,EAAiBD,EAAcxB,SAAS0B,WAAW7M,SAAS8M,MAAMhP,QAClEiP,EAAe/D,EAAclL,EAAM+K,aAEnCmE,EAAiB,IAAIC,QAAYL,GAClCM,GAAGH,EAAc,KACjBI,OAAOF,SAAaG,OAAOC,MAC9BL,EAAeM,SAAS,WACtBX,EAAcxB,SAAS0B,WAAW7M,SAAS8M,MAAQF,EACnDD,EAAcxB,SAAS0B,WAAW7M,SAASuN,aAAc,IAE3DP,EAAelF,QAGf,IAAI0F,EAAWf,EAAgB9O,GAC3B8P,EAAUrK,MAAMsK,KAAKF,EAASrC,SAAS0B,WAAWY,QAAQX,OAE1Da,EAAsBH,EAASrC,SAAS0B,WAAW7M,SAAS8M,MAAMhP,QAKlE8P,EAAgB5E,EAJQyE,EAAQ/M,IAAI,SAAAE,GAEtC,OADY9C,EAAM+K,YAAYjI,MAI5BiN,EAAmB,IAAIzE,aAAawE,GAEpC1B,EAAO,CAAExG,MAAO,IAEhBoI,EAAK9O,EACL+O,EAAa,IAAId,QAAYf,GAC9BgB,GAHY,CAAExH,MAAO,GAGR,KACbyH,OAAOF,SAAaG,OAAOC,MAC3BW,MAAM,KACNC,WAAW,WAEA,IAANtQ,IACFmQ,EAAGpE,oBACHoE,EAAG9P,MAAMkQ,oBAAoB,OAGnCH,EAAWT,SAAS,WAClBE,EAASrB,SAASH,SAASE,KAAOA,IAGpC,IAAIiC,EAAqB,IAAIlB,QAAYU,GACtCT,GAAGW,EAAkB,KACrBV,OAAOF,SAAaG,OAAOC,MAC9Bc,EAAmBb,SAAS,WAC1BE,EAASrC,SAAS0B,WAAW7M,SAAS8M,MAAQa,EAC9CH,EAASrC,SAAS0B,WAAW7M,SAASuN,aAAc,IAEtDY,EAAmBF,WAAW,WAClB,IAANtQ,GACFyQ,WAAW,WACTN,EAAGtE,YACCgE,EAASrB,SAASH,SAASE,KAAKxG,MAAQ,EAC1CoI,EAAG9P,MAAMkQ,oBAAoB,MAE7BJ,EAAGpE,oBACHoE,EAAG9P,MAAMkQ,oBAAoB,KAE9B,KAGHV,EAASrB,SAASH,SAASE,KAAKxG,MAAQ,GAC1CyI,EAAmBE,MAAMN,GAI3BI,EAAmBrG,SAvEZnK,EAAI,EAAGA,EAAIsN,EAActN,IAAK+O,EAA9B/O,+CA2ES,IAAA2Q,EAAAlQ,KAAA8H,EACqB9H,KAAKJ,MAAtC0M,EADYxE,EACZwE,iBAAkBC,EADNzE,EACMyE,WAExBvM,KAAKwM,MAAMC,SAAS,GAAK,IAAInD,IAS7B,IAPA,IAAIoD,EAASH,EAAWD,GAEpBK,EAAgBlD,EAAOnH,IAAI,SAAAkI,GAAK,OAAIF,EAAWoC,EAAQlC,KAEvDoC,EAAe,IAAItD,IAEnBuD,EAAeF,EAAc7B,OAXfqF,EAAA,SAYT5Q,GAIP,IAHA,IAAIG,EAAQiN,EAAcpN,GAEtB8P,EAAU,GACL7M,EAAI,EAAGA,EAAI9C,EAAMiL,SAASG,OAAQtI,IACf,IAAtB9C,EAAMiL,SAASnI,IACjB6M,EAAQvF,KAAKtH,GAcjB,IAXA,IAAI4N,EAAoB,IAAIpF,aAAaqE,GAErCvC,EAAeuC,EAAQvE,OAEvBiC,EAAW,IAAIzD,IAGf0D,EAAYpC,EAAcyE,EAAQ/M,IAAI,SAAAE,GAAC,OAAI9C,EAAM+K,YAAYjI,MAG7DyK,EAAU,IAAIjC,aAA4B,EAAf8B,GACtBtK,EAAI,EAAG0K,EAAQ,EAAGC,EAAIL,EAActK,EAAI2K,EAAG3K,IAAK0K,GAAS,EAAG,CACnE,IAAImD,EAAYhB,EAAQ7M,GACpBU,EACAmN,EArWM,GAGM,GAEC,KAiWb9M,EAnWY,GAoWbJ,KAAK4C,MAAMsK,EAvWJ,IAKO,KAoWjBpD,EAAQC,GAAShK,EACjB+J,EAAQC,EAAQ,GAAK3J,EAGvB,IAAI6J,EAAaiC,EAAQ/M,IAAI,SAAAE,GAC3B,MAAO,CAAC,EAAG,EAAG,KAEZ8K,EAAkBzH,UAAUuH,GAC5BG,EAAS,IAAIvC,aAAasC,GAI1BE,EAAU0C,EAAKzC,SAASlO,GACxBmO,EAAS,CAHS,EAnXV,GAmXU,EAnXV,IAwXZX,EAASY,aAAa,WAAY,IAAIrE,IAAsB0D,EAAW,IACvED,EAASY,aAAa,SAAU,IAAIrE,IAAsB2D,EAAS,IACnEF,EAASY,aAAa,QAAS,IAAIrE,IAAsBiE,EAAQ,IACjER,EAASY,aACP,UACA,IAAIrE,IAAsB8G,EAAmB,IAM/C,IAAIxC,EAAW,CACbJ,QAAS,CAAElG,MAAOkG,GAClBE,OAAQ,CAAEpG,MAAMxH,OAAA+N,EAAA,EAAA/N,CAAKwJ,IAAiBoE,IACtCI,KAAM,CAAExG,MAAO,IAiCbyG,EAAW,IAAIzE,IAAqB,CACtCsE,SAAUA,EACVI,aAhCe,2WAiCfC,eApBiB,sgBAuBfC,EAAc,IAAI5E,IAAayD,EAAUgB,GAC7CnB,EAAauB,IAAID,IAhGV3O,EAAI,EAAGA,EAAIsN,EAActN,IAAK4Q,EAA9B5Q,GAmGTS,KAAKwM,MAAMC,SAAS,GAAKG,2CAOzB,IAJe,IAAA0D,EAAAtQ,KACX8N,EAAO,CAAExG,MAAO,GAChBiJ,EAAW,CAAEjJ,MAAO,IACpBkJ,EAASxQ,KAAKwM,MAAMC,SAAS,GAAGA,SAHrBgE,EAAA,SAINC,GACP,IAAIC,EAASH,EAAOE,GAChBf,EAAa,IAAId,QAAYf,GAC9BgB,GAAGyB,EAAU,KACbxB,OAAOF,SAAaG,OAAOC,MAC9BU,EAAWT,SAAS,WAClByB,EAAO5C,SAASH,SAASE,KAAOA,IAElC,IAAI4B,EAAKY,EACTX,EAAWE,WAAW,WACV,IAANa,GACFhB,EAAG9P,MAAMkQ,oBAAoB,KAGjCH,EAAWjG,SAdJgH,EAAI,EAAGA,EAAIF,EAAO1F,OAAQ4F,IAAKD,EAA/BC,2CAgDT,IATc,IAAAE,EAAA5Q,KAAA6Q,EACyB7Q,KAAKJ,MAAtC0M,EADQuE,EACRvE,iBAEFI,EAHUmE,EACUtE,WAEAD,GAEpBK,EAAgBlD,EAAOnH,IAAI,SAAAkI,GAAK,OAAIF,EAAWoC,EAAQlC,KAEvD6D,EAAkBrO,KAAKwM,MAAMC,SAAS,GAAGA,SAP/BqE,EAAA,SASLvR,GACP,IAAIG,EAAQiN,EAAcpN,GACtB6P,EAAWf,EAAgB9O,GAE3B8P,EAAUrK,MAAMsK,KAAKF,EAASrC,SAAS0B,WAAWY,QAAQX,OAE1DqC,EAAe1C,EACjB9O,GACAwN,SAAS0B,WAAW7L,MAAM8L,MAAMhP,QAE9B0N,EAAaiC,EAAQ/M,IAAI,SAAAE,GAC3B,IAAI6K,EAAQ3N,EAAMgL,OAAOlI,GAEzB,OADY6H,EAAgBgD,KAG1BC,EAAkBzH,UAAUuH,GAC5B4D,EAAa,IAAIhG,aAAasC,GAE9B2D,EAAc,IAAIpC,QAAYkC,GAC/BjC,GAAGkC,EAAY,KACfjC,OAAOF,SAAaG,OAAOC,MAC1B0B,EAAStC,EAAgB9O,GAC7B0R,EAAY/B,SAAS,WACnByB,EAAO5D,SAAS0B,WAAW7L,MAAM8L,MAAQqC,EACzCJ,EAAO5D,SAAS0B,WAAW7L,MAAMuM,aAAc,IAEjD,IAAIO,EAAKkB,EACTK,EAAYpB,WAAW,WACX,IAANtQ,GACFyQ,WAAW,WACTN,EAAG9P,MAAMkQ,oBAAoB,MAC5B,KAGPmB,EAAYvH,SAlCLnK,EAAI,EAAGA,EAAIoN,EAAc7B,OAAQvL,IAAKuR,EAAtCvR,8CAsCQ8F,GAAW,IAAA6L,EAAAlR,KAC5B,GACiC,OAA/BqF,EAAUiH,kBACsB,OAAhCtM,KAAKJ,MAAM0M,iBAGX6E,QAAQC,IAtiBd,SAAqBC,GACnB,IAAMC,EAAS,IAAIhI,IACnB,OAAO+H,EAAgB/O,IAAI,SAAAiP,GACzB,OAAO,IAAIJ,QAAQ,SAACK,EAASC,GAC3BH,EAAO/H,KACLgI,EACA,SAAA/D,GACEA,EAAQhE,OAAQ,EAChBgI,EAAQhE,SAEV1G,EACA,SAAAc,GAAG,OAAI6J,EAAO7J,SA2hBJ8J,CAAYtI,IAAuBuI,KAAK,SAAAlE,GAClDyD,EAAKzD,SAAWA,EAChByD,EAAK9F,YACL8F,EAAK5F,oBACL4F,EAAKtR,MAAMkQ,oBAAoB,WAE5B,GAAIzK,EAAUiH,mBAAqBtM,KAAKJ,MAAM0M,iBAAkB,CAErE,IAAIsF,EAAQ/N,EAAQwB,EAAUiH,kBAC1BuF,EAAIhO,EAAQ7D,KAAKJ,MAAM0M,kBACvBsF,EAAMxQ,UAAYyQ,EAAEzQ,QAEtB0Q,QAAQC,IAAI,qBAEHH,EAAM3Q,WAAa4Q,EAAE5Q,SAK9BjB,KAAKqL,iBACHrL,KAAKJ,MAAM0M,iBACXtM,KAAKJ,MAAM2M,YAGbqF,EAAMxO,QAAUyO,EAAEzO,OACe,MAAjCpD,KAAKJ,MAAM6F,mBAEXzF,KAAKqL,iBACHrL,KAAKJ,MAAM0M,iBACXtM,KAAKJ,MAAM2M,gBAImB,KAAjCvM,KAAKJ,MAAM6F,mBACsB,IAAhCJ,EAAUI,mBACsB,KAAjCzF,KAAKJ,MAAM6F,mBACsB,MAAhCJ,EAAUI,kBAEZzF,KAAKgS,iBAG4B,IAAjChS,KAAKJ,MAAM6F,mBACqB,MAAhCJ,EAAUI,kBAEVzF,KAAKuL,cAAcvL,KAAKJ,MAAM0M,iBAAkBtM,KAAKJ,MAAM2M,YAE1B,MAAjCvM,KAAKJ,MAAM6F,mBACqB,IAAhCJ,EAAUI,kBAEVzF,KAAKqL,iBAAiBrL,KAAKJ,MAAM0M,iBAAkBtM,KAAKJ,MAAM2M,aACrDvM,KAAKJ,MAAMwD,MAAUiC,EAAUjC,sCAIrC,IAAA6O,EACmBjS,KAAKJ,MAAvBiF,EADDoN,EACCpN,MAAOrE,EADRyR,EACQzR,OAEbR,KAAKwM,MAAQ,IAAIlD,IAEjB,IACI4I,EAASrN,EAAQrE,EAIrBR,KAAK0L,OAAS,IAAIpC,IALP,GAKqC4I,EAHrC,IACD,KAIVlS,KAAK0L,OAAO9J,SAASuK,EAAI,GAEzBnM,KAAKmS,SAAW,IAAI7I,IACpBtJ,KAAKmS,SAASC,cAAc,QAAU,GACtCpS,KAAKmS,SAASE,QAAQxN,EAAOrE,GAC7BR,KAAKsS,MAAMC,YAAYvS,KAAKmS,SAASK,YAErC,IAAIC,EAAc,IAAInJ,IACtBtJ,KAAKwM,MAAM2B,IAAIsE,GACf,IAAIC,EAAuB,IAAIpJ,IAC/BtJ,KAAKwM,MAAM2B,IAAIuE,GAEf1S,KAAK2S,QAAU3G,MAEZ4G,YAAY,CAAC5S,KAAK6S,cAAcC,KAAU9S,KAAK6S,cAAc,MAC7DE,GAAG,OAAQ/S,KAAKgT,YAAY1S,KAAKN,OAEpC,IAAIiT,EAAOjH,IAAUhM,KAAKsS,OAC1BtS,KAAKiT,KAAOA,EACZA,EAAK9S,KAAKH,KAAK2S,SACf,IAAIO,EAAgBlT,KAAK6S,cAAc7S,KAAK0L,OAAO9J,SAASuK,GACxDgH,EAAoBnH,IACrBoH,UAAUvO,EAAQ,EAAGrE,EAAS,GAC9B4E,MAAM8N,GACTlT,KAAK2S,QAAQ1G,UAAUgH,EAAME,GAE7BnT,KAAKmL,4CAILkI,sBAAsBrT,KAAKmL,SAC3B0D,WACA7O,KAAKmS,SAASmB,aAAc,EAC5BtT,KAAKmS,SAASoB,OAAOvT,KAAKwM,MAAOxM,KAAK0L,oDAItC1L,KAAKkL,sDAILlL,KAAKsS,MAAMkB,YAAYxT,KAAKmS,SAASK,6CAG9B,IAAAiB,EAAAzT,KAAA0T,EACuB1T,KAAKJ,MAA7BiF,EADC6O,EACD7O,MAAOrE,EADNkT,EACMlT,OAAQa,EADdqS,EACcrS,KACrB,OACEE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,WACVC,KAAM,EACNgD,MAAOA,EACPrE,OAAQA,EACRyB,WAAY,OACZ0R,SAAU,UAEZtS,KAAMA,GAENE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,WACVC,KAAM,EACNC,IAAK,EACL+C,MAAOA,EACPrE,OAAQA,GAEVkB,IAAK,SAAA4Q,GACHmB,EAAKnB,MAAQA,KAGjB/Q,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAAY,cACZF,QAAS,OACTC,SAAU,OACVE,QAAO,KAAAC,OAAOd,EAAO,EAAd,MACPO,SAAU,WACVC,KAAM,EACNqH,OAAQlJ,KAAKJ,MAAMgU,cAAgBvS,IAGrCE,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAAO,KAAAC,OAAOd,EAAO,EAAd,QAArB,WACAE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAAY,OACZW,MAAO,OACPiC,MAAOxD,EACPb,OAAQa,EACRwS,UAAW,WANf,KAWChL,EAAkBvG,IAAI,SAACS,EAAGP,GAAJ,OACrBjB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAAY4G,EAAkBrG,GAC9BhC,OAAQa,EACRwS,UAAW,SACXjR,MAAO,OACPiC,MAAOxD,IAGRmB,cAtmBUQ,aEvGrBoG,GAXStJ,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM,KAAK1C,IAAI,SAAAC,GAAC,OAAI,OAWVzC,OAAAiF,EAAA,EAAAjF,CAAIkF,MANX,KAMiC1C,IACnD,SAACC,EAAGC,GAAJ,SAAAL,OAAakH,iBAAb,KAAAlH,OAFsB,UAEtBA,OAA2DK,EAA3D,WAIE6H,EAAkBvK,OAAAiF,EAAA,EAAAjF,CAAIkF,MADV,KAC4B1C,IAAI,SAACC,EAAGC,GAAJ,OAC9CyH,MACO,EAAK,GAAmBzH,EAAG,EAAG,IAClC0H,UAAU,IACVE,QAuOU0J,cAnOb,SAAAA,EAAYlU,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8T,IACjBjU,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgU,GAAA3T,KAAAH,KAAMJ,KACDQ,MAAQ,CACXsK,OAAQ,KACRqJ,YAAa,MAJElU,kFAQAwF,GAAW,IAAAzE,EAAAZ,KACtBuM,EAAevM,KAAKJ,MAApB2M,WAEN,GAAIvM,KAAKJ,MAAM0M,mBAAqBjH,EAAUiH,iBAC5C,GAAmC,OAA/BjH,EAAUiH,iBAEZtM,KAAKgU,SAAS,CAAED,YAAa/T,KAAKJ,MAAM0M,uBACnC,CAIL,IAFA,IAAI2H,EAAkB1H,EAAWlH,EAAUiH,kBACvC4H,EAAmB,GACd1R,EAAI,EAAGA,EAAIyR,EAAgBtJ,SAASG,OAAQtI,IACf,IAAhCyR,EAAgBtJ,SAASnI,IAC3B0R,EAAiBpK,KAAKtH,GAG1B,IAAIkK,EAASH,EAAWvM,KAAKJ,MAAM0M,kBAC/B6H,EAAaD,EAAiB5R,IAAI,SAACC,EAAGC,GAAJ,OAAUkK,EAAOhC,OAAOnI,KAC9DvC,KAAKgU,SAAS,CAAEtJ,OAAQyJ,IAG5B,GACmC,IAAjCnU,KAAKJ,MAAM6F,mBACqB,IAAhCJ,EAAUI,kBACV,CACA,IAAIiK,EAAK1P,KACTgQ,WAAW,WACTN,EAAGsE,SAAS,CACVD,YAAanT,EAAKhB,MAAM0M,iBACxB5B,OAAQ,QAET,uCAIE,IAAAwF,EAAAlQ,KAAAa,EAWHb,KAAKJ,MATPiF,EAFKhE,EAELgE,MACArE,EAHKK,EAGLL,OACAa,EAJKR,EAILQ,KACAkL,EALK1L,EAKL0L,WACAD,EANKzL,EAMLyL,iBACA7G,EAPK5E,EAOL4E,kBACA2O,EARKvT,EAQLuT,cACAhR,EATKvC,EASLuC,MACAiR,EAVKxT,EAULwT,YAGEH,EAAmB,GAEnBxH,EAASH,EAAWvM,KAAKI,MAAM2T,aACnC,GAAIrH,EACF,IAAK,IAAIlK,EAAI,EAAGA,EAAIkK,EAAO/B,SAASG,OAAQtI,IACf,IAAvBkK,EAAO/B,SAASnI,IAClB0R,EAAiBpK,KAAKtH,GAK5B,IACI8R,EAASjT,EAAO,EAChBkT,EAAelT,EAAO,EACtBmT,GACD3P,EAAuB,EAAf0P,EAAmB,EAAU,EAAND,GAJf,EAMfG,EAAeD,EAEfE,EAAgBR,EAAiB5R,IAAI,SAAA+N,GACvC,IACIsE,EAAetE,EAjGP1G,KAoGZ,MAAO,CAJUxG,KAAK4C,MAAMsK,EAhGhB1G,MAkGCgL,EAnGD,GAoGFxR,KAAK4C,MAAM4O,EApGT,OAyGW,OAArBrI,GACgB4H,EAAiB5R,IACjC,SAACC,EAAGC,GAAJ,OAAU+J,EAAWD,GAAkB5B,OAAOlI,KAIlD,IAAI4C,EAAQoP,EA5GQ,GA8GhBzM,EAAiB3E,EAIrB,OAHIqC,EAAoB,GAAKA,EAAoB,MAC/CsC,EAAiB5E,KAAK8F,IAAI,EAAGlB,EAAiB,IAG9CxG,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,WACVgT,MAAO,EACP9S,IAAKsS,EACLvP,MAAOA,EACPrE,OAAQA,EACRyB,WAAY,OACZ0R,SAAU,WAGW,IAAtBlO,EACClE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLO,QAASb,EAAO,IAGlBE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLO,QAASb,EAAO,IAFpB,kFASA,KACJE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLkT,QACwB,IAAtBpP,GACsB,MAAtBA,GACA4O,IAAgBtM,EACZ,EACA,EACN+M,WAAY,sBACZ5S,QAASb,EAAO,EAChBO,SAAU,aAGZL,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLI,QAAS,OACTqG,eAAgB,gBAChBxG,SAAU,WACVC,KAAM,EACNC,IAAK,EACL+C,MAAOA,EACP5C,WAAY,OACZC,QAAO,GAAAC,OAAKd,EAAO,EAAZ,OAAAc,OAAmBd,EAAO,EAA1B,QAGTE,EAAAC,EAAAC,cAAA,WAAMgE,EAAoB,EAAI,WAAa,UAA3C,KACAlE,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLiT,MAAO,EACP9S,IAAKsS,EACLvP,MAAOA,EACPrE,OAAQA,EAASa,EAAO,EACxB0T,WAAmB,EAAP1T,EACZY,WAAY,OACZ0R,SAAU,SAGZpS,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLI,QAAS,OACTgT,WAA2B,EAAfR,EACZS,cAA8B,EAAfT,EACfU,oBAAmB,UAAA9S,OArGZ,EAqGY,MAAAA,OAA6BqS,EAA7B,OACnBU,cAAeZ,EACfa,WAAqB,EAATb,IAGbI,EAAc5J,OAAS,EACpB4J,EAAcpS,IAAI,SAACQ,EAAGN,GACpB,IAAI6K,EACoB,OAAtB6C,EAAK9P,MAAMsK,QACXwF,EAAKtQ,MAAM6F,kBAAoB,IAC3ByK,EAAK9P,MAAMsK,OAAOlI,GAClB,IACFP,EACoB,OAAtBiO,EAAK9P,MAAMsK,QACXwF,EAAKtQ,MAAM6F,kBAAoB,IAC3B4E,EAAgB6F,EAAK9P,MAAMsK,OAAOlI,IAClC,OACN,OACEjB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLkD,MAAO2P,EACPhU,OAAQiU,EAAepT,EACvBY,WAAYA,EACZW,MAAO,OACPiR,UAAW,SACXiB,WAAY,4BAGdvT,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLyT,gBAAe,OAAAjT,OACbiH,EAAqBtG,EAAE,IADV,KAGfuS,eAAc,GAAAlT,OAzNjB,KAyNsBiD,EAAL,OAAAjD,OAzNjB,KA0N6BiD,EADZ,MAGdkQ,mBAAkB,IAAAnT,OAAMW,EAAE,GACxBsC,EA/NN,GA8NsB,QAAAjD,OAEQW,EAAE,GAC1BsC,EAjON,GA8NsB,MAKlBP,MAAO2P,EACPhU,OAAQiU,EACRc,eAAgB,eAGpBhU,EAAAC,EAAAC,cAAA,WAAM4L,MAIZ,gBA3NKrK,aC2CRwS,mLAjEJ,IAAA3U,EAqBHb,KAAKJ,MAnBPiF,EAFKhE,EAELgE,MACArE,EAHKK,EAGLL,OACAa,EAJKR,EAILQ,KACAL,EALKH,EAKLG,WACAG,EANKN,EAMLM,gBACAF,EAPKJ,EAOLI,SACAwU,EARK5U,EAQL4U,iBACAC,EATK7U,EASL6U,oBACApJ,EAVKzL,EAULyL,iBACAC,EAXK1L,EAWL0L,WACAoJ,EAZK9U,EAYL8U,aACAlM,EAbK5I,EAaL4I,OACAhE,EAdK5E,EAcL4E,kBACAqK,EAfKjP,EAeLiP,oBACA8F,EAhBK/U,EAgBL+U,cACAxB,EAjBKvT,EAiBLuT,cACAR,EAlBK/S,EAkBL+S,cACAxQ,EAnBKvC,EAmBLuC,MACAiR,EApBKxT,EAoBLwT,YAIF,OACE9S,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,SAAU,aACtBL,EAAAC,EAAAC,cAACoU,EAAD,CACEhR,MAAOA,EACPrE,OAAQA,EACRa,KAAMA,EACNoU,iBAAkBA,EAClBzU,WAAYA,EACZG,gBAAiBA,EACjBF,SAAUA,EACVsL,WAAYA,EACZmJ,oBAAqBA,EACrBpJ,iBAAkBA,EAClB7G,kBAAmBA,EACnBqK,oBAAqBA,EACrB8F,cAAeA,EACfhC,cAAeA,EACfxQ,MAAOA,IAGP7B,EAAAC,EAAAC,cAACqU,EAAD,CACEjR,MAtBa,IAuBbrE,OACEA,EAASR,KAAKJ,MAAMgU,cAAuB,EAAPvS,EAAW+S,EAEjD/S,KAAMA,EACNsU,aAAcA,EACdpJ,WAAYA,EACZD,iBAAkBA,EAClB7C,OAAQA,EACRhE,kBAAmBA,EACnB2O,cAAeA,EACfhR,MAAOA,EACPiR,YAAaA,YA1DQrR,aCuElB+S,mLAxEJ,IAGHC,EACAC,EAJGpW,EAAAG,KAAAa,EAC+Cb,KAAKJ,MAArD6F,EADC5E,EACD4E,kBAAmBpE,EADlBR,EACkBQ,KAAMgT,EADxBxT,EACwBwT,YAAajR,EADrCvC,EACqCuC,MAIlB,IAAtBqC,GACFuQ,EAAc,aACdC,EAAa,MACkB,KAAtBxQ,GACTuQ,EAAc,eACdC,EAAa,MACkB,IAAtBxQ,GACTuQ,EAAc,gBACdC,EAAa,KACkB,MAAtBxQ,GACTuQ,EAAc,cACdC,EAAa,MACkB,IAAtBxQ,GACTuQ,EAAc,cACdC,EAAa,MACkB,MAAtBxQ,GACTuQ,EAAc,cACdC,EAAa,MACkB,MAAtBxQ,IACTuQ,EAAc,iBACdC,EAAa,MAGf,IAAIlO,EAAiB3E,EAIrB,OAHIqC,EAAoB,GAAKA,EAAoB,MAC/CsC,EAAiB5E,KAAK8F,IAAI,EAAGlB,EAAiB,IAG9CxG,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLI,QAAS,OACTqG,eAAgB,gBAChBnG,WAAY,OACZL,SAAU,WACVsH,OAAQlJ,KAAKJ,MAAMgU,cACnBgB,MAAO,IAGTrT,EAAAC,EAAAC,cAAA,WACG4S,IAAgBtM,EACfxG,EAAAC,EAAAC,cAAA,UACEE,MAAO,CACLkD,MAAO,IACPrE,OAAQ,EAAIa,EACZY,WAA2B,OAAfgU,EAAsB,OAAS,QAC3CrT,MAAO,QACPiR,UAAW,OACXqC,YAAa7U,EAAO,EACpB8G,OAAuB,OAAf8N,EAAsB,UAAY,UAC1CrS,eAA+B,OAAfqS,EAAsB,OAAS,aAEjDE,SAAyB,OAAfF,EACVtT,QAAS,WACY,OAAfsT,GACFpW,EAAKD,MAAMkQ,oBAAoBmG,KAIlCD,GAED,cAlEUhT,aCiEToT,cAhEb,SAAAA,EAAYxW,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoW,IACjBvW,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsW,GAAAjW,KAAAH,KAAMJ,KACDQ,MAAQ,CACXiW,MAAO,GAHQxW,mFAQjB,IAAIyW,EAAU,EACVD,EAAQ,EACR3G,EAAK1P,KACT,SAASuW,IACPD,GAAW,GACX,IAAIE,EAAcrT,KAAK4C,MAAMuQ,GACzBE,IAAgBH,IAClBA,EAAQG,GAEV9G,EAAGsE,SAAS,CAAEqC,MAAOA,IACjBA,EAAQ,IACVhD,sBAAsBkD,GAEtBvG,WAAW,WACTN,EAAG9P,MAAM6W,gBACR,KAGPzG,WAAW,kBAAMqD,sBAAsBkD,IAAc,sCAG9C,IAAA1V,EACYb,KAAKJ,MAAlByB,EADCR,EACDQ,KAAMuH,EADL/H,EACK+H,GACZ,OACErH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLnB,OAAQa,EACRwD,MAAK,GAAA1C,OAAK,IAAL,KACLuU,UAAWrV,EAAO,EAClBY,WAAY,SAGdV,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLnB,OAAQa,EACRwD,MAAK,GAAA1C,OAAMnC,KAAKI,MAAMiW,MAAQ,IAAQ,IAAjC,KACL1C,SAAU,WAGZpS,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLnB,OAAQa,EACRwD,MAAO1B,KAAKwT,IAAI,IAAK/N,GAAa,EAAPvH,EAC3BY,WAAU,6BAAAE,OACRnC,KAAKJ,MAAMmJ,gBADH,kBArDN/F,aJShB+G,EAAY,EACZ5I,EAAkBrB,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM+E,IAAYzH,IAAI,SAACC,EAAGC,GAAJ,OAC9CyH,MACc,GAAKF,EAAavH,EAAxB,GAA2B,EAAG,IACnC0H,UAAU,IACVE,QAWDX,EAAS,GACJjH,EAAI,EAAGA,EANI,GAMeA,IAAK,CACtC,IAAIkH,EARYC,KAQJnH,EACRoH,GATYD,MASLnH,EAAI,GACLqH,KAANrH,IAAyBoH,GAAMC,OACnCJ,EAAOK,KAAK,CAACJ,EAAOE,KAGtB,IAII+L,GAHuB7V,OAAAiF,EAAA,EAAAjF,CAAIkF,MAdX,KAciC1C,IACnD,SAACC,EAAGC,GAAJ,SAAAL,OAAakH,iBAAb,KAAAlH,OAFsB,UAEtBA,OAA2DK,EAA3D,UAEsCF,IAAI,SAAAsU,GAC1C,IAAIC,EAAMC,SAASrV,cAAc,OAEjC,OADAoV,EAAID,IAAMA,EACHC,IAGT9M,EAAY,GACZ,IAAIlB,GAAoB/I,OAAAiF,EAAA,EAAAjF,CAAIkF,MAAM+E,IAAYzH,IAAI,SAACC,EAAGC,GAAJ,OAChDyH,MACO,EAAK,IAAMF,EAAavH,EAAG,EAAG,IAClC0H,UAAU,IACVE,QAEDrB,GAAkBF,GAAkBhG,OAAO,SAACkU,EAAOC,EAAMxU,GAC3D,OACEuU,EACAC,EACA,IACA7T,KAAKC,MAAOZ,EAAIuH,EAAa,MAC5BvH,IAAMuH,EAAY,EAAI,IAAM,QAE9B,IA6OYkN,eAtOb,SAAAA,EAAYrX,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiX,IACjBpX,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmX,GAAA9W,KAAAH,KAAMJ,KACDQ,MAAQ,CACXwI,GAAI,KACJsO,GAAI,KACJ9C,cAAe,KACfR,cAAe,KACfnO,kBAAmB,EACnBmQ,eAAe,EACf9M,qBAAqB,GAEvBjJ,EAAKwS,QAAUxS,EAAKwS,QAAQ/R,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACfA,EAAKc,gBAAkBd,EAAKc,gBAAgBL,KAArBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACvBA,EAAK8I,gBAAkB9I,EAAK8I,gBAAgBrI,KAArBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACvBA,EAAKiQ,oBAAsBjQ,EAAKiQ,oBAAoBxP,KAAzBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAC3BA,EAAK4W,aAAe5W,EAAK4W,aAAanW,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAfHA,+EAkBHW,GACdR,KAAKgU,SAAS,CAAEI,cAAe5T,4CAGjBA,GACdR,KAAKgU,SAAS,CAAEJ,cAAepT,sCAI/BR,KAAKgU,SAAS,CAAEpL,GAAIuO,OAAOC,WAAYF,GAAIC,OAAOE,2DAIlDrX,KAAKqS,sDAIL8E,OAAOG,iBAAiB,SAAUtX,KAAKqS,oDAGtBhN,EAAWkS,IAEG,IAA7BvX,KAAKI,MAAMwV,eACXvQ,EAAUiH,mBAAqBtM,KAAKJ,MAAM0M,kBAE1CtM,KAAKgU,SAAS,CAAE4B,eAAe,mDAKjCuB,OAAOK,oBAAoB,SAAUxX,KAAKqS,qDAGxBoF,GACH,MAAXA,GACFzX,KAAKgU,SAAS,CAAEvO,kBAAmBgS,EAAQ3O,qBAAqB,IAChE9I,KAAKJ,MAAM4F,YAAYxF,KAAKJ,MAAMwD,MAAQ,IAE1CpD,KAAKgU,SAAS,CAAEvO,kBAAmBgS,2CAKrCzX,KAAKgU,SAAS,CACZvO,kBAAmB,EACnBmQ,eAAe,EACf9M,qBAAqB,qCAIhB,IAAA4O,EASH1X,KAAKI,MAPPwI,EAFK8O,EAEL9O,GACAsO,EAHKQ,EAGLR,GACA9C,EAJKsD,EAILtD,cACAR,EALK8D,EAKL9D,cACAgC,EANK8B,EAML9B,cACA9M,EAPK4O,EAOL5O,oBACArD,EARKiS,EAQLjS,kBARK5E,EAsBHb,KAAKJ,MAXPwB,EAXKP,EAWLO,QACAH,EAZKJ,EAYLI,SACAmC,EAbKvC,EAaLuC,MACAtC,EAdKD,EAcLC,SACAE,EAfKH,EAeLG,WACAD,EAhBKF,EAgBLE,cACAG,EAjBKL,EAiBLK,eACAqL,EAlBK1L,EAkBL0L,WACAmJ,EAnBK7U,EAmBL6U,oBACApJ,EApBKzL,EAoBLyL,iBACAhH,EArBKzE,EAqBLyE,kBASF,OAAc,OAAPsD,EACLrH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEO,QAASb,OAAvB,qBAEAE,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLkD,MAAO+D,EACPpI,OAAQ0W,EACRvD,SAAU,SACV/R,SAAU,aAGZL,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0G,SAAA,KACE3G,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,QACVE,IAAK,EACL8S,MAAO,EACP1S,QAASb,KACTsW,OAAQ,IACR1V,WAAY,MACZF,QAAS,SAGV0D,GAEgB,OAAlBmO,GAA4C,OAAlBQ,EACzB7S,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,WAAY,QACZzB,OAAQ0W,IAGV3V,EAAAC,EAAAC,cAACmW,EAAD,CACE/S,MAAO+D,EACPpI,OAAQ0W,EACR7V,KAvCDwW,GAwCC7W,WAAYA,EACZG,gBAAiBA,EACjBF,SAAUA,EACVsL,WAAYA,EACZmJ,oBAAqBA,EACrBpJ,iBAAkBA,EAClBsJ,cAAeA,EACfD,aAAcA,GACdlM,OAAQA,EACRhE,kBAAmBzF,KAAKI,MAAMqF,kBAC9BqK,oBAAqB9P,KAAK8P,oBAC1B8D,cAAeA,EACfxQ,MAAOA,EACPgR,cAAeA,EACfC,YApDM,KAuDR,KACe,OAAlBT,EACCrS,EAAAC,EAAAC,cAACqW,EAAD,CACErS,kBAAmBzF,KAAKI,MAAMqF,kBAC9BpE,KA7DCwW,GA8DDjE,cAAeA,EACf9D,oBAAqB9P,KAAK8P,oBAC1BuE,YA9DQ,EA+DRjR,MAAOA,IAEP,KACJ7B,EAAAC,EAAAC,cAACsW,EAAD,CACEjX,SAAUA,EACVC,cAAeA,EACfC,WAAYA,EACZC,SAAUA,EACVE,gBAAiBA,EACjBD,eAAgBA,EAChBE,QAASA,EACTE,YAAaA,EACbX,gBAAiBX,KAAKW,gBACtBoI,gBAAiBA,GACjB1H,KA/EGwW,GAgFHpS,kBAAmBzF,KAAKI,MAAMqF,oBAEb,OAAlB2O,EACC7S,EAAAC,EAAAC,cAACuW,EAAD,CACE5U,MAAOA,EACPwF,GAAIA,EACJvH,KAtFCwW,GAuFD7W,WAAYA,EACZG,gBAAiBA,EACjBF,SAAUA,EACV0H,gBAAiB3I,KAAK2I,gBACtBnD,YAAaxF,KAAKJ,MAAM4F,YACxBuD,gBAAiBA,GACjBF,kBAAmBA,GACnBpD,kBAAmBzF,KAAKI,MAAMqF,kBAC9BqK,oBAAqB9P,KAAK8P,oBAC1BhH,oBAAqBA,EACrBxD,kBAAmBA,IAEnB,KACHtF,KAAKI,MAAM0I,oBACVvH,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,SAAU,QACVC,KAAM,EACNC,IAAK,EACL+C,MAAO,QACPrE,OAAQ,QACRuB,QAAS,OACTkW,aAAc,SACdC,WAAY,WAGd3W,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLkD,MAAO1B,KAAKwT,IAAI,IAAK/N,GACrB3G,WAAY,OACZC,QArHH2V,KAwHCtW,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAC0W,EAAD,CACE9W,KA1HHwW,GA2HG9O,gBAAiBA,GACjBH,GAAIA,EACJ6N,aAAczW,KAAKyW,iBAIvB,cAhOOzT,aK7DjBlC,GAAW,CAAC,QAAS,YAAa,WAClCE,GAAa,CAAC,SAAU,UAAW,WAAY,YAE/CoX,GAAqB,CACvB,qBACA,sBACA,uBACA,gCAGF,SAASC,GAAGjX,EAASH,EAAUmC,GAC7B,SAAAjB,OAAUf,EAAV,KAAAe,OAAqBlB,EAArB,KAAAkB,OAAiCiB,OAsKpBkV,eAhKb,SAAAA,EAAY1Y,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsY,IACjBzY,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwY,GAAAnY,KAAAH,KAAMJ,KACDQ,MAAQ,CACXmM,WAAY,GACZnL,QAASN,GAAS,GAClBG,SAAUD,GAAW,GACrBoC,MAAO,EACPsS,oBAAqB,KACrBpJ,iBAAkB,KAClBhH,kBAAmB,GAErBzF,EAAK0Y,gBAAkB1Y,EAAK0Y,gBAAgBjY,KAArBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACvBA,EAAK2Y,UAAY3Y,EAAK2Y,UAAUlY,KAAfR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACjBA,EAAK4Y,iBAAmB5Y,EAAK4Y,iBAAiBnY,KAAtBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACxBA,EAAK2F,YAAc3F,EAAK2F,YAAYlF,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAdFA,2EAiBPuD,GACV,IAAIsV,EAAcvV,KAAK8F,IAAIjJ,KAAKI,MAAMkF,kBAAmBlC,GACzDpD,KAAKgU,SAAS,CAAE5Q,MAAOA,EAAOkC,kBAAmBoT,IACjD1Y,KAAKyY,iBAAiBzY,KAAKI,MAAMgB,QAASpB,KAAKI,MAAMa,SAAUmC,yCAGnD8J,GACZlN,KAAKgU,SAAS,CAAE5S,QAASN,GAASoM,GAAQ5H,kBAAmB,IAC7DtF,KAAKyY,iBACH3X,GAASoM,GACTlN,KAAKI,MAAMa,SACXjB,KAAKI,MAAMgD,8CAIA8J,GACblN,KAAKgU,SAAS,CAAE/S,SAAUD,GAAWkM,KACrClN,KAAKyY,iBACHzY,KAAKI,MAAMgB,QACXJ,GAAWkM,GACXlN,KAAKI,MAAMgD,gDAIEhC,EAASH,EAAUmC,GAAO,IACnCmJ,EAAevM,KAAKI,MAApBmM,WACFzI,EAASuU,GAAGjX,EAASH,EAAUmC,GACnCpD,KAAKgU,SAAS,CAAE0B,oBAAqB5R,SACVgD,IAAvByF,EAAWzI,GACb9D,KAAKgU,SAAS,CAAE1H,iBAAkBxI,IAElC9D,KAAKwY,UAAUpX,EAASH,EAAUmC,2CAItBmJ,GACd,IAAIoM,EAAKpM,EAAWjK,IAAI,SAAAsW,GAAC,OAAIzV,KAAK0V,IAAID,EAAE,MACpCE,EAAKvM,EAAWjK,IAAI,SAAAsW,GAAC,OAAIzV,KAAK0V,IAAID,EAAE,MACpCG,EAAQlT,MAAM8S,GACdK,EAAQnT,MAAMiT,GACd7P,EAAM9F,KAAK8F,IAAI8P,EAAOC,GACtB5T,EAAQ4G,MAETiN,OAAO,EAAEhQ,EAAKA,IACduB,MAAM,EAAE,GAAI,KAEf,OADwB+B,EAAWjK,IAAI,SAAAsW,GAAC,MAAI,CAACxT,EAAMwT,EAAE,IAAKxT,EAAMwT,EAAE,yCAI1DxX,EAASH,EAAUmC,GAAO,IAAAxC,EAAAZ,KAC9BkZ,EAAG,GAAA/W,OAAMkH,iBAAN,KAAAlH,OACLiW,GAAmBpX,GAAWmY,QAAQlY,KADjCkB,OAEJiB,EAFI,SAGPgW,MAAMF,GACHvH,KAAK,SAAA0H,GAAQ,OAAIA,EAASC,SAC1B3H,KAAK,SAAA4H,GAEJ,IAAI9O,EAAc8O,EAAE9O,YAChBkO,EAAKlO,EAAYnI,IAAI,SAAAsW,GAAC,OAAIzV,KAAK0V,IAAID,EAAE,MACrCE,EAAKrO,EAAYnI,IAAI,SAAAsW,GAAC,OAAIzV,KAAK0V,IAAID,EAAE,MACrCG,EAAQlT,MAAM8S,GACdK,EAAQnT,MAAMiT,GACd7P,EAAM9F,KAAK8F,IAAI8P,EAAOC,GACtB5T,EAAQ4G,MAETiN,OAAO,EAAEhQ,EAAKA,IACduB,MAAM,EAAE,GAAI,KACXgP,EAAS/O,EAAYnI,IAAI,SAAAsW,GAAC,MAAI,CAACxT,EAAMwT,EAAE,IAAKxT,EAAMwT,EAAE,OACpDrO,EAAS,GACbA,EAAOE,YAAc+O,EACrBjP,EAAOI,SAAW4O,EAAE9B,OACpBlN,EAAOG,OAAS6O,EAAE7O,OAClB,IAAI+O,EAAmBpB,GAAGjX,EAASH,EAAUmC,GAC7CxC,EAAKoT,SAAS,CACZ1H,iBAAkBmN,EAClBlN,WAAYzM,OAAO4Z,OAAO,GAAI9Y,EAAKR,MAAMmM,WAA7BzM,OAAA6Z,EAAA,EAAA7Z,CAAA,GACT2Z,EAAmBlP,oDAgDV,IAAAmN,EACiB1X,KAAKI,MAAlCgB,EADYsW,EACZtW,QAASH,EADGyW,EACHzW,SAAUmC,EADPsU,EACOtU,MACzBpD,KAAKyY,iBAAiBrX,EAASH,EAAUmC,oCAIzC,OACE7B,EAAAC,EAAAC,cAACmY,GAAD9Z,OAAA4Z,OAAA,GACM1Z,KAAKI,MADX,CAEEU,SAAUA,GACVE,WAAYA,GACZD,cAAef,KAAKe,cAAcT,KAAKN,MACvCkB,eAAgBlB,KAAKkB,eAAeZ,KAAKN,MACzCwF,YAAaxF,KAAKwF,YAAYlF,KAAKN,gBA3JxBgD,aCXJ6W,2LAJX,OAAOtY,EAAAC,EAAAC,cAACqY,GAAD,aAFO9W,cCQE+W,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAAS5G,OAAOhS,EAAAC,EAAAC,cAAC2Y,GAAD,MAAStD,SAASuD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7I,KAAK,SAAA8I,GACjCA,EAAaC","file":"static/js/main.1b3b1655.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectStrategy(i)\n                      }}\n                    >\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n","export let mnist = {\n  random: {\n    accuracy: [\n      0.9539,\n      0.9569,\n      0.9595,\n      0.9652,\n      0.9651,\n      0.9687,\n      0.9679,\n      0.9678,\n      0.9699,\n    ],\n    num_labeled: [\n      10000.0,\n      11000.0,\n      12000.0,\n      13000.0,\n      14000.0,\n      15000.0,\n      16000.0,\n      17000.0,\n      18000.0,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.953,\n      0.9664,\n      0.971,\n      0.9746,\n      0.9791,\n      0.9776,\n      0.979,\n      0.9805,\n      0.9795,\n    ],\n    num_labeled: [\n      10000.0,\n      11000.0,\n      12000.0,\n      13000.0,\n      14000.0,\n      15000.0,\n      16000.0,\n      17000.0,\n      18000.0,\n    ],\n  },\n  deepfool: {\n    accuracy: [\n      0.954,\n      0.9656,\n      0.9703,\n      0.9762,\n      0.9782,\n      0.9805,\n      0.9765,\n      0.9819,\n      0.9816,\n    ],\n    num_labeled: [\n      10000.0,\n      11000.0,\n      12000.0,\n      13000.0,\n      14000.0,\n      15000.0,\n      16000.0,\n      17000.0,\n      18000.0,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.9639,\n      0.9703,\n      0.9772,\n      0.978,\n      0.9813,\n      0.9836,\n      0.9837,\n      0.9847,\n      0.9848,\n    ],\n    num_labeled: [\n      10000.0,\n      11000.0,\n      12000.0,\n      13000.0,\n      14000.0,\n      15000.0,\n      16000.0,\n      17000.0,\n      18000.0,\n    ],\n  },\n}\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { mnist } from './mnist_strategies.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.strategy_explored !== prevProps.strategy_explored) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n    } = this.props\n\n    let results = mnist[strategy]\n\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 4\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    let x_padding = cell_width / 2\n\n    let all_strat_results = strategies.map(s => _.min(mnist[s].accuracy))\n\n    let rounded_min = Math.floor(_.min(all_strat_results) * 10) / 10\n\n    let rounds_limit = strategy_explored\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    let non_active_strats = strategies.filter(s => s !== strategy)\n\n    for (let strat of non_active_strats) {\n      let these_results = mnist[strat]\n\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#666'\n      ctx.fillStyle = '#666'\n      ctx.beginPath()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        drawLine(\n          ctx,\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          i === 0\n        )\n      }\n      ctx.stroke()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        ctx.beginPath()\n        ctx.arc(\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          point_size,\n          0,\n          2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n\n    point_size = 6\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n    } = this.props\n\n    let results = mnist[strategy]\n\n    let label_round = round\n    let cell_width = 100\n    if (transition_status > 1) label_round = round + 1\n    return (\n      <div style={{}}>\n        <div style={{ display: 'inline-flex', pointerEvents: 'auto' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? <span>Round {round + 1}</span> : ' '}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {toPercent2(results.accuracy[round])}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => (\n              <div\n                onClick={() => {\n                  this.handleRound(i)\n                }}\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: cell_width * i,\n                  width: cell_width,\n                  height: height - grem * 2,\n                  cursor: i === round ? 'default' : 'pointer',\n                }}\n              />\n            ))}\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            pointerEvents: 'auto',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            100,000 points, {comma(results.num_labeled[label_round])} labelled (\n            {toPercent2(results.num_labeled[label_round] / 1000000)})\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom: 0,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet loader = new THREE.TextureLoader()\nlet circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\ncircle_texture.flipY = false\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\nlet color_num = 10\nlet color_array = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .gl()\n)\ncolor_array.push(\n  chroma\n    .hsl(0, 0, 0.5)\n    .luminance(0.1)\n    .gl()\n)\n// console.log(color_array)\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// let status_to_color = color_array.map(a => a.map(c => c / 255))\nlet status_to_color = color_array.map(a => a.slice(0, 3))\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    // let new_size = zoomScaler(z)\n    // let point_group = this.scene.children[0].children\n    // for (let c = 0; c < point_group.length; c++) {\n    //   point_group[c].material.uniforms.size.value = new_size\n    // }\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 20 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings) {\n    let me = this\n\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      let position_tween = new TWEEN.Tween(start_position)\n        .to(end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      position_tween.onUpdate(function() {\n        back_existing.geometry.attributes.position.array = start_position\n        back_existing.geometry.attributes.position.needsUpdate = true\n      })\n      position_tween.start()\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size = { value: 20 }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(400)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0.5)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            me.addPoints()\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [1, 1, 1]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: 20 }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          me.props.setTransitionStatus(1)\n        }\n      })\n      size_tween.start()\n    }\n\n    // let opacity = { value: 0 }\n    // let end_opacity = { value: 1 }\n    // for (let g = 0; g < groups.length; g++) {\n    //   let points = groups[g]\n    //   points.material.uniforms.size = { value: 20 }\n    //   let opacity_tween = new TWEEN.Tween(opacity)\n    //     .to(end_opacity, 800)\n    //     .easing(TWEEN.Easing.Linear.None)\n    //   opacity_tween.onUpdate(function() {\n    //     console.log(opacity.value)\n    //     points.material.opacity = opacity.value\n    //   })\n    //   let me = this\n    //   opacity_tween.onComplete(function() {\n    //     if (g === 0) {\n    //       me.props.setTransitionStatus(1)\n    //     }\n    //   })\n    //   opacity_tween.start()\n    // }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    let loaded = embeddings[loaded_embedding]\n\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      let me = this\n      color_tween.onComplete(function() {\n        if (s === 0) {\n          setTimeout(function() {\n            me.props.setTransitionStatus(2.3)\n          }, 0)\n        }\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.loaded_embedding === null &&\n      this.props.loaded_embedding !== null\n    ) {\n      // first load\n      Promise.all(getTextures(mnist_tile_locations)).then(textures => {\n        this.textures = textures\n        this.addPoints()\n        this.addSelectedPoints()\n        this.props.setTransitionStatus(0.5)\n      })\n    } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      let prevd = decodeS(prevProps.loaded_embedding)\n      let d = decodeS(this.props.loaded_embedding)\n      if (prevd.dataset !== d.dataset) {\n        // different dataset\n        console.log('different dataset')\n        // this.addPoints()\n      } else if (prevd.strategy !== d.strategy) {\n        // new strategy, we should transition\n        // if (this.props.transition_status === 1) {\n        // this.labelSelected()\n        // }\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings\n        )\n      } else if (\n        prevd.round !== d.round &&\n        this.props.transition_status !== 1.5\n      ) {\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings\n        )\n      }\n    } else if (\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 0) ||\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 2.6)\n    ) {\n      this.revealSelected()\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.round !== prevProps.round) {\n    }\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'auto',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: this.props.footer_height + grem,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Labels:</div>\n          <div\n            style={{\n              background: '#888',\n              color: '#111',\n              width: grem,\n              height: grem,\n              textAlign: 'center',\n            }}\n          >\n            ?\n          </div>\n          {color_array_hexes.map((c, i) => (\n            <div\n              style={{\n                background: color_array_hexes[i],\n                height: grem,\n                textAlign: 'center',\n                color: '#111',\n                width: grem,\n              }}\n            >\n              {i}\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              padding: grem / 2,\n              zIndex: 999,\n              background: 'red',\n              display: 'none',\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                mnist_images={mnist_images}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n                round_limit={round_limit}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <div\n                style={{\n                  width: Math.min(500, ww),\n                  background: '#666',\n                  padding: grem,\n                }}\n              >\n                <div>Getting labels for 1,000 selected points...</div>\n                <Timer\n                  grem={grem}\n                  gradient_string={gradient_string}\n                  ww={ww}\n                  labelsGotten={this.labelsGotten}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\n\nlet image_num = 40\nlet images = [...Array(40)].map(n => null)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet color_num = 10\nlet status_to_color = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\nclass Selected extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      labels: null,\n      prev_loaded: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { embeddings } = this.props\n\n    if (this.props.loaded_embedding !== prevProps.loaded_embedding) {\n      if (prevProps.loaded_embedding === null) {\n        // first real loaded set the state\n        this.setState({ prev_loaded: this.props.loaded_embedding })\n      } else {\n        // use the statuses from previous\n        let prev_embeddings = embeddings[prevProps.loaded_embedding]\n        let selected_indexes = []\n        for (let i = 0; i < prev_embeddings.statuses.length; i++) {\n          if (prev_embeddings.statuses[i] === 1) {\n            selected_indexes.push(i)\n          }\n        }\n        let loaded = embeddings[this.props.loaded_embedding]\n        let new_labels = selected_indexes.map((n, i) => loaded.labels[n])\n        this.setState({ labels: new_labels })\n      }\n    }\n    if (\n      this.props.transition_status === 0 &&\n      prevProps.transition_status !== 0\n    ) {\n      let me = this\n      setTimeout(() => {\n        me.setState({\n          prev_loaded: this.props.loaded_embedding,\n          labels: null,\n        })\n      }, 800)\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      embeddings,\n      loaded_embedding,\n      transition_status,\n      header_height,\n      round,\n      round_limit,\n    } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[this.state.prev_loaded]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let grid_columns = 4\n    let gutter = grem / 4\n    let side_padding = grem / 4\n    let image_width =\n      (width - side_padding * 2 * 2 - gutter * (grid_columns - 1)) /\n      grid_columns\n    let image_height = image_width\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    let selected_labels = null\n    if (loaded_embedding !== null) {\n      selected_labels = selected_indexes.map(\n        (n, i) => embeddings[loaded_embedding].labels[i]\n      )\n    }\n\n    let scale = image_width / sprite_image_size\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: header_height,\n          width: width,\n          height: height,\n          background: '#333',\n          overflow: 'hidden',\n        }}\n      >\n        {transition_status === 0 ? (\n          <div\n            style={{\n              padding: grem / 4,\n            }}\n          >\n            <div\n              style={{\n                padding: grem / 4,\n              }}\n            >\n              Use the select data button below to select data points based on\n              the strategy.\n            </div>\n          </div>\n        ) : null}\n        <div\n          style={{\n            opacity:\n              transition_status === 0 ||\n              transition_status === 2.6 ||\n              round_limit === adjusted_round\n                ? 0\n                : 1,\n            transition: 'opacity 0.4s linear',\n            padding: grem / 2,\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: width,\n              background: '#444',\n              padding: `${grem / 4}px ${grem / 2}px`,\n            }}\n          >\n            <div>{transition_status < 2 ? 'Selected' : 'Labeled'}:</div>\n            <div>1,000</div>\n          </div>\n          <div\n            style={{\n              right: 0,\n              top: header_height,\n              width: width,\n              height: height - grem / 2,\n              paddingTop: grem * 1,\n              background: '#333',\n              overflow: 'auto',\n            }}\n          >\n            <div\n              style={{\n                display: 'grid',\n                paddingTop: side_padding * 2,\n                paddingBottom: side_padding * 2,\n                gridTemplateColumns: `repeat(${grid_columns}, ${image_width}px)`,\n                gridColumnGap: gutter,\n                gridRowGap: gutter * 2,\n              }}\n            >\n              {image_pickers.length > 0\n                ? image_pickers.map((p, i) => {\n                    let label =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? this.state.labels[i]\n                        : '?'\n                    let background =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? status_to_color[this.state.labels[i]]\n                        : '#fff'\n                    return (\n                      <div\n                        style={{\n                          width: image_width,\n                          height: image_height + grem,\n                          background: background,\n                          color: '#111',\n                          textAlign: 'center',\n                          transition: 'background 400ms linear',\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundImage: `url(${\n                              mnist_tile_locations[p[0]]\n                            })`,\n                            backgroundSize: `${scale *\n                              sprite_actual_size}px ${scale *\n                              sprite_actual_size}px`,\n                            backgroundPosition: `-${p[1] *\n                              scale *\n                              sprite_image_size}px -${p[2] *\n                              scale *\n                              sprite_image_size}px`,\n                            width: image_width,\n                            height: image_height,\n                            imageRendering: 'pixelated',\n                          }}\n                        />\n                        <div>{label}</div>\n                      </div>\n                    )\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Selected\n","import React, { Component } from 'react'\nimport Projection from './Projection'\nimport Selected from './Selected'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n      round_limit,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection\n          width={width}\n          height={height}\n          grem={grem}\n          active_embedding={active_embedding}\n          strategies={strategies}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          embeddings={embeddings}\n          requested_embedding={requested_embedding}\n          loaded_embedding={loaded_embedding}\n          transition_status={transition_status}\n          setTransitionStatus={setTransitionStatus}\n          loading_round={loading_round}\n          footer_height={footer_height}\n          round={round}\n        />\n        {true ? (\n          <Selected\n            width={selected_width}\n            height={\n              height - this.props.footer_height - grem * 2 - header_height\n            }\n            grem={grem}\n            mnist_images={mnist_images}\n            embeddings={embeddings}\n            loaded_embedding={loaded_embedding}\n            ranges={ranges}\n            transition_status={transition_status}\n            header_height={header_height}\n            round={round}\n            round_limit={round_limit}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nclass BigButton extends Component {\n  render() {\n    let { transition_status, grem, round_limit, round } = this.props\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Loading...'\n      next_state = null\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = 'Label & train'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.3) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Deselecting...'\n      next_state = null\n    }\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          background: '#111',\n          position: 'absolute',\n          bottom: this.props.footer_height,\n          right: 0,\n        }}\n      >\n        <div>\n          {round_limit !== adjusted_round ? (\n            <button\n              style={{\n                width: 200,\n                height: 2 * grem,\n                background: next_state === null ? '#eee' : 'white',\n                color: 'black',\n                textAlign: 'left',\n                paddingLeft: grem / 2,\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  this.props.setTransitionStatus(next_state)\n                }\n              }}\n            >\n              {button_text}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            height: grem,\n            width: `${100}%`,\n            marginTop: grem / 2,\n            background: '#222',\n          }}\n        >\n          <div\n            style={{\n              height: grem,\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: grem,\n                width: Math.min(500, ww) - grem * 2,\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'deepfool', 'ensemble']\n\nlet mnist_strategy_url = [\n  'mnist_random_round',\n  'mnist_entropy_round',\n  'mnist_deepfool_round',\n  'mnist_ensemble_entropy_round',\n]\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[0],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: 0,\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n  }\n\n  selectRound(round) {\n    let strat_limit = Math.max(this.state.strategy_explored, round)\n    this.setState({ round: round, strategy_explored: strat_limit })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  selectDataset(index) {\n    this.setState({ dataset: datasets[index], strategy_explored: 0 })\n    this.checkOrFetchData(\n      datasets[index],\n      this.state.strategy,\n      this.state.round\n    )\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index] })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/${\n      mnist_strategy_url[strategies.indexOf(strategy)]\n    }${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    return (\n      <Layout\n        {...this.state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}