{"version":3,"sources":["Header.js","Utils.js","Canvas.js","Accuracy.js","mnist_strategies.js","quickdraw_strategies.js","caltech_strategies.js","Footer.js","Projection.js","Layout.js","Selected.js","ProjectionSelected.js","BigButton.js","Timer.js","SelectedList.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","_this2","_this$props","datasets","selectDataset","strategies","strategy","selectStrategy","strategy_colors","dataset","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","i","inner","active","onClick","key","color","reduce","p","c","Component","comma","x","parts","toString","split","replace","join","toPercent2","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","decodeS","string","splits","label_dict","MNIST","Quickdraw","Caltech","Canvas","getCtx","refs","canvas","lineHeight","width","strategy_dict","num_labeled","random","accuracy","entropy","adversarial","ensemble","total_dict","Accuracy","toConsumableArray","Array","show_tip","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","setState","transition_status","strategy_accuracy","results","point_size","all_strat_results","_","rounded_min","floor","space","clearRect","y_padding","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","stroke","non_active_strats","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","strat","value","these_results","cell_width","arc","PI","fill","err","return","_this$props2","adjusted_round","round_limit","label_round","toFixed","src_Canvas","Fragment","race","j","reverse","onMouseEnter","handleEnter","onMouseLeave","handleLeave","cursor","bottom","whiteSpace","o","textTransform","fontSize","marginBottom","marginRight","textAlign","flexGrow","defineProperty","border","borderLeft","justifyContent","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","src_Accuracy","getTextures","texturesSources","loader","THREE","textureSource","Promise","resolve","reject","load","texture","flipY","sprite_spec_mnist","sprite_side","sprite_size","sprite_number","sprite_image_size","sprite_spec_quickdraw","assign","sprite_spec_caltech","sprite_spec_dict","point_size_dict","process","mnist_tile_locations","quickdraw_tile_locations","caltech_tile_locations","tile_dict","image_dict","src","img","document","getRanges","ranges","spec","start","end","push","getColorStuff","color_num","length","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","embedding","Float32Array","Projection","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","showHover","hover_ctx","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","_sprite_spec_dict$thi","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","texture_subsize","textures","repeat","addAttribute","uniforms","construct","size","fragment_shader","material","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","transition_colors","_this3","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","start_colors","end_colors","color_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","delay","position_tween","chain","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","size_delay","me","size_tween","onComplete","setTransitionStatus","sel_position_tween","setTimeout","_this4","_sprite_spec_dict$thi2","_loop2","attribute_indexes","loc_index","_this5","end_size","groups","_loop3","g","points","_this6","_this$props3","_loop4","_this7","all","then","prevd","d","_getColorStuff","remove","revealSelected","mouse_coords","digit_index","full_index","visible","hover_mount","y_adjust","hover_pad","hover_size","childNodes","imageSmoothingEnabled","status","adjusted_status","text_color","_sprite_spec_dict$thi3","innerText","drawImage","mouse_position","_this$props4","_mouse_position","slicedToArray","mouseX","mouseY","mouse_vector","_ref","_ref2","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","_this8","view","renderer","domElement","on","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props5","_getColorStuff2","aspect","setClearColor","setSize","mount","appendChild","point_group","selected_point_group","d3_zoom","scaleExtent","getScaleFromZ","far","zoomHandler","initial_scale","initial_transform","translate","handleMouse","requestAnimationFrame","sortObjects","render","removeChild","_this9","_this$props6","overflow","marginLeft","hover_bord","imageRendering","paddingTop","textOverflow","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","footer_height","header_height","src_Projection","BigButton","button_text","next_state","toggleList","borderRadius","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","SelectedList","wh","console","log","selected_indexes","_sprite_spec_dict$dat","target_width","columns","image_width","image_pickers","sprite_num","right","gridTemplateColumns","gridRowGap","gridColumnGap","paddingBottom","backgroundImage","backgroundSize","backgroundPosition","total","curr","Layout","show_list","new_value","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","_this$state","zIndex","src_ProjectionSelected","font_size","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","min","src_Timer","src_SelectedList","_strategy_dict","es","Data","scaleEmbeddings","fetchData","checkOrFetchData","strat_limit","xs","e","abs","ys","max_x","max_y","domain","url","indexOf","fetch","response","json","r","scaled","embedding_string","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbdba67f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px 0 ${grem / 2}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectStrategy(i)\n                      }}\n                    >\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet quickdraw_labels = [\n  'dolphin',\n  'cat',\n  'face',\n  'angel',\n  'airplane',\n  'apple',\n  'broccoli',\n  'crayon',\n  'bicycle',\n  'elephant',\n]\nlet caltech_labels = [\n  'cake',\n  'dolphin',\n  'elephant',\n  'golden gate bridge',\n  'goldfish',\n  'rainbow',\n  'teapot',\n  'teddy bear',\n  'washing machine',\n  'waterfall',\n]\nexport let label_dict = {\n  MNIST: labels,\n  Quickdraw: quickdraw_labels,\n  Caltech: caltech_labels,\n}\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { mnist_strategies } from './mnist_strategies.js'\nimport { quickdraw_strategies } from './quickdraw_strategies.js'\nimport { caltech_strategies } from './caltech_strategies.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet strategy_dict = {\n  MNIST: mnist_strategies,\n  Quickdraw: quickdraw_strategies,\n  Caltech: caltech_strategies,\n}\n\nlet total_dict = {\n  MNIST: 60000,\n  Quickdraw: 65729,\n  Caltech: 822,\n}\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nlet point_size = 4\nlet y_padding = point_size * 2\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      show_tip: null,\n    }\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.strategy_explored !== prevProps.strategy_explored) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  handleEnter(i) {\n    this.setState({ show_tip: i })\n  }\n\n  handleLeave() {\n    this.setState({ show_tip: null })\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n      dataset,\n    } = this.props\n\n    let strategy_accuracy = strategy_dict[dataset]\n    let results = strategy_accuracy[strategy]\n\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 4\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    let x_padding = cell_width / 2\n\n    let all_strat_results = strategies.map(s =>\n      _.min(strategy_accuracy[s].accuracy)\n    )\n\n    let rounded_min = Math.floor(_.min(all_strat_results) * 10) / 10\n\n    let rounds_limit = strategy_explored\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    let non_active_strats = strategies.filter(s => s !== strategy)\n\n    for (let strat of non_active_strats) {\n      let these_results = strategy_accuracy[strat]\n\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#666'\n      ctx.fillStyle = '#666'\n      ctx.beginPath()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        drawLine(\n          ctx,\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          i === 0\n        )\n      }\n      ctx.stroke()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        ctx.beginPath()\n        ctx.arc(\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          point_size,\n          0,\n          2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n\n    point_size = 6\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n    let { show_tip } = this.state\n\n    let num_labeled = strategy_dict[dataset].num_labeled\n    let results = strategy_dict[dataset][strategy]\n\n    let label_round = round\n    let cell_width = 100\n    if (transition_status > 1) label_round = round + 1\n\n    label_round = round\n\n    let strategy_accuracy = strategy_dict[dataset]\n\n    return (\n      <div style={{}}>\n        <div style={{ display: 'inline-flex', pointerEvents: 'auto' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? (\n                <span>\n                  Round {round + 1} of {round_limit + 1}\n                </span>\n              ) : (\n                ' '\n              )}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {(results.accuracy[round] * 100).toFixed(2)}% (+\n              {toPercent2(results.accuracy[round] - results.accuracy[0])})\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px`, display: 'none' }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {`Relative Error Reduction: ${(\n                (1 -\n                  (1 - results.accuracy[round]) / (1 - results.accuracy[0])) *\n                100\n              ).toFixed(2)}`}\n              %\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => {\n              let race = strategies.map((s, j) => {\n                return {\n                  string: `${s}: ${toPercent2(\n                    strategy_accuracy[s].accuracy[i]\n                  )}`,\n                  strategy: s,\n                  value: strategy_accuracy[s].accuracy[i],\n                }\n              })\n              race = _.sortBy(race, 'value').reverse()\n\n              return (\n                <div\n                  key={'explored' + i}\n                  onMouseEnter={this.handleEnter.bind(this, i)}\n                  onMouseLeave={this.handleLeave.bind(this)}\n                  onClick={() => {\n                    this.handleRound(i)\n                  }}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: cell_width * i,\n                    width: cell_width,\n                    height: height - grem * 2,\n                    cursor: i === round ? 'default' : 'pointer',\n                  }}\n                >\n                  {show_tip === i ? (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: 0,\n                        bottom: height - grem * 1.5,\n                        background: '#333',\n                        padding: grem / 2,\n                        whiteSpace: 'nowrap',\n                        pointerEvents: 'none',\n                      }}\n                    >\n                      <div style={{ color: '#fff' }}>Round {i + 1}</div>\n                      {race.map(o => (\n                        <div\n                          style={{\n                            textTransform: 'capitalize',\n                            color: strategy === o.strategy ? '#fff' : '#aaa',\n                            fontSize: (grem / 1.5) * 0.9,\n                            display: 'flex',\n                            marginBottom: grem / 8,\n                          }}\n                        >\n                          <div style={{ marginRight: grem / 4 }}>\n                            {o.strategy}:\n                          </div>\n                          <div style={{ textAlign: 'right', flexGrow: 1 }}>\n                            {(o.value * 100).toFixed(2)}%\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : null}\n                </div>\n              )\n            })}\n            <div\n              style={{\n                position: 'absolute',\n                top: y_padding,\n                left: cell_width * (strategy_explored + 1),\n                width: (round_limit - strategy_explored) * cell_width,\n                height: height - grem * 2 - y_padding * 2,\n                border: 'solid 2px rgba(100,100,100,0.2)',\n                pointerEvents: 'auto',\n                borderLeft: 'none',\n                pointerEvents: 'none',\n              }}\n            />\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            pointerEvents: 'auto',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            {comma(total_dict[this.props.dataset])} points,{' '}\n            {comma(num_labeled[label_round])} labelled (\n            {toPercent2(\n              num_labeled[label_round] / total_dict[this.props.dataset]\n            )}\n            )\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","export let mnist_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.923,\n      0.9468,\n      0.9379,\n      0.9551,\n      0.9558,\n      0.955,\n      0.958,\n      0.9664,\n      0.9635,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.923,\n      0.9485,\n      0.9589,\n      0.96,\n      0.9744,\n      0.9702,\n      0.9774,\n      0.9764,\n      0.9782,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.923,\n      0.9534,\n      0.9558,\n      0.9691,\n      0.9743,\n      0.9716,\n      0.9775,\n      0.9801,\n      0.9795,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.923,\n      0.9554,\n      0.967,\n      0.9731,\n      0.9748,\n      0.979,\n      0.9812,\n      0.9848,\n      0.9829,\n    ],\n  },\n}\n","export let quickdraw_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.7685568264784619,\n      0.8011681674373327,\n      0.7949622779265028,\n      0.8040885860306644,\n      0.8141275249452421,\n      0.823192990995376,\n      0.8260525675346799,\n      0.831284984181066,\n      0.8297639328303723,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7685568264784619,\n      0.8283037235337065,\n      0.8426624482842541,\n      0.83603066439523,\n      0.8523971769286931,\n      0.8506935994159163,\n      0.8619493794110489,\n      0.8623752737892432,\n      0.8586639084935508,\n    ],\n  },\n}\n","export let caltech_strategies = {\n  num_labeled: [300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0],\n  random: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8490566037735849,\n      0.8726415094339622,\n      0.8915094339622641,\n      0.8584905660377359,\n      0.910377358490566,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7547169811320755,\n      0.8349056603773585,\n      0.8066037735849056,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8773584905660378,\n      0.8773584905660378,\n      0.9056603773584906,\n      0.8726415094339622,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8537735849056604,\n      0.8867924528301887,\n      0.8679245283018868,\n      0.8726415094339622,\n      0.8773584905660378,\n      0.8584905660377359,\n      0.9056603773584906,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7547169811320755,\n      0.9339622641509434,\n      0.9339622641509434,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9481132075471698,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9245283018867925,\n    ],\n  },\n}\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom: grem * 2,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          dataset={dataset}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n          round_limit={round_limit}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS, label_dict } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\n// let sprite_side = 73\n// let sprite_size = sprite_side * sprite_side\n// let sprite_number = 12\n// let sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet point_size_dict = {\n  MNIST: 30,\n  Quickdraw: 30,\n  Caltech: 30,\n}\n\nlet hover_size = 28 * 3\nlet hover_pad = 4\nlet hover_bord = 0\n\nlet loader = new THREE.TextureLoader()\nlet circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\ncircle_texture.flipY = false\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet quickdraw_images = quickdraw_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet caltech_images = caltech_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet image_dict = {\n  MNIST: mnist_images,\n  Quickdraw: quickdraw_images,\n  Caltech: caltech_images,\n}\n\nfunction getRanges(dataset) {\n  let ranges = []\n  let spec = sprite_spec_dict[dataset]\n  let { sprite_number, sprite_size } = spec\n  for (let i = 0; i < sprite_number; i++) {\n    let start = i * sprite_size\n    let end = (i + 1) * sprite_size\n    if (i === sprite_number - 1) end = sprite_number * sprite_size\n    ranges.push([start, end])\n  }\n  return ranges\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\n\nfunction getColorStuff(dataset) {\n  let color_num = label_dict[dataset].length\n  let color_array = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .gl()\n  )\n  color_array.push(\n    chroma\n      .hsl(0, 0, 0.5)\n      .luminance(0.1)\n      .gl()\n  )\n\n  let color_array_hexes = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .hex()\n  )\n\n  let status_to_color = color_array.map(a => a.slice(0, 3))\n\n  return { color_array, color_array_hexes, status_to_color }\n}\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      color_array: null,\n      color_array_hexes: null,\n      status_to_color: null,\n    }\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n    this.showHover = this.showHover.bind(this)\n    this.hover_ctx = null\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    // let new_size = zoomScaler(z)\n    // let point_group = this.scene.children[0].children\n    // for (let c = 0; c < point_group.length; c++) {\n    //   point_group[c].material.uniforms.size.value = new_size\n    // }\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return this.state.status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: point_size_dict[this.props.dataset] },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n\n      point_cloud.userData = { sprite_index: s }\n\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings, transition_colors) {\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      if (true || transition_colors) {\n        let start_colors = back_existing.geometry.attributes.color.array.slice()\n        let color_prep = slice.labels.map(label => {\n          let color = this.state.status_to_color[label]\n          return color\n        })\n        let color_flattened = _.flatten(color_prep)\n        let end_colors = new Float32Array(color_flattened)\n\n        let color_tween = new TWEEN.Tween(start_colors)\n          .to(end_colors, 400)\n          .easing(TWEEN.Easing.Linear.None)\n        color_tween.onUpdate(function() {\n          back_existing.geometry.attributes.color.array = start_colors\n          back_existing.geometry.attributes.color.needsUpdate = true\n        })\n        color_tween.delay(400)\n\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start().chain(color_tween)\n\n        // let combo_tween = new TWEEN.Tween(combo_start)\n        //   .to(combo_end, 800)\n        //   .easing(TWEEN.Easing.Linear.None)\n        // combo_tween.onUpdate(function() {\n        //   if (s === 0) {\n        //     console.log(combo_start.positions[0])\n        //   }\n        //   back_existing.geometry.attributes.color.array = combo_start.colors\n        //   back_existing.geometry.attributes.color.needsUpdate = true\n        //   back_existing.geometry.attributes.position.array =\n        //     combo_start.positions\n        //   back_existing.geometry.attributes.position.needsUpdate = true\n        // })\n        // combo_tween.start()\n      } else {\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start()\n      }\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size_delay = 1200\n      if (!transition_colors) size_delay = 400\n      let size = { value: point_size_dict[this.props.dataset] }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(size_delay)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0.5)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [0.85, 0.85, 0.85]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n    // this.scene.children[1].visible = false\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: point_size_dict[this.props.dataset] }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          me.props.setTransitionStatus(1)\n        }\n      })\n      size_tween.start()\n    }\n\n    // let opacity = { value: 0 }\n    // let end_opacity = { value: 1 }\n    // for (let g = 0; g < groups.length; g++) {\n    //   let points = groups[g]\n    //   points.material.uniforms.size = { value: 20 }\n    //   let opacity_tween = new TWEEN.Tween(opacity)\n    //     .to(end_opacity, 800)\n    //     .easing(TWEEN.Easing.Linear.None)\n    //   opacity_tween.onUpdate(function() {\n    //     console.log(opacity.value)\n    //     points.material.opacity = opacity.value\n    //   })\n    //   let me = this\n    //   opacity_tween.onComplete(function() {\n    //     if (g === 0) {\n    //       me.props.setTransitionStatus(1)\n    //     }\n    //   })\n    //   opacity_tween.start()\n    // }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = this.state.status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      let me = this\n      color_tween.onComplete(function() {\n        if (s === 0) {\n          setTimeout(function() {\n            me.props.setTransitionStatus(2.3)\n          }, 0)\n        }\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.loaded_embedding === null &&\n      this.props.loaded_embedding !== null\n    ) {\n      // first load\n      Promise.all(getTextures(tile_dict[this.props.dataset])).then(textures => {\n        this.textures = textures\n        this.addPoints()\n        this.addSelectedPoints()\n        this.props.setTransitionStatus(0.5)\n      })\n    } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      let prevd = decodeS(prevProps.loaded_embedding)\n      let d = decodeS(this.props.loaded_embedding)\n      if (prevd.dataset !== d.dataset) {\n        let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n          d.dataset\n        )\n        this.setState({\n          color_array,\n          color_array_hexes,\n          status_to_color,\n        })\n\n        // different dataset\n        while (this.scene.children.length > 0) {\n          this.scene.remove(this.scene.children[0])\n        }\n        this.props.setTransitionStatus(0)\n        let me = this\n        setTimeout(() => {\n          Promise.all(getTextures(tile_dict[me.props.dataset])).then(\n            textures => {\n              me.textures = textures\n              me.addPoints()\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0.5)\n            }\n          )\n        }, 0)\n      } else if (prevd.strategy !== d.strategy) {\n        // new strategy, we should transition\n        // new strategy, who dis\n        // if (this.props.transition_status === 1) {\n        // this.labelSelected()\n        // }\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      } else if (\n        prevd.round !== d.round &&\n        this.props.transition_status !== 1.5\n      ) {\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      }\n    } else if (\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 0) ||\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 2.6)\n    ) {\n      this.revealSelected()\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.round !== prevProps.round) {\n    }\n  }\n\n  showHover(mouse_coords, sprite_index, digit_index, full_index) {\n    let loaded = this.props.embeddings[this.props.loaded_embedding]\n    this.scene.children[1].visible = true\n    this.hover_mount.style.display = 'block'\n    let y_adjust = `${mouse_coords[1] -\n      hover_size -\n      this.props.grem -\n      hover_pad * 4 -\n      14}px`\n    // y_adjust = `${mouse_coords[1] - hover_size / 2 - hover_pad}px`\n    this.hover_mount.style.transform = `translate3d(${mouse_coords[0] -\n      hover_size / 2 -\n      hover_pad}px, ${y_adjust},0)`\n    this.hover_ctx = this.hover_mount.childNodes[0].getContext('2d')\n    this.hover_ctx.imageSmoothingEnabled = false\n    let label = this.hover_mount.childNodes[1]\n    this.hover_ctx.fillRect(0, 0, hover_size, hover_size)\n\n    let status = loaded.statuses[full_index]\n\n    let adjusted_status = this.state.status_to_color.slice(\n      0,\n      this.state.status_to_color.length - 1\n    )\n    adjusted_status.push([0.5, 0.5, 0.5])\n\n    let color = null\n    let text_color = 'black'\n    if (status === 1) {\n      color = '#eee'\n      text_color = 'black'\n    } else {\n      color =\n        'rgba(' +\n        adjusted_status[loaded.labels[full_index]]\n          .map(d => Math.round(d * 255))\n          .join(',') +\n        ',1)'\n    }\n    this.hover_mount.style.background = color\n    this.hover_mount.style.color = text_color\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    label.style.background = color\n    label.innerText =\n      status === 1\n        ? 'selected'\n        : [...label_dict[this.props.dataset], 'unlabeled'][\n            loaded.labels[full_index]\n          ]\n    this.hover_ctx.drawImage(\n      image_dict[this.props.dataset][sprite_index],\n      // source rectangle\n      (digit_index % sprite_side) * sprite_image_size,\n      Math.floor(digit_index / sprite_side) * sprite_image_size,\n      sprite_image_size,\n      sprite_image_size,\n      // destination rectangle\n      0,\n      0,\n      hover_size,\n      hover_size\n    )\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height } = this.props\n    let [mouseX, mouseY] = mouse_position\n\n    let { sprite_size } = sprite_spec_dict[this.props.dataset]\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    if (this.props.dataset === 'Caletch')\n      this.raycaster.params.Points.threshold = 4.0\n    if (\n      this.scene.children[0] !== undefined &&\n      this.scene.children[0].children.length > 0\n    ) {\n      let intersects = this.raycaster.intersectObjects(\n        this.scene.children[0].children\n      )\n      if (intersects[0]) {\n        let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n        let intersect = sorted_intersects[0]\n        let sprite_index = intersect.object.userData.sprite_index\n        let digit_index = intersect.index\n        let full_index = sprite_index * sprite_size + digit_index\n        this.showHover([mouseX, mouseY], sprite_index, digit_index, full_index)\n        // this.props.setHoverIndex(full_index)\n        // this.highlightPoint(sprite_index, digit_index, full_index)\n      } else {\n        this.hover_mount.style.display = `none`\n      }\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node())\n      let mouse_position = [mouseX, mouseY]\n      this.checkIntersects(mouse_position)\n    })\n\n    view.on('mousedown', () => {\n      this.hover_mount.style.display = `none`\n    })\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n      this.props.dataset\n    )\n    this.setState({\n      color_array,\n      color_array_hexes,\n      status_to_color,\n    })\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n\n    this.handleMouse()\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem, dataset } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n          cursor: 'crosshair',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'auto',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: grem / 2,\n            pointerEvents: 'none',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'auto',\n            }}\n          >\n            <div style={{ padding: `0 ${grem / 4}px` }}>Key:</div>\n            <div\n              style={{\n                background: '#888',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n              }}\n            >\n              unlabeled\n            </div>\n            <div\n              style={{\n                background: '#fff',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n                marginLeft: grem / 4,\n              }}\n            >\n              selected\n            </div>\n          </div>\n\n          <div\n            style={{\n              padding: `0 ${grem / 4}px 0 ${grem * 0.75}px`,\n              display: 'flex',\n              flexWrap: 'auto',\n            }}\n          >\n            <div style={{ padding: `0 0 0 ${grem / 4}px` }}>Labels:</div>\n            {this.state.color_array_hexes !== null\n              ? this.state.color_array_hexes.map((c, i) => (\n                  <div\n                    key={'color_' + i}\n                    style={{\n                      background: this.state.color_array_hexes[i],\n                      height: grem,\n                      textAlign: 'center',\n                      color: '#111',\n                      padding: `0 ${grem / 4}px`,\n                      marginLeft: grem / 4,\n                    }}\n                  >\n                    {label_dict[dataset][i]}\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            width: hover_size + hover_pad * 2 + hover_bord * 2,\n            pointerEvents: 'none',\n            padding: hover_pad,\n            display: 'none',\n            color: 'white',\n            height: grem + hover_size + hover_pad * 3 + hover_bord * 2,\n            lineHeight: 0,\n            border: `solid ${hover_bord}px rgba(0,0,0,0.3)`,\n          }}\n          ref={mount => {\n            this.hover_mount = mount\n          }}\n        >\n          <canvas\n            width={hover_size}\n            height={hover_size}\n            style={{ imageRendering: 'pixelated' }}\n          />\n          <div\n            style={{\n              width: hover_size,\n              height: grem,\n              textAlign: 'center',\n              lineHeight: 1.5,\n              paddingTop: hover_pad,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\nimport SelectedList from './SelectedList'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n      show_list: false,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n    this.toggleList = this.toggleList.bind(this)\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  toggleList(new_value) {\n    this.setState({ show_list: new_value })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n      show_list,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n      toggleList,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              padding: grem / 2,\n              zIndex: 999,\n              background: 'red',\n              display: 'none',\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                dataset={dataset}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                selectRound={this.props.selectRound}\n                mnist_images={mnist_images}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n                round_limit={round_limit}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n              dataset={dataset}\n              toggleList={this.toggleList}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n              round_limit={round_limit}\n              dataset={dataset}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: Math.min(500, ww),\n                  background: 'white',\n                  color: 'black',\n                  padding: grem,\n                }}\n              >\n                <Timer\n                  grem={grem}\n                  gradient_string={gradient_string}\n                  ww={ww}\n                  labelsGotten={this.labelsGotten}\n                />\n                <div style={{ position: 'relative' }}>\n                  Getting labels for selected points...\n                </div>\n              </div>\n            </div>\n          ) : null}\n          {show_list ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: ww - grem * 3,\n                  color: 'black',\n                }}\n              >\n                <SelectedList\n                  grem={grem}\n                  dataset={dataset}\n                  embeddings={embeddings}\n                  loaded_embedding={loaded_embedding}\n                  wh={wh}\n                  ww={ww - grem * 3}\n                  toggleList={this.toggleList}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nimport { label_dict } from './Utils'\n\nlet image_num = 40\nlet images = [...Array(40)].map(n => null)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n}\n\nlet color_num = 10\nlet status_to_color = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\nclass Selected extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      labels: null,\n      prev_loaded: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { embeddings } = this.props\n\n    if (this.props.loaded_embedding !== prevProps.loaded_embedding) {\n      if (prevProps.loaded_embedding === null) {\n        // first real loaded set the state\n        this.setState({ prev_loaded: this.props.loaded_embedding })\n      } else {\n        // use the statuses from previous\n        let prev_embeddings = embeddings[prevProps.loaded_embedding]\n        let selected_indexes = []\n        for (let i = 0; i < prev_embeddings.statuses.length; i++) {\n          if (prev_embeddings.statuses[i] === 1) {\n            selected_indexes.push(i)\n          }\n        }\n        let loaded = embeddings[this.props.loaded_embedding]\n        let new_labels = selected_indexes.map((n, i) => loaded.labels[n])\n        this.setState({ labels: new_labels })\n      }\n    }\n    if (\n      this.props.transition_status === 0.5 &&\n      prevProps.transition_status !== 0\n    ) {\n      // need to make this run in between\n      let me = this\n      setTimeout(() => {\n        me.setState({\n          prev_loaded: this.props.loaded_embedding,\n          labels: null,\n        })\n      }, 0)\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      embeddings,\n      loaded_embedding,\n      transition_status,\n      header_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[this.state.prev_loaded]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let grid_columns = 3\n    let gutter = grem / 2\n    let side_padding = grem / 4\n    let image_width =\n      (width - side_padding * 2 * 2 - gutter * (grid_columns - 1)) /\n      grid_columns\n    let image_height = image_width\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    let selected_labels = null\n    if (loaded_embedding !== null) {\n      selected_labels = selected_indexes.map(\n        (n, i) => embeddings[loaded_embedding].labels[i]\n      )\n    }\n\n    let scale = image_width / sprite_image_size\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: header_height,\n          width: width,\n          height: height,\n          background: '#333',\n          overflow: 'hidden',\n        }}\n      >\n        {transition_status === 0 ? (\n          <div\n            style={{\n              padding: grem / 4,\n            }}\n          >\n            <div\n              style={{\n                padding: grem / 4,\n              }}\n            >\n              Use the select data button below to select data points based on\n              the strategy.\n            </div>\n          </div>\n        ) : null}\n        <div\n          style={{\n            opacity:\n              transition_status === 0 ||\n              transition_status === 2.6 ||\n              round_limit === adjusted_round\n                ? 0\n                : 1,\n            transition: 'opacity 0.4s linear',\n            transitionDelay: '0.1s',\n            padding: grem / 2,\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: width,\n              background: '#444',\n              padding: `${grem / 4}px ${grem / 2}px`,\n            }}\n          >\n            <div>{transition_status < 2 ? 'Selected' : 'Labeled'}:</div>\n            <div>1,000</div>\n          </div>\n          <div\n            style={{\n              right: 0,\n              top: header_height,\n              width: width,\n              height: height - grem / 2,\n              paddingTop: grem * 1,\n              background: '#333',\n              overflow: 'auto',\n            }}\n          >\n            <div\n              style={{\n                display: 'grid',\n                paddingTop: side_padding * 2,\n                paddingBottom: side_padding * 2,\n                gridTemplateColumns: `repeat(${grid_columns}, ${image_width}px)`,\n                gridColumnGap: gutter,\n                gridRowGap: gutter,\n              }}\n            >\n              {image_pickers.length > 0\n                ? image_pickers.map((p, i) => {\n                    let label =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? label_dict[dataset][this.state.labels[i]]\n                        : 'selected'\n                    let background =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? status_to_color[this.state.labels[i]]\n                        : '#ddd'\n                    return (\n                      <div\n                        key={p}\n                        style={{\n                          width: image_width,\n                          height: image_height + grem - 3,\n                          background: background,\n                          color: '#111',\n                          textAlign: 'center',\n                          transition: 'background 400ms linear',\n                          paddingLeft: 3,\n                          paddingTop: 3,\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                            backgroundSize: `${scale *\n                              sprite_actual_size}px ${scale *\n                              sprite_actual_size}px`,\n                            backgroundPosition: `-${p[1] *\n                              scale *\n                              sprite_image_size}px -${p[2] *\n                              scale *\n                              sprite_image_size}px`,\n                            width: image_width - 6,\n                            height: image_height - 6,\n                            imageRendering: 'pixelated',\n                          }}\n                        />\n                        <div\n                          style={{\n                            whiteSpace: 'nowrap',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                          }}\n                        >\n                          {label}\n                        </div>\n                      </div>\n                    )\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Selected\n","import React, { Component } from 'react'\nimport Projection from './Projection'\nimport Selected from './Selected'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection\n          width={width}\n          height={height}\n          grem={grem}\n          active_embedding={active_embedding}\n          strategies={strategies}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          embeddings={embeddings}\n          requested_embedding={requested_embedding}\n          loaded_embedding={loaded_embedding}\n          transition_status={transition_status}\n          setTransitionStatus={setTransitionStatus}\n          loading_round={loading_round}\n          footer_height={footer_height}\n          selectRound={this.props.selectRound}\n          round={round}\n          dataset={dataset}\n        />\n        {false ? (\n          <Selected\n            width={selected_width}\n            height={\n              height - this.props.footer_height - grem * 2 - header_height\n            }\n            grem={grem}\n            mnist_images={mnist_images}\n            embeddings={embeddings}\n            loaded_embedding={loaded_embedding}\n            ranges={ranges}\n            transition_status={transition_status}\n            header_height={header_height}\n            round={round}\n            round_limit={round_limit}\n            dataset={dataset}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nclass BigButton extends Component {\n  render() {\n    let { transition_status, grem, round_limit, round } = this.props\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Loading...'\n      next_state = null\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = 'Label & train'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.3) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Deselecting...'\n      next_state = null\n    }\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          position: 'absolute',\n          bottom: this.props.footer_height + grem * 2.5,\n          left: 0,\n          padding: `0 ${grem / 4}px`,\n          pointerEvents: 'none',\n        }}\n      >\n        <div\n          style={{\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          {this.props.dataset === 'Caltech' ? '50' : '1,000'} points selected\n        </div>\n        <div\n          style={{\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <button\n            style={{\n              pointerEvents: 'auto',\n            }}\n            onClick={() => {\n              this.props.toggleList(true)\n            }}\n          >\n            view list\n          </button>\n        </div>\n        <div\n          style={{\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          {round_limit !== adjusted_round ? (\n            <button\n              style={{\n                width: 140,\n                height: grem,\n                background: next_state === null ? '#444' : 'white',\n                color: next_state === null ? 'white' : 'black',\n                textAlign: 'left',\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n                borderRadius: grem / 2,\n                textAlign: 'center',\n                pointerEvents: 'auto',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  this.props.setTransitionStatus(next_state)\n                }\n              }}\n            >\n              {button_text}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n            left: 0,\n            top: 0,\n          }}\n        >\n          <div\n            style={{\n              height: '100%',\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '100%',\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\n\n// duplicate from projection\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'CALTECH_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nclass SelectedList extends Component {\n  render() {\n    let { grem, embeddings, loaded_embedding, dataset, ww, wh } = this.props\n\n    console.log(wh)\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[loaded_embedding]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let { sprite_size, sprite_side, sprite_image_size } = sprite_spec_dict[\n      dataset\n    ]\n\n    let target_width = 100 + grem / 2\n    let columns = Math.floor((ww - grem) / target_width)\n    let image_width = (ww - grem - (columns - 1) * (grem / 2)) / columns\n    // let image_columns = Math.round(ww- grem/2) / (target_width + grem / 2))\n    // let image_width = Math.floor((ww - grem) / image_columns)\n    let scale = image_width / sprite_image_size\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    return (\n      <div style={{ background: '#888' }}>\n        <div\n          style={{\n            padding: grem / 2,\n            background: 'white',\n            color: 'black',\n            position: 'relative',\n          }}\n        >\n          Selected points\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleList(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ overflow: 'auto', height: wh - grem * 6 }}>\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateColumns: `repeat(auto-fill, ${image_width}px)`,\n              gridRowGap: grem / 2,\n              gridColumnGap: grem / 2,\n              padding: grem / 2,\n            }}\n          >\n            {image_pickers.length > 0\n              ? image_pickers.map((p, i) => {\n                  return (\n                    <div\n                      key={p}\n                      style={{ paddingBottom: '100%', position: 'relative' }}\n                    >\n                      <div\n                        style={{\n                          position: 'absolute',\n                          left: 0,\n                          top: 0,\n                          right: 0,\n                          bottom: 0,\n                          backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                          backgroundSize: `${scale *\n                            sprite_actual_size}px ${scale *\n                            sprite_actual_size}px`,\n                          backgroundPosition: `-${p[1] *\n                            scale *\n                            sprite_image_size}px -${p[2] *\n                            scale *\n                            sprite_image_size}px`,\n                          imageRendering: 'pixelated',\n                        }}\n                      />\n                    </div>\n                  )\n                })\n              : null}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectedList\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'adversarial', 'ensemble']\n\nlet mnist_strategy_url = [\n  'mnist_random_round',\n  'mnist_entropy_round',\n  'mnist_adv_round',\n  'mnist_ensemble_entropy_round',\n]\n\nlet quickdraw_strategy_url = [\n  'quickdraw_random_round',\n  'quickdraw_entropy_round',\n  'quickdraw_adv_round',\n  'quickdraw_ensemble_entropy_round',\n]\n\nlet caltech_strategy_url = [\n  'caltech_random_round',\n  'caltech_entropy_round',\n  'caltech_adv_round',\n  'caltech_ensemble_entropy_round',\n]\n\nlet strategy_dict = {\n  [datasets[0]]: mnist_strategy_url,\n  [datasets[1]]: quickdraw_strategy_url,\n  [datasets[2]]: caltech_strategy_url,\n}\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[0],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: 0,\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n  }\n\n  selectRound(round) {\n    let strat_limit = Math.max(this.state.strategy_explored, round)\n    this.setState({ round: round, strategy_explored: strat_limit })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  selectDataset(index) {\n    this.setState({ dataset: datasets[index], strategy_explored: 0, round: 0 })\n    this.checkOrFetchData(\n      datasets[index],\n      this.state.strategy,\n      this.state.round\n    )\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index] })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/${\n      strategy_dict[dataset][strategies.indexOf(strategy)]\n    }${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    return (\n      <Layout\n        {...this.state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}