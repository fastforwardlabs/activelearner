{"version":3,"sources":["Header.js","Utils.js","Canvas.js","Accuracy.js","mnist_strategies.js","quickdraw_strategies.js","caltech_strategies.js","Footer.js","Projection.js","Layout.js","Selected.js","ProjectionSelected.js","BigButton.js","Timer.js","SelectedList.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","charAt","toUpperCase","slice","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setHeight","bind","assertThisInitialized","height","divElement","clientHeight","setHeaderHeight","_this2","_this$props","datasets","selectDataset","strategies","strategy","selectStrategy","strategy_colors","dataset","grem","activeStyle","react_default","a","createElement","ref","style","position","left","top","display","flexWrap","background","padding","concat","pointerEvents","fontWeight","map","n","i","inner","active","onClick","key","color","reduce","p","c","Component","comma","x","parts","toString","split","replace","join","toPercent2","Math","round","drawLine","ctx","y","move_boolean","moveTo","lineTo","boxShadow","textDecoration","decodeS","string","splits","label_dict","MNIST","Quickdraw","Caltech","Canvas","getCtx","refs","canvas","lineHeight","width","strategy_dict","num_labeled","random","accuracy","entropy","adversarial","ensemble","total_dict","Accuracy","toConsumableArray","Array","draw","handleRound","getContext","scale","prevProps","strategy_explored","new_round","selectRound","transition_status","strategy_accuracy","results","point_size","all_strat_results","_","rounded_min","floor","space","clearRect","y_padding","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","stroke","non_active_strats","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","strat","value","these_results","cell_width","arc","PI","fill","err","return","_this$props2","adjusted_round","round_limit","label_round","src_Canvas","Fragment","cursor","defineProperty","border","borderLeft","justifyContent","Footer","setFooterHeight","ww","color_array_hexes","simulating_labeling","gradient_string","adjusted_explored","max","bottom","src_Accuracy","getTextures","texturesSources","loader","THREE","textureSource","Promise","resolve","reject","load","texture","flipY","sprite_spec_mnist","sprite_side","sprite_size","sprite_number","sprite_image_size","sprite_spec_quickdraw","assign","sprite_spec_caltech","sprite_spec_dict","point_size_dict","process","mnist_tile_locations","quickdraw_tile_locations","caltech_tile_locations","tile_dict","image_dict","src","img","document","getRanges","ranges","spec","start","end","push","getColorStuff","color_num","length","color_array","chroma","luminance","gl","hex","status_to_color","sliceRound","object","range","coordinates","labels","statuses","prepPositions","position_prep","embedding","Float32Array","Projection","init","animate","addPoints","transitionPoints","addSelectedPoints","labelSelected","showHover","hover_ctx","rvFOV","degToRad","camera","fov","tan","camera_z_position","fov_height","d3_transform","d3","transform","k","z","getZFromScale","set","loaded_embedding","embeddings","scene","children","loaded","loaded_sliced","parent_group","_sprite_spec_dict$thi","slice_number","point_number","geometry","positions","offsets","index","l","color_prep","label","color_flattened","colors","texture_subsize","textures","repeat","addAttribute","uniforms","construct","size","fragment_shader","material","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","transition_colors","_this3","back_points","existing_points","_loop","back_existing","start_position","attributes","array","end_position","start_colors","end_colors","color_tween","TWEEN","to","easing","Linear","None","onUpdate","needsUpdate","delay","position_tween","chain","existing","indexes","from","sel_start_positions","end_flattened","sel_end_position","size_delay","me","size_tween","onComplete","setTransitionStatus","sel_position_tween","setTimeout","_this4","_sprite_spec_dict$thi2","_loop2","attribute_indexes","loc_index","_this5","end_size","groups","_loop3","g","points","_this6","_this$props3","_loop4","_this7","all","then","prevd","d","_getColorStuff","setState","remove","revealSelected","mouse_coords","digit_index","full_index","visible","hover_mount","y_adjust","hover_pad","hover_size","childNodes","imageSmoothingEnabled","status","adjusted_status","text_color","_sprite_spec_dict$thi3","innerText","drawImage","mouse_position","_this$props4","_mouse_position","slicedToArray","mouseX","mouseY","mouse_vector","_ref","_ref2","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","_this8","view","renderer","domElement","on","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props5","_getColorStuff2","aspect","setClearColor","setSize","mount","appendChild","point_group","selected_point_group","d3_zoom","scaleExtent","getScaleFromZ","far","zoomHandler","initial_scale","initial_transform","translate","handleMouse","requestAnimationFrame","sortObjects","render","removeChild","_this9","_this$props6","overflow","textAlign","marginLeft","hover_bord","imageRendering","paddingTop","whiteSpace","textOverflow","ProjectionSelected","active_embedding","requested_embedding","mnist_images","loading_round","footer_height","header_height","src_Projection","BigButton","button_text","next_state","toggleList","borderRadius","disabled","Timer","count","counter","repeatOften","count_check","labelsGotten","SelectedList","wh","console","log","selected_indexes","_sprite_spec_dict$dat","target_width","columns","image_width","image_pickers","sprite_num","right","gridTemplateColumns","gridRowGap","gridColumnGap","paddingBottom","backgroundImage","backgroundSize","backgroundPosition","total","curr","Layout","show_list","new_value","window","innerWidth","innerHeight","addEventListener","prevState","removeEventListener","_this$state","zIndex","src_ProjectionSelected","font_size","src_BigButton","src_Header","src_Footer","justifyItems","alignItems","min","src_Timer","src_SelectedList","_strategy_dict","es","Data","scaleEmbeddings","fetchData","checkOrFetchData","strat_limit","xs","e","abs","ys","max_x","max_y","domain","url","indexOf","fetch","response","json","r","scaled","embedding_string","src_Layout","App","src_Data","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c52885b8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nconst capitalize = s => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setHeaderHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      datasets,\n      selectDataset,\n      strategies,\n      strategy,\n      strategy_colors,\n      selectStrategy,\n      dataset,\n      activeStyle,\n      grem,\n    } = this.props\n\n    let background = 'transparent'\n    // background = '#444'\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px 0 ${grem / 2}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div\n            style={{\n              padding: `0 ${grem / 4}px`,\n              fontWeight: 'bold',\n            }}\n          >\n            Active Learner\n          </div>\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Dataset:</div>\n          {datasets\n            .map((n, i) => {\n              let active = n === dataset\n              let inner\n              active\n                ? (inner = <span>{n}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectDataset(i)\n                      }}\n                    >\n                      {n}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n        <div\n          style={{\n            background: background,\n            display: 'flex',\n            flexWrap: 'wrap',\n            padding: `0 ${grem / 4}px`,\n            pointerEvents: 'all',\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>Strategy:</div>\n          {strategies\n            .map((n, i) => {\n              let active = n === strategy\n              let inner\n              active\n                ? (inner = <span>{capitalize(n)}</span>)\n                : (inner = (\n                    <button\n                      onClick={() => {\n                        selectStrategy(i)\n                      }}\n                    >\n                      {capitalize(n)}\n                    </button>\n                  ))\n              return (\n                <span\n                  key={n}\n                  style={{\n                    padding: `0 ${grem / 4}px`,\n                    background: active ? 'white' : 'transparent',\n                    color: active ? 'black' : 'white',\n                  }}\n                >\n                  {inner}\n                </span>\n              )\n            })\n            .reduce((p, c) => [p, ' ', c])}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","export function comma(x) {\n  // https://stackoverflow.com/a/2901298/8691291\n  var parts = x.toString().split('.')\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return parts.join('.')\n}\nexport function toPercent(x) {\n  return Math.round(x * 100) + '%'\n}\n\nexport function toPercent2(x) {\n  return Math.round(x * 10000) / 100 + '%'\n}\n\nexport function drawLine(ctx, x, y, move_boolean) {\n  if (move_boolean) {\n    ctx.moveTo(x, y)\n  } else {\n    ctx.lineTo(x, y)\n  }\n}\n\nexport function rangeDiff(range) {\n  return range[1] - range[0]\n}\n\nexport function activeStyle(color) {\n  let style = {\n    background: color,\n    boxShadow: `-0.25em 0 0 ${color}, 0.25em 0 0 ${color}`,\n    textDecoration: 'none',\n  }\n  return style\n}\n\nexport function decodeS(string) {\n  let splits = string.split('-')\n  return {\n    dataset: splits[0],\n    strategy: splits[1],\n    round: splits[2],\n  }\n}\n\nlet labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet quickdraw_labels = [\n  'dolphin',\n  'cat',\n  'face',\n  'angel',\n  'airplane',\n  'apple',\n  'broccoli',\n  'crayon',\n  'bicycle',\n  'elephant',\n]\nlet caltech_labels = [\n  'cake',\n  'dolphin',\n  'elephant',\n  'golden gate bridge',\n  'goldfish',\n  'rainbow',\n  'teapot',\n  'teddy bear',\n  'washing machine',\n  'waterfall',\n]\nexport let label_dict = {\n  MNIST: labels,\n  Quickdraw: quickdraw_labels,\n  Caltech: caltech_labels,\n}\n","import React, { Component } from 'react'\n\nclass Canvas extends Component {\n  componentDidMount() {\n    this.props.getCtx(this.refs.canvas)\n  }\n\n  render() {\n    let { grem } = this.props\n    return (\n      <div style={{ lineHeight: 0, width: this.props.width }}>\n        <canvas\n          ref=\"canvas\"\n          width={this.props.width * 2}\n          height={this.props.height * 2}\n          style={{\n            width: this.props.width,\n            height: this.props.height,\n            pointerEvents: 'auto',\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","import React, { Component } from 'react'\nimport { comma, drawLine, toPercent2 } from './Utils'\nimport { mnist_strategies } from './mnist_strategies.js'\nimport { quickdraw_strategies } from './quickdraw_strategies.js'\nimport { caltech_strategies } from './caltech_strategies.js'\nimport Canvas from './Canvas'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\n\nlet strategy_dict = {\n  MNIST: mnist_strategies,\n  Quickdraw: quickdraw_strategies,\n  Caltech: caltech_strategies,\n}\n\nlet total_dict = {\n  MNIST: 60000,\n  Quickdraw: 65729,\n  Caltech: 822,\n}\n\nlet placeholder_arrays = [...Array(4)].map(n =>\n  [...Array(5)].map(n => Math.random())\n)\n\nlet point_size = 4\nlet y_padding = point_size * 2\n\nclass Accuracy extends Component {\n  constructor(props) {\n    super(props)\n    this.ctx = null\n    this.getCtx = this.getCtx.bind(this)\n    this.draw = this.draw.bind(this)\n    this.handleRound = this.handleRound.bind(this)\n  }\n\n  getCtx(canvas) {\n    this.ctx = canvas.getContext('2d')\n  }\n\n  componentDidMount() {\n    this.ctx.scale(2, 2)\n    this.draw()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.strategy_explored !== prevProps.strategy_explored) {\n      this.ctx.scale(2, 2)\n    }\n    this.draw()\n  }\n\n  handleRound(new_round) {\n    if (new_round !== this.props.round) {\n      this.props.selectRound(new_round)\n    }\n  }\n\n  draw() {\n    let {\n      width,\n      height,\n      strategies,\n      strategy_colors,\n      round,\n      strategy,\n      grem,\n      transition_status,\n      strategy_explored,\n      dataset,\n    } = this.props\n\n    let strategy_accuracy = strategy_dict[dataset]\n    let results = strategy_accuracy[strategy]\n\n    height = height - grem * 2\n    if (transition_status === 3) round = round + 1\n    let ctx = this.ctx\n    let point_size = 4\n    // let x_padding = point_size\n    let cell_num = 8\n    let cell_width = 100\n    let x_padding = cell_width / 2\n\n    let all_strat_results = strategies.map(s =>\n      _.min(strategy_accuracy[s].accuracy)\n    )\n\n    let rounded_min = Math.floor(_.min(all_strat_results) * 10) / 10\n\n    let rounds_limit = strategy_explored\n\n    let space = 1 - rounded_min\n    let interval = 0.05\n\n    ctx.clearRect(0, 0, cell_width * (strategy_explored + 1), height)\n\n    let y_padding = point_size * 2\n    height = height - y_padding * 2\n\n    ctx.fillStyle = 'rgba(100,100,100,0.3)'\n    ctx.fillRect(round * cell_width, y_padding, cell_width, height)\n\n    ctx.lineWidth = 3\n    ctx.strokeStyle = 'rgba(100,100,100,0.5)'\n    for (let i = 0; i < space + interval; i = i + interval) {\n      ctx.beginPath()\n      let y = (i / space) * height\n      drawLine(ctx, 0, y + y_padding, true)\n      drawLine(ctx, cell_width * (strategy_explored + 1), y + y_padding, false)\n      ctx.stroke()\n    }\n\n    let non_active_strats = strategies.filter(s => s !== strategy)\n\n    for (let strat of non_active_strats) {\n      let these_results = strategy_accuracy[strat]\n\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#666'\n      ctx.fillStyle = '#666'\n      ctx.beginPath()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        drawLine(\n          ctx,\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          i === 0\n        )\n      }\n      ctx.stroke()\n      for (let i = 0; i < strategy_explored + 1; i++) {\n        let accuracy =\n          (these_results.accuracy[i] - rounded_min) / (1 - rounded_min)\n        ctx.beginPath()\n        ctx.arc(\n          i * cell_width + x_padding,\n          height - accuracy * height + y_padding,\n          point_size,\n          0,\n          2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n\n    point_size = 6\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#efefef'\n    ctx.fillStyle = '#efefef'\n    ctx.beginPath()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      drawLine(\n        ctx,\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        i === 0\n      )\n    }\n    ctx.stroke()\n    for (let i = 0; i < strategy_explored + 1; i++) {\n      let accuracy = (results.accuracy[i] - rounded_min) / (1 - rounded_min)\n      ctx.beginPath()\n      ctx.arc(\n        i * cell_width + x_padding,\n        height - accuracy * height + y_padding,\n        point_size,\n        0,\n        2 * Math.PI\n      )\n      ctx.fill()\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy,\n      round,\n      transition_status,\n      adjusted_round,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let num_labeled = strategy_dict[dataset].num_labeled\n    let results = strategy_dict[dataset][strategy]\n\n    let label_round = round\n    let cell_width = 100\n    if (transition_status > 1) label_round = round + 1\n    return (\n      <div style={{}}>\n        <div style={{ display: 'inline-flex', pointerEvents: 'auto' }}>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              {true ? (\n                <span>\n                  Round {round + 1} of {round_limit + 1}\n                </span>\n              ) : (\n                ' '\n              )}{' '}\n            </div>\n          </div>\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            <div style={{ padding: `0 ${grem / 4}px` }}>\n              Accuracy: {toPercent2(results.accuracy[round])}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'relative',\n            width: cell_width * (strategy_explored + 1),\n            height: height - grem * 2,\n            pointerEvents: 'auto',\n          }}\n        >\n          <Canvas\n            width={cell_width * (strategy_explored + 1)}\n            height={height - grem * 2}\n            getCtx={this.getCtx}\n            grem={grem}\n          />\n          <>\n            {[...Array(strategy_explored + 1)].map((n, i) => (\n              <div\n                key={'explored' + i}\n                onClick={() => {\n                  this.handleRound(i)\n                }}\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: cell_width * i,\n                  width: cell_width,\n                  height: height - grem * 2,\n                  cursor: i === round ? 'default' : 'pointer',\n                }}\n              />\n            ))}\n            <div\n              style={{\n                position: 'absolute',\n                top: y_padding,\n                left: cell_width * (strategy_explored + 1),\n                width: (round_limit - strategy_explored) * cell_width,\n                height: height - grem * 2 - y_padding * 2,\n                border: 'solid 2px rgba(100,100,100,0.2)',\n                pointerEvents: 'auto',\n                borderLeft: 'none',\n                pointerEvents: 'none',\n              }}\n            />\n          </>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            pointerEvents: 'auto',\n            justifyContent: 'space-between',\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <div style={{ padding: `0 ${grem / 4}px` }}>\n            {comma(total_dict[this.props.dataset])} points,{' '}\n            {comma(num_labeled[label_round])} labelled (\n            {toPercent2(\n              num_labeled[label_round] / total_dict[this.props.dataset]\n            )}\n            )\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Accuracy\n","export let mnist_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.923,\n      0.9468,\n      0.9379,\n      0.9551,\n      0.9558,\n      0.955,\n      0.958,\n      0.9664,\n      0.9635,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.923,\n      0.9485,\n      0.9589,\n      0.96,\n      0.9744,\n      0.9702,\n      0.9774,\n      0.9764,\n      0.9782,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.923,\n      0.9534,\n      0.9558,\n      0.9691,\n      0.9743,\n      0.9716,\n      0.9775,\n      0.9801,\n      0.9795,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.923,\n      0.9554,\n      0.967,\n      0.9731,\n      0.9748,\n      0.979,\n      0.9812,\n      0.9848,\n      0.9829,\n    ],\n  },\n}\n","export let quickdraw_strategies = {\n  num_labeled: [\n    5000.0,\n    6000.0,\n    7000.0,\n    8000.0,\n    9000.0,\n    10000.0,\n    11000.0,\n    12000.0,\n    13000.0,\n  ],\n  random: {\n    accuracy: [\n      0.7685568264784619,\n      0.8011681674373327,\n      0.7949622779265028,\n      0.8040885860306644,\n      0.8141275249452421,\n      0.823192990995376,\n      0.8260525675346799,\n      0.831284984181066,\n      0.8297639328303723,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7685568264784619,\n      0.7963008031151132,\n      0.7894256510099781,\n      0.8050012168410805,\n      0.8212460452664881,\n      0.8202725724020443,\n      0.8123631053784376,\n      0.8289729861280117,\n      0.8267826721830129,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7685568264784619,\n      0.8283037235337065,\n      0.8426624482842541,\n      0.83603066439523,\n      0.8523971769286931,\n      0.8506935994159163,\n      0.8619493794110489,\n      0.8623752737892432,\n      0.8586639084935508,\n    ],\n  },\n}\n","export let caltech_strategies = {\n  num_labeled: [300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0],\n  random: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8490566037735849,\n      0.8726415094339622,\n      0.8915094339622641,\n      0.8584905660377359,\n      0.910377358490566,\n    ],\n  },\n  entropy: {\n    accuracy: [\n      0.7547169811320755,\n      0.8349056603773585,\n      0.8066037735849056,\n      0.8490566037735849,\n      0.8632075471698113,\n      0.8773584905660378,\n      0.8773584905660378,\n      0.9056603773584906,\n      0.8726415094339622,\n    ],\n  },\n  adversarial: {\n    accuracy: [\n      0.7547169811320755,\n      0.7971698113207547,\n      0.8537735849056604,\n      0.8867924528301887,\n      0.8679245283018868,\n      0.8726415094339622,\n      0.8773584905660378,\n      0.8584905660377359,\n      0.9056603773584906,\n    ],\n  },\n  ensemble: {\n    accuracy: [\n      0.7547169811320755,\n      0.9339622641509434,\n      0.9339622641509434,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9481132075471698,\n      0.9292452830188679,\n      0.9339622641509434,\n      0.9245283018867925,\n    ],\n  },\n}\n","import React, { Component } from 'react'\nimport Accuracy from './Accuracy'\n\nlet color_seed = Math.floor(Math.random() * 10)\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.setHeight = this.setHeight.bind(this)\n  }\n\n  setHeight() {\n    let height = this.divElement.clientHeight\n    this.props.setFooterHeight(height)\n  }\n\n  componentDidMount() {\n    this.setHeight()\n  }\n\n  render() {\n    let {\n      round,\n      ww,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      selectRound,\n      color_array_hexes,\n      transition_status,\n      simulating_labeling,\n      gradient_string,\n      strategy_explored,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let adjusted_round = round\n    let adjusted_explored = strategy_explored\n    if (transition_status > 1 && transition_status < 2.3) {\n      adjusted_round = Math.max(0, adjusted_round - 1)\n      adjusted_explored = Math.max(0, adjusted_explored - 1)\n    }\n\n    return (\n      <div\n        ref={divElement => {\n          this.divElement = divElement\n        }}\n        style={{\n          position: 'absolute',\n          bottom: grem * 2,\n          left: 0,\n          height: 7 * grem,\n          pointerEvents: 'none',\n        }}\n      >\n        <Accuracy\n          width={ww}\n          transition_status={transition_status}\n          height={7 * grem}\n          grem={grem}\n          strategies={strategies}\n          selectRound={this.props.selectRound}\n          dataset={dataset}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          round={adjusted_round}\n          strategy_explored={adjusted_explored}\n          round_limit={round_limit}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { decodeS, label_dict } from './Utils'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport * as chroma from 'chroma-js'\n\n/**\n *\n * @param {Array} texturesSources - List of Strings that represent texture sources\n * @returns {Array} Array containing a Promise for each source\n */\nfunction getTextures(texturesSources) {\n  const loader = new THREE.TextureLoader()\n  return texturesSources.map(textureSource => {\n    return new Promise((resolve, reject) => {\n      loader.load(\n        textureSource,\n        texture => {\n          texture.flipY = false\n          resolve(texture)\n        },\n        undefined, // onProgress callback not supported from r84\n        err => reject(err)\n      )\n    })\n  })\n}\n\n// Constants for sprite sheets\n// let sprite_side = 73\n// let sprite_size = sprite_side * sprite_side\n// let sprite_number = 12\n// let sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet point_size_dict = {\n  MNIST: 30,\n  Quickdraw: 30,\n  Caltech: 30,\n}\n\nlet hover_size = 28 * 3\nlet hover_pad = 4\nlet hover_bord = 0\n\nlet loader = new THREE.TextureLoader()\nlet circle_texture = loader.load(`${process.env.PUBLIC_URL}/circle.png`)\ncircle_texture.flipY = false\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'caltech_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet quickdraw_images = quickdraw_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet caltech_images = caltech_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet image_dict = {\n  MNIST: mnist_images,\n  Quickdraw: quickdraw_images,\n  Caltech: caltech_images,\n}\n\nfunction getRanges(dataset) {\n  let ranges = []\n  let spec = sprite_spec_dict[dataset]\n  let { sprite_number, sprite_size } = spec\n  for (let i = 0; i < sprite_number; i++) {\n    let start = i * sprite_size\n    let end = (i + 1) * sprite_size\n    if (i === sprite_number - 1) end = sprite_number * sprite_size\n    ranges.push([start, end])\n  }\n  return ranges\n}\n\n// let mnist_images = mnist_tile_locations.map(src => {\n//   let img = document.createElement('img')\n//   img.src = src\n//   return img\n// })\n\n// let color_array = [\n//   [141, 211, 199],\n//   [255, 255, 179],\n//   [190, 186, 218],\n//   [251, 128, 114],\n//   [128, 177, 211],\n//   [253, 180, 98],\n//   [179, 222, 105],\n//   [252, 205, 229],\n//   [188, 128, 189],\n//   [204, 235, 197],\n//   [100, 100, 100],\n// ]\n\nfunction getColorStuff(dataset) {\n  let color_num = label_dict[dataset].length\n  let color_array = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .gl()\n  )\n  color_array.push(\n    chroma\n      .hsl(0, 0, 0.5)\n      .luminance(0.1)\n      .gl()\n  )\n\n  let color_array_hexes = [...Array(color_num)].map((n, i) =>\n    chroma\n      .hsl(0 + (360 / color_num) * i, 1, 0.5)\n      .luminance(0.5)\n      .hex()\n  )\n\n  let status_to_color = color_array.map(a => a.slice(0, 3))\n\n  return { color_array, color_array_hexes, status_to_color }\n}\n\nfunction sliceRound(object, range) {\n  return {\n    coordinates: object.coordinates.slice(range[0], range[1]),\n    labels: object.labels.slice(range[0], range[1]),\n    statuses: object.statuses.slice(range[0], range[1]),\n  }\n}\n\nfunction prepPositions(coordinates) {\n  let position_prep = []\n  for (let i = 0; i < coordinates.length; i++) {\n    let embedding = coordinates[i]\n    position_prep.push(embedding[0], embedding[1], 0)\n  }\n  let positions = new Float32Array(position_prep)\n  return positions\n}\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      color_array: null,\n      color_array_hexes: null,\n      status_to_color: null,\n    }\n    this.init = this.init.bind(this)\n    this.animate = this.animate.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.transitionPoints = this.transitionPoints.bind(this)\n    this.addSelectedPoints = this.addSelectedPoints.bind(this)\n    this.labelSelected = this.labelSelected.bind(this)\n    this.showHover = this.showHover.bind(this)\n    this.hover_ctx = null\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    // let new_size = zoomScaler(z)\n    // let point_group = this.scene.children[0].children\n    // for (let c = 0; c < point_group.length; c++) {\n    //   point_group[c].material.uniforms.size.value = new_size\n    // }\n  }\n\n  addPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[0] = new THREE.Group()\n\n    // split embeddings and labels into chunks to match sprites\n    // load the textures\n    // let loader = new THREE.TextureLoader()\n    // this.textures = mnist_tile_locations.map(l => {\n    //   let t = loader.load(l)\n    //   t.flipY = false\n    //   // t.magFilter = THREE.NearestFilter\n    //   // t.minFilter = THREE.LinearMipMapLinearFilter;\n    //   return t\n    // })\n    let loaded = embeddings[loaded_embedding]\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n    let parent_group = new THREE.Group()\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n      let point_number = slice.coordinates.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(slice.coordinates)\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = slice.labels.map(label => {\n        return this.state.status_to_color[label]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: point_size_dict[this.props.dataset] },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n\n      point_cloud.userData = { sprite_index: s }\n\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[0] = parent_group\n  }\n\n  transitionPoints(loaded_embedding, embeddings, transition_colors) {\n    let back_points = this.scene.children[0]\n    let existing_points = this.scene.children[1].children\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let back_existing = back_points.children[s]\n      let slice = loaded_sliced[s]\n\n      let start_position = back_existing.geometry.attributes.position.array.slice()\n      let end_position = prepPositions(slice.coordinates)\n\n      if (true || transition_colors) {\n        let start_colors = back_existing.geometry.attributes.color.array.slice()\n        let color_prep = slice.labels.map(label => {\n          let color = this.state.status_to_color[label]\n          return color\n        })\n        let color_flattened = _.flatten(color_prep)\n        let end_colors = new Float32Array(color_flattened)\n\n        let color_tween = new TWEEN.Tween(start_colors)\n          .to(end_colors, 400)\n          .easing(TWEEN.Easing.Linear.None)\n        color_tween.onUpdate(function() {\n          back_existing.geometry.attributes.color.array = start_colors\n          back_existing.geometry.attributes.color.needsUpdate = true\n        })\n        color_tween.delay(400)\n\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start().chain(color_tween)\n\n        // let combo_tween = new TWEEN.Tween(combo_start)\n        //   .to(combo_end, 800)\n        //   .easing(TWEEN.Easing.Linear.None)\n        // combo_tween.onUpdate(function() {\n        //   if (s === 0) {\n        //     console.log(combo_start.positions[0])\n        //   }\n        //   back_existing.geometry.attributes.color.array = combo_start.colors\n        //   back_existing.geometry.attributes.color.needsUpdate = true\n        //   back_existing.geometry.attributes.position.array =\n        //     combo_start.positions\n        //   back_existing.geometry.attributes.position.needsUpdate = true\n        // })\n        // combo_tween.start()\n      } else {\n        let position_tween = new TWEEN.Tween(start_position)\n          .to(end_position, 800)\n          .easing(TWEEN.Easing.Linear.None)\n        position_tween.onUpdate(function() {\n          back_existing.geometry.attributes.position.array = start_position\n          back_existing.geometry.attributes.position.needsUpdate = true\n        })\n        position_tween.start()\n      }\n\n      // selected\n      let existing = existing_points[s]\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let sel_start_positions = existing.geometry.attributes.position.array.slice()\n      let sel_end_position_prep = indexes.map(i => {\n        let coord = slice.coordinates[i]\n        return coord\n      })\n      let end_flattened = prepPositions(sel_end_position_prep)\n      let sel_end_position = new Float32Array(end_flattened)\n\n      let size_delay = 1200\n      if (!transition_colors) size_delay = 400\n      let size = { value: point_size_dict[this.props.dataset] }\n      let end_size = { value: 0 }\n      let me = this\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n        .delay(size_delay)\n        .onComplete(() => {\n          // hack to just run once\n          if (s === 0) {\n            me.addSelectedPoints()\n            me.props.setTransitionStatus(0.5)\n          }\n        })\n      size_tween.onUpdate(function() {\n        existing.material.uniforms.size = size\n      })\n\n      let sel_position_tween = new TWEEN.Tween(sel_start_positions)\n        .to(sel_end_position, 800)\n        .easing(TWEEN.Easing.Linear.None)\n      sel_position_tween.onUpdate(function() {\n        existing.geometry.attributes.position.array = sel_start_positions\n        existing.geometry.attributes.position.needsUpdate = true\n      })\n      sel_position_tween.onComplete(() => {\n        if (s === 0) {\n          setTimeout(() => {\n            if (existing.material.uniforms.size.value > 0) {\n              me.props.setTransitionStatus(2.6)\n            } else {\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0)\n            }\n          }, 0)\n        }\n      })\n      if (existing.material.uniforms.size.value > 0) {\n        sel_position_tween.chain(size_tween)\n      } else {\n        // existing.material.uniforms.size.value = 20\n      }\n      sel_position_tween.start()\n    }\n  }\n\n  addSelectedPoints() {\n    let { loaded_embedding, embeddings } = this.props\n\n    this.scene.children[1] = new THREE.Group()\n\n    let loaded = embeddings[loaded_embedding]\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let parent_group = new THREE.Group()\n\n    let slice_number = loaded_sliced.length\n    for (let s = 0; s < slice_number; s++) {\n      let slice = loaded_sliced[s]\n\n      let indexes = []\n      for (let i = 0; i < slice.statuses.length; i++) {\n        if (slice.statuses[i] === 1) {\n          indexes.push(i)\n        }\n      }\n      let attribute_indexes = new Float32Array(indexes)\n\n      let point_number = indexes.length\n\n      let geometry = new THREE.BufferGeometry()\n\n      // positions\n      let positions = prepPositions(indexes.map(i => slice.coordinates[i]))\n\n      // offsets\n      let offsets = new Float32Array(point_number * 2)\n      for (let i = 0, index = 0, l = point_number; i < l; i++, index += 2) {\n        let loc_index = indexes[i]\n        let x =\n          ((loc_index % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(loc_index / sprite_side) * sprite_image_size) /\n          sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      let color_prep = indexes.map(i => {\n        return [0.85, 0.85, 0.85]\n      })\n      let color_flattened = _.flatten(color_prep)\n      let colors = new Float32Array(color_flattened)\n\n      let texture_subsize = 1 / sprite_side\n\n      let texture = this.textures[s]\n      let repeat = [texture_subsize, texture_subsize]\n\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n      geometry.addAttribute(\n        'indexes',\n        new THREE.BufferAttribute(attribute_indexes, 1)\n      )\n\n      // texture = circle_texture\n      // repeat = [1, 1]\n\n      let uniforms = {\n        texture: { value: texture },\n        repeat: { value: new THREE.Vector2(...repeat) },\n        size: { value: 0 },\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          // vec4 tex = texture2D( texture, uv * repeat );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      if (this.props.dataset === 'Caltech') {\n        fragment_shader = `\n          uniform sampler2D texture;\n          uniform vec2 repeat;\n          varying vec2 vOffset;\n          varying vec3 vColor;\n          void main() {\n            vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n            // vec4 tex = texture2D( texture, uv * repeat );\n            vec4 tex = texture2D( texture, uv * repeat  + vOffset);\n            // if ( tex.r < 0.5 ) discard;\n            if ( uv[0] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] < 0.1 ) tex = vec4(vColor, 1.0);\n            if ( uv[0] > 0.9 ) tex = vec4(vColor, 1.0);\n            if ( uv[1] > 0.9 ) tex = vec4(vColor, 1.0);\n            // tex.r = 1.0;\n            // tex.g = 1.0;\n            // tex.b = 1.0;\n            gl_FragColor = tex;\n        }`\n      }\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      let point_cloud = new THREE.Points(geometry, material)\n      parent_group.add(point_cloud)\n    }\n\n    this.scene.children[1] = parent_group\n    // this.scene.children[1].visible = false\n  }\n\n  revealSelected() {\n    let size = { value: 0 }\n    let end_size = { value: point_size_dict[this.props.dataset] }\n    let groups = this.scene.children[1].children\n    for (let g = 0; g < groups.length; g++) {\n      let points = groups[g]\n      let size_tween = new TWEEN.Tween(size)\n        .to(end_size, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      size_tween.onUpdate(function() {\n        points.material.uniforms.size = size\n      })\n      let me = this\n      size_tween.onComplete(function() {\n        if (g === 0) {\n          me.props.setTransitionStatus(1)\n        }\n      })\n      size_tween.start()\n    }\n\n    // let opacity = { value: 0 }\n    // let end_opacity = { value: 1 }\n    // for (let g = 0; g < groups.length; g++) {\n    //   let points = groups[g]\n    //   points.material.uniforms.size = { value: 20 }\n    //   let opacity_tween = new TWEEN.Tween(opacity)\n    //     .to(end_opacity, 800)\n    //     .easing(TWEEN.Easing.Linear.None)\n    //   opacity_tween.onUpdate(function() {\n    //     console.log(opacity.value)\n    //     points.material.opacity = opacity.value\n    //   })\n    //   let me = this\n    //   opacity_tween.onComplete(function() {\n    //     if (g === 0) {\n    //       me.props.setTransitionStatus(1)\n    //     }\n    //   })\n    //   opacity_tween.start()\n    // }\n  }\n\n  labelSelected() {\n    let { loaded_embedding, embeddings } = this.props\n\n    let loaded = embeddings[loaded_embedding]\n\n    let ranges = getRanges(this.props.dataset)\n    let loaded_sliced = ranges.map(range => sliceRound(loaded, range))\n\n    let existing_points = this.scene.children[1].children\n\n    for (let s = 0; s < loaded_sliced.length; s++) {\n      let slice = loaded_sliced[s]\n      let existing = existing_points[s]\n\n      let indexes = Array.from(existing.geometry.attributes.indexes.array)\n\n      let start_colors = existing_points[\n        s\n      ].geometry.attributes.color.array.slice()\n\n      let color_prep = indexes.map(i => {\n        let label = slice.labels[i]\n        let color = this.state.status_to_color[label]\n        return color\n      })\n      let color_flattened = _.flatten(color_prep)\n      let end_colors = new Float32Array(color_flattened)\n\n      let color_tween = new TWEEN.Tween(start_colors)\n        .to(end_colors, 400)\n        .easing(TWEEN.Easing.Linear.None)\n      let points = existing_points[s]\n      color_tween.onUpdate(function() {\n        points.geometry.attributes.color.array = start_colors\n        points.geometry.attributes.color.needsUpdate = true\n      })\n      let me = this\n      color_tween.onComplete(function() {\n        if (s === 0) {\n          setTimeout(function() {\n            me.props.setTransitionStatus(2.3)\n          }, 0)\n        }\n      })\n      color_tween.start()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.loaded_embedding === null &&\n      this.props.loaded_embedding !== null\n    ) {\n      // first load\n      Promise.all(getTextures(tile_dict[this.props.dataset])).then(textures => {\n        this.textures = textures\n        this.addPoints()\n        this.addSelectedPoints()\n        this.props.setTransitionStatus(0.5)\n      })\n    } else if (prevProps.loaded_embedding !== this.props.loaded_embedding) {\n      //   // embeddings have changed\n      let prevd = decodeS(prevProps.loaded_embedding)\n      let d = decodeS(this.props.loaded_embedding)\n      if (prevd.dataset !== d.dataset) {\n        let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n          d.dataset\n        )\n        this.setState({\n          color_array,\n          color_array_hexes,\n          status_to_color,\n        })\n\n        // different dataset\n        while (this.scene.children.length > 0) {\n          this.scene.remove(this.scene.children[0])\n        }\n        this.props.setTransitionStatus(0)\n        let me = this\n        setTimeout(() => {\n          Promise.all(getTextures(tile_dict[me.props.dataset])).then(\n            textures => {\n              me.textures = textures\n              me.addPoints()\n              me.addSelectedPoints()\n              me.props.setTransitionStatus(0.5)\n            }\n          )\n        }, 0)\n      } else if (prevd.strategy !== d.strategy) {\n        // new strategy, we should transition\n        // new strategy, who dis\n        // if (this.props.transition_status === 1) {\n        // this.labelSelected()\n        // }\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      } else if (\n        prevd.round !== d.round &&\n        this.props.transition_status !== 1.5\n      ) {\n        this.transitionPoints(\n          this.props.loaded_embedding,\n          this.props.embeddings,\n          true\n        )\n      }\n    } else if (\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 0) ||\n      (this.props.transition_status === 0.5 &&\n        prevProps.transition_status === 2.6)\n    ) {\n      this.revealSelected()\n    } else if (\n      // probably a race condition here\n      this.props.transition_status === 2 &&\n      prevProps.transition_status === 1.5\n    ) {\n      this.labelSelected(this.props.loaded_embedding, this.props.embeddings)\n    } else if (\n      this.props.transition_status === 2.3 &&\n      prevProps.transition_status === 2\n    ) {\n      this.transitionPoints(this.props.loaded_embedding, this.props.embeddings)\n    } else if (this.props.round !== prevProps.round) {\n    }\n  }\n\n  showHover(mouse_coords, sprite_index, digit_index, full_index) {\n    let loaded = this.props.embeddings[this.props.loaded_embedding]\n    this.scene.children[1].visible = true\n    this.hover_mount.style.display = 'block'\n    let y_adjust = `${mouse_coords[1] -\n      hover_size -\n      this.props.grem -\n      hover_pad * 4 -\n      14}px`\n    // y_adjust = `${mouse_coords[1] - hover_size / 2 - hover_pad}px`\n    this.hover_mount.style.transform = `translate3d(${mouse_coords[0] -\n      hover_size / 2 -\n      hover_pad}px, ${y_adjust},0)`\n    this.hover_ctx = this.hover_mount.childNodes[0].getContext('2d')\n    this.hover_ctx.imageSmoothingEnabled = false\n    let label = this.hover_mount.childNodes[1]\n    this.hover_ctx.fillRect(0, 0, hover_size, hover_size)\n\n    let status = loaded.statuses[full_index]\n\n    let adjusted_status = this.state.status_to_color.slice(\n      0,\n      this.state.status_to_color.length - 1\n    )\n    adjusted_status.push([0.5, 0.5, 0.5])\n\n    let color = null\n    let text_color = 'black'\n    if (status === 1) {\n      color = '#eee'\n      text_color = 'black'\n    } else {\n      color =\n        'rgba(' +\n        adjusted_status[loaded.labels[full_index]]\n          .map(d => Math.round(d * 255))\n          .join(',') +\n        ',1)'\n    }\n    this.hover_mount.style.background = color\n    this.hover_mount.style.color = text_color\n\n    let { sprite_side, sprite_image_size } = sprite_spec_dict[\n      this.props.dataset\n    ]\n\n    label.style.background = color\n    label.innerText =\n      status === 1\n        ? 'selected'\n        : [...label_dict[this.props.dataset], 'unlabeled'][\n            loaded.labels[full_index]\n          ]\n    this.hover_ctx.drawImage(\n      image_dict[this.props.dataset][sprite_index],\n      // source rectangle\n      (digit_index % sprite_side) * sprite_image_size,\n      Math.floor(digit_index / sprite_side) * sprite_image_size,\n      sprite_image_size,\n      sprite_image_size,\n      // destination rectangle\n      0,\n      0,\n      hover_size,\n      hover_size\n    )\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height } = this.props\n    let [mouseX, mouseY] = mouse_position\n\n    let { sprite_size } = sprite_spec_dict[this.props.dataset]\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    if (this.props.dataset === 'Caletch')\n      this.raycaster.params.Points.threshold = 4.0\n    if (\n      this.scene.children[0] !== undefined &&\n      this.scene.children[0].children.length > 0\n    ) {\n      let intersects = this.raycaster.intersectObjects(\n        this.scene.children[0].children\n      )\n      if (intersects[0]) {\n        let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n        let intersect = sorted_intersects[0]\n        let sprite_index = intersect.object.userData.sprite_index\n        let digit_index = intersect.index\n        let full_index = sprite_index * sprite_size + digit_index\n        this.showHover([mouseX, mouseY], sprite_index, digit_index, full_index)\n        // this.props.setHoverIndex(full_index)\n        // this.highlightPoint(sprite_index, digit_index, full_index)\n      } else {\n        this.hover_mount.style.display = `none`\n      }\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node())\n      let mouse_position = [mouseX, mouseY]\n      this.checkIntersects(mouse_position)\n    })\n\n    view.on('mousedown', () => {\n      this.hover_mount.style.display = `none`\n    })\n  }\n\n  init() {\n    let { width, height } = this.props\n\n    let { color_array, color_array_hexes, status_to_color } = getColorStuff(\n      this.props.dataset\n    )\n    this.setState({\n      color_array,\n      color_array_hexes,\n      status_to_color,\n    })\n\n    this.scene = new THREE.Scene()\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.camera.position.z = 30\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    let point_group = new THREE.Group()\n    this.scene.add(point_group)\n    let selected_point_group = new THREE.Group()\n    this.scene.add(selected_point_group)\n\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n\n    this.animate()\n\n    this.handleMouse()\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.sortObjects = false\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height, grem, dataset } = this.props\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          width: width,\n          height: height,\n          background: '#222',\n          overflow: 'hidden',\n          cursor: 'crosshair',\n        }}\n        grem={grem}\n      >\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n          }}\n          ref={mount => {\n            this.mount = mount\n          }}\n        />\n        <div\n          style={{\n            background: 'transparent',\n            display: 'flex',\n            flexWrap: 'auto',\n            padding: `0 ${grem / 4}px`,\n            position: 'absolute',\n            left: 0,\n            bottom: grem / 2,\n            pointerEvents: 'none',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'auto',\n            }}\n          >\n            <div style={{ padding: `0 ${grem / 4}px` }}>Key:</div>\n            <div\n              style={{\n                background: '#888',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n              }}\n            >\n              unlabeled\n            </div>\n            <div\n              style={{\n                background: '#fff',\n                color: '#111',\n                height: grem,\n                padding: `0 ${grem / 4}px`,\n                textAlign: 'center',\n                marginLeft: grem / 4,\n              }}\n            >\n              selected\n            </div>\n          </div>\n\n          <div\n            style={{\n              padding: `0 ${grem / 4}px 0 ${grem * 0.75}px`,\n              display: 'flex',\n              flexWrap: 'auto',\n            }}\n          >\n            <div style={{ padding: `0 0 0 ${grem / 4}px` }}>Labels:</div>\n            {this.state.color_array_hexes !== null\n              ? this.state.color_array_hexes.map((c, i) => (\n                  <div\n                    key={'color_' + i}\n                    style={{\n                      background: this.state.color_array_hexes[i],\n                      height: grem,\n                      textAlign: 'center',\n                      color: '#111',\n                      padding: `0 ${grem / 4}px`,\n                      marginLeft: grem / 4,\n                    }}\n                  >\n                    {label_dict[dataset][i]}\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            width: hover_size + hover_pad * 2 + hover_bord * 2,\n            pointerEvents: 'none',\n            padding: hover_pad,\n            display: 'none',\n            color: 'white',\n            height: grem + hover_size + hover_pad * 3 + hover_bord * 2,\n            lineHeight: 0,\n            border: `solid ${hover_bord}px rgba(0,0,0,0.3)`,\n          }}\n          ref={mount => {\n            this.hover_mount = mount\n          }}\n        >\n          <canvas\n            width={hover_size}\n            height={hover_size}\n            style={{ imageRendering: 'pixelated' }}\n          />\n          <div\n            style={{\n              width: hover_size,\n              height: grem,\n              textAlign: 'center',\n              lineHeight: 1.5,\n              paddingTop: hover_pad,\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Footer from './Footer'\nimport { activeStyle } from './Utils'\nimport ProjectionSelected from './ProjectionSelected'\nimport BigButton from './BigButton'\nimport Timer from './Timer'\nimport * as chroma from 'chroma-js'\nimport SelectedList from './SelectedList'\n\n// let strategy_colors = ['#1b9e77', '#d95f02', '#7570b3', '#e7298a']\n\nlet color_num = 4\nlet strategy_colors = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(-45 + (90 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet ranges = []\nfor (let i = 0; i < sprite_number; i++) {\n  let start = i * sprite_size\n  let end = (i + 1) * sprite_size\n  if (i === sprite_number - 1) end = sprite_number * sprite_size\n  ranges.push([start, end])\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\ncolor_num = 10\nlet color_array_hexes = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\nlet gradient_string = color_array_hexes.reduce((total, curr, i) => {\n  return (\n    total +\n    curr +\n    ' ' +\n    Math.round((i / color_num) * 100) +\n    (i === color_num - 1 ? '%' : '%, ')\n  )\n}, '')\n\nlet transition_timings = [400]\n\n// let strategy_colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3']\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      header_height: null,\n      footer_height: null,\n      transition_status: 0,\n      loading_round: false,\n      simulating_labeling: false,\n      show_list: false,\n    }\n    this.setSize = this.setSize.bind(this)\n    this.setHeaderHeight = this.setHeaderHeight.bind(this)\n    this.setFooterHeight = this.setFooterHeight.bind(this)\n    this.setTransitionStatus = this.setTransitionStatus.bind(this)\n    this.labelsGotten = this.labelsGotten.bind(this)\n    this.toggleList = this.toggleList.bind(this)\n  }\n\n  setHeaderHeight(height) {\n    this.setState({ header_height: height })\n  }\n\n  setFooterHeight(height) {\n    this.setState({ footer_height: height })\n  }\n\n  toggleList(new_value) {\n    this.setState({ show_list: new_value })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.loading_round === true &&\n      prevProps.loaded_embedding !== this.props.loaded_embedding\n    ) {\n      this.setState({ loading_round: false })\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  setTransitionStatus(status) {\n    if (status === 1.5) {\n      this.setState({ transition_status: status, simulating_labeling: true })\n      this.props.selectRound(this.props.round + 1)\n    } else {\n      this.setState({ transition_status: status })\n    }\n  }\n\n  labelsGotten() {\n    this.setState({\n      transition_status: 2,\n      loading_round: true,\n      simulating_labeling: false,\n    })\n  }\n\n  render() {\n    let {\n      ww,\n      wh,\n      header_height,\n      footer_height,\n      loading_round,\n      simulating_labeling,\n      transition_status,\n      show_list,\n    } = this.state\n    let {\n      dataset,\n      strategy,\n      round,\n      datasets,\n      strategies,\n      selectDataset,\n      selectStrategy,\n      embeddings,\n      requested_embedding,\n      loaded_embedding,\n      strategy_explored,\n      toggleList,\n    } = this.props\n\n    let font_size = 14\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    let round_limit = 7\n\n    return ww === null ? (\n      <div style={{ padding: grem / 4 }}>Loading layout...</div>\n    ) : (\n      <div\n        style={{\n          width: ww,\n          height: wh,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        <>\n          <div\n            style={{\n              position: 'fixed',\n              top: 0,\n              right: 0,\n              padding: grem / 2,\n              zIndex: 999,\n              background: 'red',\n              display: 'none',\n            }}\n          >\n            {transition_status}\n          </div>\n          {footer_height !== null && header_height !== null ? (\n            <div\n              style={{\n                background: 'white',\n                height: wh,\n              }}\n            >\n              <ProjectionSelected\n                width={ww}\n                height={wh}\n                grem={grem}\n                strategies={strategies}\n                strategy_colors={strategy_colors}\n                strategy={strategy}\n                dataset={dataset}\n                embeddings={embeddings}\n                requested_embedding={requested_embedding}\n                loaded_embedding={loaded_embedding}\n                loading_round={loading_round}\n                selectRound={this.props.selectRound}\n                mnist_images={mnist_images}\n                ranges={ranges}\n                transition_status={this.state.transition_status}\n                setTransitionStatus={this.setTransitionStatus}\n                footer_height={footer_height}\n                round={round}\n                header_height={header_height}\n                round_limit={round_limit}\n              />\n            </div>\n          ) : null}\n          {footer_height !== null ? (\n            <BigButton\n              transition_status={this.state.transition_status}\n              grem={grem}\n              footer_height={footer_height}\n              setTransitionStatus={this.setTransitionStatus}\n              round_limit={round_limit}\n              round={round}\n              dataset={dataset}\n              toggleList={this.toggleList}\n            />\n          ) : null}\n          <Header\n            datasets={datasets}\n            selectDataset={selectDataset}\n            strategies={strategies}\n            strategy={strategy}\n            strategy_colors={strategy_colors}\n            selectStrategy={selectStrategy}\n            dataset={dataset}\n            activeStyle={activeStyle}\n            setHeaderHeight={this.setHeaderHeight}\n            gradient_string={gradient_string}\n            grem={grem}\n            transition_status={this.state.transition_status}\n          />\n          {header_height !== null ? (\n            <Footer\n              round={round}\n              ww={ww}\n              grem={grem}\n              strategies={strategies}\n              strategy_colors={strategy_colors}\n              strategy={strategy}\n              setFooterHeight={this.setFooterHeight}\n              selectRound={this.props.selectRound}\n              gradient_string={gradient_string}\n              color_array_hexes={color_array_hexes}\n              transition_status={this.state.transition_status}\n              setTransitionStatus={this.setTransitionStatus}\n              simulating_labeling={simulating_labeling}\n              strategy_explored={strategy_explored}\n              round_limit={round_limit}\n              dataset={dataset}\n            />\n          ) : null}\n          {this.state.simulating_labeling ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: Math.min(500, ww),\n                  background: 'white',\n                  color: 'black',\n                  padding: grem,\n                }}\n              >\n                <Timer\n                  grem={grem}\n                  gradient_string={gradient_string}\n                  ww={ww}\n                  labelsGotten={this.labelsGotten}\n                />\n                <div style={{ position: 'relative' }}>\n                  Getting labels for selected points...\n                </div>\n              </div>\n            </div>\n          ) : null}\n          {show_list ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                width: '100vw',\n                height: '100vh',\n                display: 'grid',\n                justifyItems: 'center',\n                alignItems: 'center',\n                color: 'black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  width: ww - grem * 3,\n                  color: 'black',\n                }}\n              >\n                <SelectedList\n                  grem={grem}\n                  dataset={dataset}\n                  embeddings={embeddings}\n                  loaded_embedding={loaded_embedding}\n                  wh={wh}\n                  ww={ww - grem * 3}\n                  toggleList={this.toggleList}\n                />\n              </div>\n            </div>\n          ) : null}\n        </>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\nimport { label_dict } from './Utils'\n\nlet image_num = 40\nlet images = [...Array(40)].map(n => null)\n\n// fixme: this duplicates projection\nlet sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 12\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n}\n\nlet color_num = 10\nlet status_to_color = [...Array(color_num)].map((n, i) =>\n  chroma\n    .hsl(0 + (360 / color_num) * i, 1, 0.5)\n    .luminance(0.5)\n    .hex()\n)\n\nclass Selected extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      labels: null,\n      prev_loaded: null,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { embeddings } = this.props\n\n    if (this.props.loaded_embedding !== prevProps.loaded_embedding) {\n      if (prevProps.loaded_embedding === null) {\n        // first real loaded set the state\n        this.setState({ prev_loaded: this.props.loaded_embedding })\n      } else {\n        // use the statuses from previous\n        let prev_embeddings = embeddings[prevProps.loaded_embedding]\n        let selected_indexes = []\n        for (let i = 0; i < prev_embeddings.statuses.length; i++) {\n          if (prev_embeddings.statuses[i] === 1) {\n            selected_indexes.push(i)\n          }\n        }\n        let loaded = embeddings[this.props.loaded_embedding]\n        let new_labels = selected_indexes.map((n, i) => loaded.labels[n])\n        this.setState({ labels: new_labels })\n      }\n    }\n    if (\n      this.props.transition_status === 0.5 &&\n      prevProps.transition_status !== 0\n    ) {\n      // need to make this run in between\n      let me = this\n      setTimeout(() => {\n        me.setState({\n          prev_loaded: this.props.loaded_embedding,\n          labels: null,\n        })\n      }, 0)\n    }\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      embeddings,\n      loaded_embedding,\n      transition_status,\n      header_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[this.state.prev_loaded]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let grid_columns = 3\n    let gutter = grem / 2\n    let side_padding = grem / 4\n    let image_width =\n      (width - side_padding * 2 * 2 - gutter * (grid_columns - 1)) /\n      grid_columns\n    let image_height = image_width\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    let selected_labels = null\n    if (loaded_embedding !== null) {\n      selected_labels = selected_indexes.map(\n        (n, i) => embeddings[loaded_embedding].labels[i]\n      )\n    }\n\n    let scale = image_width / sprite_image_size\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: header_height,\n          width: width,\n          height: height,\n          background: '#333',\n          overflow: 'hidden',\n        }}\n      >\n        {transition_status === 0 ? (\n          <div\n            style={{\n              padding: grem / 4,\n            }}\n          >\n            <div\n              style={{\n                padding: grem / 4,\n              }}\n            >\n              Use the select data button below to select data points based on\n              the strategy.\n            </div>\n          </div>\n        ) : null}\n        <div\n          style={{\n            opacity:\n              transition_status === 0 ||\n              transition_status === 2.6 ||\n              round_limit === adjusted_round\n                ? 0\n                : 1,\n            transition: 'opacity 0.4s linear',\n            transitionDelay: '0.1s',\n            padding: grem / 2,\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: width,\n              background: '#444',\n              padding: `${grem / 4}px ${grem / 2}px`,\n            }}\n          >\n            <div>{transition_status < 2 ? 'Selected' : 'Labeled'}:</div>\n            <div>1,000</div>\n          </div>\n          <div\n            style={{\n              right: 0,\n              top: header_height,\n              width: width,\n              height: height - grem / 2,\n              paddingTop: grem * 1,\n              background: '#333',\n              overflow: 'auto',\n            }}\n          >\n            <div\n              style={{\n                display: 'grid',\n                paddingTop: side_padding * 2,\n                paddingBottom: side_padding * 2,\n                gridTemplateColumns: `repeat(${grid_columns}, ${image_width}px)`,\n                gridColumnGap: gutter,\n                gridRowGap: gutter,\n              }}\n            >\n              {image_pickers.length > 0\n                ? image_pickers.map((p, i) => {\n                    let label =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? label_dict[dataset][this.state.labels[i]]\n                        : 'selected'\n                    let background =\n                      this.state.labels !== null &&\n                      this.props.transition_status > 1.5\n                        ? status_to_color[this.state.labels[i]]\n                        : '#ddd'\n                    return (\n                      <div\n                        key={p}\n                        style={{\n                          width: image_width,\n                          height: image_height + grem - 3,\n                          background: background,\n                          color: '#111',\n                          textAlign: 'center',\n                          transition: 'background 400ms linear',\n                          paddingLeft: 3,\n                          paddingTop: 3,\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                            backgroundSize: `${scale *\n                              sprite_actual_size}px ${scale *\n                              sprite_actual_size}px`,\n                            backgroundPosition: `-${p[1] *\n                              scale *\n                              sprite_image_size}px -${p[2] *\n                              scale *\n                              sprite_image_size}px`,\n                            width: image_width - 6,\n                            height: image_height - 6,\n                            imageRendering: 'pixelated',\n                          }}\n                        />\n                        <div\n                          style={{\n                            whiteSpace: 'nowrap',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                          }}\n                        >\n                          {label}\n                        </div>\n                      </div>\n                    )\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Selected\n","import React, { Component } from 'react'\nimport Projection from './Projection'\nimport Selected from './Selected'\n\nclass ProjectionSelected extends Component {\n  render() {\n    let {\n      width,\n      height,\n      grem,\n      strategies,\n      strategy_colors,\n      strategy,\n      active_embedding,\n      requested_embedding,\n      loaded_embedding,\n      embeddings,\n      mnist_images,\n      ranges,\n      transition_status,\n      setTransitionStatus,\n      loading_round,\n      header_height,\n      footer_height,\n      round,\n      round_limit,\n      dataset,\n    } = this.props\n\n    let selected_width = 200\n    return (\n      <div style={{ position: 'relative' }}>\n        <Projection\n          width={width}\n          height={height}\n          grem={grem}\n          active_embedding={active_embedding}\n          strategies={strategies}\n          strategy_colors={strategy_colors}\n          strategy={strategy}\n          embeddings={embeddings}\n          requested_embedding={requested_embedding}\n          loaded_embedding={loaded_embedding}\n          transition_status={transition_status}\n          setTransitionStatus={setTransitionStatus}\n          loading_round={loading_round}\n          footer_height={footer_height}\n          selectRound={this.props.selectRound}\n          round={round}\n          dataset={dataset}\n        />\n        {false ? (\n          <Selected\n            width={selected_width}\n            height={\n              height - this.props.footer_height - grem * 2 - header_height\n            }\n            grem={grem}\n            mnist_images={mnist_images}\n            embeddings={embeddings}\n            loaded_embedding={loaded_embedding}\n            ranges={ranges}\n            transition_status={transition_status}\n            header_height={header_height}\n            round={round}\n            round_limit={round_limit}\n            dataset={dataset}\n          />\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default ProjectionSelected\n","import React, { Component } from 'react'\n\nclass BigButton extends Component {\n  render() {\n    let { transition_status, grem, round_limit, round } = this.props\n\n    let button_text\n    let next_state\n    if (transition_status === 0) {\n      button_text = 'Loading...'\n      next_state = null\n    } else if (transition_status === 0.5) {\n      button_text = 'Selecting...'\n      next_state = null\n    } else if (transition_status === 1) {\n      button_text = 'Label & train'\n      next_state = 1.5\n    } else if (transition_status === 1.5) {\n      button_text = 'Labeling...'\n      next_state = null\n    } else if (transition_status === 2) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.3) {\n      button_text = 'Training...'\n      next_state = null\n    } else if (transition_status === 2.6) {\n      button_text = 'Deselecting...'\n      next_state = null\n    }\n\n    let adjusted_round = round\n    if (transition_status > 1 && transition_status < 2.3)\n      adjusted_round = Math.max(0, adjusted_round - 1)\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          position: 'absolute',\n          bottom: this.props.footer_height + grem * 2.5,\n          left: 0,\n          padding: `0 ${grem / 4}px`,\n          pointerEvents: 'none',\n        }}\n      >\n        <div\n          style={{\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          {this.props.dataset === 'Caltech' ? '50' : '1,000'} points selected\n        </div>\n        <div\n          style={{\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          <button\n            style={{\n              pointerEvents: 'auto',\n            }}\n            onClick={() => {\n              this.props.toggleList(true)\n            }}\n          >\n            view list\n          </button>\n        </div>\n        <div\n          style={{\n            padding: `0 ${grem / 4}px`,\n          }}\n        >\n          {round_limit !== adjusted_round ? (\n            <button\n              style={{\n                width: 140,\n                height: grem,\n                background: next_state === null ? '#444' : 'white',\n                color: next_state === null ? 'white' : 'black',\n                textAlign: 'left',\n                cursor: next_state === null ? 'default' : 'pointer',\n                textDecoration: next_state === null ? 'none' : 'underline',\n                borderRadius: grem / 2,\n                textAlign: 'center',\n                pointerEvents: 'auto',\n              }}\n              disabled={next_state === null}\n              onClick={() => {\n                if (next_state !== null) {\n                  this.props.setTransitionStatus(next_state)\n                }\n              }}\n            >\n              {button_text}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BigButton\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    let counter = 0\n    let count = 0\n    let me = this\n    function repeatOften() {\n      counter += 25\n      let count_check = Math.floor(counter)\n      if (count_check !== count) {\n        count = count_check\n      }\n      me.setState({ count: count })\n      if (count < 1000) {\n        requestAnimationFrame(repeatOften)\n      } else {\n        setTimeout(() => {\n          me.props.labelsGotten()\n        }, 200)\n      }\n    }\n    setTimeout(() => requestAnimationFrame(repeatOften), 200)\n  }\n\n  render() {\n    let { grem, ww } = this.props\n    return (\n      <div>\n        <div\n          style={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n            left: 0,\n            top: 0,\n          }}\n        >\n          <div\n            style={{\n              height: '100%',\n              width: `${(this.state.count / 1000) * 100}%`,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '100%',\n                background: `linear-gradient(to right, ${\n                  this.props.gradient_string\n                })`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport * as chroma from 'chroma-js'\n\n// duplicate from projection\nlet sprite_actual_size = 2048\n\nlet sprite_spec_mnist = {\n  sprite_side: 73,\n  sprite_size: 73 * 73,\n  sprite_number: 12,\n  sprite_image_size: 28,\n}\n\nlet sprite_spec_quickdraw = Object.assign({}, sprite_spec_mnist, {\n  sprite_number: 13,\n})\n\nlet sprite_spec_caltech = Object.assign({}, sprite_spec_mnist, {\n  sprite_side: 9,\n  sprite_size: 9 * 9,\n  sprite_number: 11,\n  sprite_image_size: 224,\n})\n\nlet sprite_spec_dict = {\n  MNIST: sprite_spec_mnist,\n  Quickdraw: sprite_spec_quickdraw,\n  Caltech: sprite_spec_caltech,\n}\n\nlet mnist_tile_string = 'mnist_'\nlet mnist_tile_locations = [...Array(sprite_spec_mnist.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet quickdraw_tile_string = 'QUICKDRAW_'\nlet quickdraw_tile_locations = [\n  ...Array(sprite_spec_quickdraw.sprite_number),\n].map((n, i) => `${process.env.PUBLIC_URL}/${quickdraw_tile_string}${i}.png`)\n\nlet caltech_tile_string = 'caltech_'\nlet caltech_tile_locations = [...Array(sprite_spec_caltech.sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${caltech_tile_string}${i}.png`\n)\n\nlet tile_dict = {\n  MNIST: mnist_tile_locations,\n  Quickdraw: quickdraw_tile_locations,\n  Caltech: caltech_tile_locations,\n}\n\nclass SelectedList extends Component {\n  render() {\n    let { grem, embeddings, loaded_embedding, dataset, ww, wh } = this.props\n\n    console.log(wh)\n\n    let selected_indexes = []\n    // let loaded = embeddings[loaded_embedding]\n    let loaded = embeddings[loaded_embedding]\n    if (loaded) {\n      for (let i = 0; i < loaded.statuses.length; i++) {\n        if (loaded.statuses[i] === 1) {\n          selected_indexes.push(i)\n        }\n      }\n    }\n\n    let { sprite_size, sprite_side, sprite_image_size } = sprite_spec_dict[\n      dataset\n    ]\n\n    let target_width = 100 + grem / 2\n    let columns = Math.floor((ww - grem) / target_width)\n    let image_width = (ww - grem - (columns - 1) * (grem / 2)) / columns\n    // let image_columns = Math.round(ww- grem/2) / (target_width + grem / 2))\n    // let image_width = Math.floor((ww - grem) / image_columns)\n    let scale = image_width / sprite_image_size\n\n    let image_pickers = selected_indexes.map(loc_index => {\n      let sprite_num = Math.floor(loc_index / sprite_size)\n      let sprite_index = loc_index % sprite_size\n      let column = sprite_index % sprite_side\n      let row = Math.floor(sprite_index / sprite_side)\n      return [sprite_num, column, row]\n    })\n\n    return (\n      <div style={{ background: '#888' }}>\n        <div\n          style={{\n            padding: grem / 2,\n            background: 'white',\n            color: 'black',\n            position: 'relative',\n          }}\n        >\n          Selected points\n          <button\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              padding: grem / 2,\n              color: 'black',\n            }}\n            onClick={() => {\n              this.props.toggleList(false)\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div style={{ overflow: 'auto', height: wh - grem * 6 }}>\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateColumns: `repeat(auto-fill, ${image_width}px)`,\n              gridRowGap: grem / 2,\n              gridColumnGap: grem / 2,\n              padding: grem / 2,\n            }}\n          >\n            {image_pickers.length > 0\n              ? image_pickers.map((p, i) => {\n                  return (\n                    <div\n                      key={p}\n                      style={{ paddingBottom: '100%', position: 'relative' }}\n                    >\n                      <div\n                        style={{\n                          position: 'absolute',\n                          left: 0,\n                          top: 0,\n                          right: 0,\n                          bottom: 0,\n                          backgroundImage: `url(${tile_dict[dataset][p[0]]})`,\n                          backgroundSize: `${scale *\n                            sprite_actual_size}px ${scale *\n                            sprite_actual_size}px`,\n                          backgroundPosition: `-${p[1] *\n                            scale *\n                            sprite_image_size}px -${p[2] *\n                            scale *\n                            sprite_image_size}px`,\n                          imageRendering: 'pixelated',\n                        }}\n                      />\n                    </div>\n                  )\n                })\n              : null}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectedList\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet datasets = ['MNIST', 'Quickdraw', 'Caltech']\nlet strategies = ['random', 'entropy', 'adversarial', 'ensemble']\n\nlet mnist_strategy_url = [\n  'mnist_random_round',\n  'mnist_entropy_round',\n  'mnist_adv_round',\n  'mnist_ensemble_entropy_round',\n]\n\nlet quickdraw_strategy_url = [\n  'quickdraw_random_round',\n  'quickdraw_entropy_round',\n  'quickdraw_adv_round',\n  'quickdraw_ensemble_entropy_round',\n]\n\nlet caltech_strategy_url = [\n  'caltech_random_round',\n  'caltech_entropy_round',\n  'caltech_adv_round',\n  'caltech_ensemble_entropy_round',\n]\n\nlet strategy_dict = {\n  [datasets[0]]: mnist_strategy_url,\n  [datasets[1]]: quickdraw_strategy_url,\n  [datasets[2]]: caltech_strategy_url,\n}\n\nfunction es(dataset, strategy, round) {\n  return `${dataset}-${strategy}-${round}`\n}\n\n// range key ref: [init_embeddings, selected_embeddings, unselected_embeddings]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embeddings: {},\n      dataset: datasets[0],\n      strategy: strategies[1],\n      round: 0,\n      requested_embedding: null,\n      loaded_embedding: null,\n      strategy_explored: 0,\n    }\n    this.scaleEmbeddings = this.scaleEmbeddings.bind(this)\n    this.fetchData = this.fetchData.bind(this)\n    this.checkOrFetchData = this.checkOrFetchData.bind(this)\n    this.selectRound = this.selectRound.bind(this)\n  }\n\n  selectRound(round) {\n    let strat_limit = Math.max(this.state.strategy_explored, round)\n    this.setState({ round: round, strategy_explored: strat_limit })\n    this.checkOrFetchData(this.state.dataset, this.state.strategy, round)\n  }\n\n  selectDataset(index) {\n    this.setState({ dataset: datasets[index], strategy_explored: 0, round: 0 })\n    this.checkOrFetchData(\n      datasets[index],\n      this.state.strategy,\n      this.state.round\n    )\n  }\n\n  selectStrategy(index) {\n    this.setState({ strategy: strategies[index] })\n    this.checkOrFetchData(\n      this.state.dataset,\n      strategies[index],\n      this.state.round\n    )\n  }\n\n  checkOrFetchData(dataset, strategy, round) {\n    let { embeddings } = this.state\n    let string = es(dataset, strategy, round)\n    this.setState({ requested_embedding: string })\n    if (embeddings[string] !== undefined) {\n      this.setState({ loaded_embedding: string })\n    } else {\n      this.fetchData(dataset, strategy, round)\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  fetchData(dataset, strategy, round) {\n    let url = `${process.env.PUBLIC_URL}/${\n      strategy_dict[dataset][strategies.indexOf(strategy)]\n    }${round}.json`\n    fetch(url)\n      .then(response => response.json())\n      .then(r => {\n        // calculate embedding scale for all\n        let coordinates = r.coordinates\n        let xs = coordinates.map(e => Math.abs(e[0]))\n        let ys = coordinates.map(e => Math.abs(e[1]))\n        let max_x = _.max(xs)\n        let max_y = _.max(ys)\n        let max = Math.max(max_x, max_y)\n        let scale = d3\n          .scaleLinear()\n          .domain([-max, max])\n          .range([-20, 20])\n        let scaled = coordinates.map(e => [scale(e[0]), scale(e[1])])\n        let object = {}\n        object.coordinates = scaled\n        object.statuses = r.status\n        object.labels = r.labels\n        let embedding_string = es(dataset, strategy, round)\n        this.setState({\n          loaded_embedding: embedding_string,\n          embeddings: Object.assign({}, this.state.embeddings, {\n            [embedding_string]: object,\n          }),\n        })\n      })\n\n    // let array_size = 60000\n    // let fake_object = {}\n    // fake_object.ranges = {\n    //   init_embeddings: [0, 10000],\n    //   selected_embeddings: [10000, 11000],\n    //   unselected_embeddings: [11000, 60000],\n    // }\n    // let fake = [...Array(array_size)].map(n => [\n    //   Math.random() * 40 - 20,\n    //   Math.random() * 40 - 20,\n    // ])\n    // let embeddings = fake\n    // let xs = embeddings.map(e => Math.abs(e[0]))\n    // let ys = embeddings.map(e => Math.abs(e[1]))\n    // let max_x = _.max(xs)\n    // let max_y = _.max(ys)\n    // let max = Math.max(max_x, max_y)\n    // let scale = d3\n    //   .scaleLinear()\n    //   .domain([-max, max])\n    //   .range([-20, 20])\n    // let scaled = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    // fake_object.coordinates = scaled\n\n    // let labelled = [...Array(10000)].map(n => 1)\n    // let selected = [...Array(1000)].map(n => 2)\n    // let unlabelled = [\n    //   ...Array(array_size - labelled.length - selected.length),\n    // ].map(n => 0)\n\n    // let statuses = _.shuffle([...labelled, ...selected, ...unlabelled])\n    // fake_object.statuses = statuses\n\n    // let embedding_string = es(dataset, strategy, round)\n\n    // this.setState({\n    //   loaded_embedding: embedding_string,\n    //   embeddings: Object.assign({}, this.state.embeddings, {\n    //     [embedding_string]: fake_object,\n    //   }),\n    // })\n  }\n\n  componentDidMount() {\n    let { dataset, strategy, round } = this.state\n    this.checkOrFetchData(dataset, strategy, round)\n  }\n\n  render() {\n    return (\n      <Layout\n        {...this.state}\n        datasets={datasets}\n        strategies={strategies}\n        selectDataset={this.selectDataset.bind(this)}\n        selectStrategy={this.selectStrategy.bind(this)}\n        selectRound={this.selectRound.bind(this)}\n      />\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport Data from './Data'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}